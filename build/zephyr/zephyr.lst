
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	60 2d 00 20 21 24 00 00 37 64 00 00 f5 23 00 00     `-. !$..7d...#..
  10:	f5 23 00 00 f5 23 00 00 f5 23 00 00 00 00 00 00     .#...#...#......
	...
  2c:	fd 20 00 00 f5 23 00 00 00 00 00 00 a9 20 00 00     . ...#....... ..
  3c:	f5 23 00 00                                         .#..

00000040 <_irq_vector_table>:
  40:	ad 21 00 00 ad 21 00 00 ad 21 00 00 ad 21 00 00     .!...!...!...!..
  50:	ad 21 00 00 ad 21 00 00 ad 21 00 00 ad 21 00 00     .!...!...!...!..
  60:	ad 21 00 00 ad 21 00 00 ad 21 00 00 ad 21 00 00     .!...!...!...!..
  70:	ad 21 00 00 ad 21 00 00 ad 21 00 00 ad 21 00 00     .!...!...!...!..
  80:	ad 21 00 00 ad 21 00 00 ad 21 00 00 ad 21 00 00     .!...!...!...!..
  90:	ad 21 00 00 ad 21 00 00 ad 21 00 00 ad 21 00 00     .!...!...!...!..
  a0:	ad 21 00 00 ad 21 00 00 ad 21 00 00 ad 21 00 00     .!...!...!...!..
  b0:	ad 21 00 00 ad 21 00 00 ad 21 00 00 ad 21 00 00     .!...!...!...!..
  c0:	ad 21 00 00 ad 21 00 00 ad 21 00 00 ad 21 00 00     .!...!...!...!..
  d0:	ad 21 00 00 ad 21 00 00 ad 21 00 00 ad 21 00 00     .!...!...!...!..
  e0:	ad 21 00 00 ad 21 00 00 ad 21 00 00 ad 21 00 00     .!...!...!...!..
  f0:	ad 21 00 00 ad 21 00 00 ad 21 00 00 ad 21 00 00     .!...!...!...!..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <__data_size+0x144>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <__data_size+0x4e>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <__data_size+0x46>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <__data_size+0x6>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <__data_size+0x6>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <__data_size+0x4a>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <__data_size+0x30>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <__data_size+0x30>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <__data_size+0x42>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <__data_size+0x6>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <__data_size+0x30>
     1e2:	b902      	cbnz	r2, 1e6 <__data_size+0x52>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <__data_size+0xb6>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <__data_size+0x13c>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <__data_size+0x86>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <__data_size+0x86>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <__data_size+0x140>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <__data_size+0xb2>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <__data_size+0xb2>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <__data_size+0x34>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <__data_size+0x134>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <__data_size+0xfe>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <__data_size+0xfe>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <__data_size+0x138>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <__data_size+0x12a>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <__data_size+0x12a>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <__data_size+0x58>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <__data_size+0xfe>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <__data_size+0x12a>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <__data_size+0x86>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <__data_size+0xb2>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <__data_size+0x154>
     2dc:	b10e      	cbz	r6, 2e2 <__data_size+0x14e>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <__data_size+0x42>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <__data_size+0x17c>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <__data_size+0x162>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <__data_size+0x178>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <__data_size+0x242>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <__data_size+0x42>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <__data_size+0x16c>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <__data_size+0x23a>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <__data_size+0x1ce>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <__data_size+0x1ce>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <__data_size+0x23e>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <__data_size+0x1fa>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <__data_size+0x1fa>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <__data_size+0x214>
     3a2:	d106      	bne.n	3b2 <__data_size+0x21e>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <__data_size+0x21e>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <__data_size+0x242>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <__data_size+0x174>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <__data_size+0x1ce>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <__data_size+0x1fa>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <__data_size+0x42>
	...

000003dc <thread_led_code>:
 * O estado dos leds pode ser alterado atraves da inserçao de comando via uart.
 * Esta thread é periodica e o seu periodo pode ser alterado pela introduçao de um comando
 * 
 * 
*/
void thread_led_code(void *argA , void *argB, void *argC){
     3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	/* Timing variables to control task periodicity */
    int64_t fin_time=0, release_time=0;

	printk("Thread tempread init (periodic)\n");
     3e0:	481a      	ldr	r0, [pc, #104]	; (44c <CONFIG_FLASH_SIZE+0x4c>)

	/* Compute next release instant */
    release_time = k_uptime_get() + thread_led_period;
     3e2:	4f1b      	ldr	r7, [pc, #108]	; (450 <CONFIG_FLASH_SIZE+0x50>)
	
	while(1){
		gpio_pin_set(gpio0_dev,leds_pins[0], led0_state);
     3e4:	f8df 806c 	ldr.w	r8, [pc, #108]	; 454 <CONFIG_FLASH_SIZE+0x54>
     3e8:	4e1b      	ldr	r6, [pc, #108]	; (458 <CONFIG_FLASH_SIZE+0x58>)
		gpio_pin_set(gpio0_dev,leds_pins[1], led1_state);
     3ea:	f8df 9070 	ldr.w	r9, [pc, #112]	; 45c <CONFIG_FLASH_SIZE+0x5c>
	printk("Thread tempread init (periodic)\n");
     3ee:	f005 fec6 	bl	617e <printk>
    release_time = k_uptime_get() + thread_led_period;
     3f2:	f005 fe73 	bl	60dc <k_uptime_get>
     3f6:	683d      	ldr	r5, [r7, #0]
     3f8:	182c      	adds	r4, r5, r0
     3fa:	eb41 75e5 	adc.w	r5, r1, r5, asr #31
		gpio_pin_set(gpio0_dev,leds_pins[0], led0_state);
     3fe:	f8d8 2000 	ldr.w	r2, [r8]
     402:	210d      	movs	r1, #13
     404:	4630      	mov	r0, r6
     406:	f005 fe77 	bl	60f8 <gpio_pin_set.isra.0>
		gpio_pin_set(gpio0_dev,leds_pins[1], led1_state);
     40a:	f8d9 2000 	ldr.w	r2, [r9]
     40e:	210e      	movs	r1, #14
     410:	4630      	mov	r0, r6
     412:	f005 fe71 	bl	60f8 <gpio_pin_set.isra.0>
		gpio_pin_set(gpio0_dev,leds_pins[2], led2_state);
     416:	4b12      	ldr	r3, [pc, #72]	; (460 <CONFIG_FLASH_SIZE+0x60>)
     418:	210f      	movs	r1, #15
     41a:	681a      	ldr	r2, [r3, #0]
     41c:	4630      	mov	r0, r6
     41e:	f005 fe6b 	bl	60f8 <gpio_pin_set.isra.0>
		gpio_pin_set(gpio0_dev,leds_pins[3], led3_state);
     422:	4b10      	ldr	r3, [pc, #64]	; (464 <CONFIG_FLASH_SIZE+0x64>)
     424:	2110      	movs	r1, #16
     426:	681a      	ldr	r2, [r3, #0]
     428:	4630      	mov	r0, r6
     42a:	f005 fe65 	bl	60f8 <gpio_pin_set.isra.0>

		/* Wait for next release instant */ 
        fin_time = k_uptime_get();
     42e:	f005 fe55 	bl	60dc <k_uptime_get>
        if( fin_time < release_time) {
     432:	42a0      	cmp	r0, r4
     434:	eb71 0305 	sbcs.w	r3, r1, r5
     438:	dae1      	bge.n	3fe <thread_led_code+0x22>
            k_msleep(release_time - fin_time); /* There are other variants, k_sleep(), k_usleep(), ... */
     43a:	1a20      	subs	r0, r4, r0
     43c:	f005 fe6c 	bl	6118 <k_msleep.isra.0>
            release_time += thread_led_period;
     440:	683b      	ldr	r3, [r7, #0]
     442:	191c      	adds	r4, r3, r4
     444:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
     448:	e7d9      	b.n	3fe <thread_led_code+0x22>
     44a:	bf00      	nop
     44c:	000078f4 	.word	0x000078f4
     450:	20000018 	.word	0x20000018
     454:	20000008 	.word	0x20000008
     458:	00007454 	.word	0x00007454
     45c:	2000000c 	.word	0x2000000c
     460:	2000076c 	.word	0x2000076c
     464:	20000770 	.word	0x20000770

00000468 <thread_but_code>:
void thread_but_code(void *argA , void *argB, void *argC){
     468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	printk("Thread tempread init (periodic)\n");
     46c:	4817      	ldr	r0, [pc, #92]	; (4cc <thread_but_code+0x64>)
    release_time = k_uptime_get() + thread_but_period;
     46e:	4e18      	ldr	r6, [pc, #96]	; (4d0 <thread_but_code+0x68>)
		but1 = gpio_pin_get_dt(&button1);
     470:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4d4 <thread_but_code+0x6c>
     474:	4f18      	ldr	r7, [pc, #96]	; (4d8 <thread_but_code+0x70>)
		but2 = gpio_pin_get_dt(&button2);
     476:	f8df 9064 	ldr.w	r9, [pc, #100]	; 4dc <thread_but_code+0x74>
	printk("Thread tempread init (periodic)\n");
     47a:	f005 fe80 	bl	617e <printk>
    release_time = k_uptime_get() + thread_but_period;
     47e:	f005 fe2d 	bl	60dc <k_uptime_get>
     482:	6835      	ldr	r5, [r6, #0]
     484:	182c      	adds	r4, r5, r0
     486:	eb41 75e5 	adc.w	r5, r1, r5, asr #31
		but1 = gpio_pin_get_dt(&button1);
     48a:	4640      	mov	r0, r8
     48c:	f005 fe11 	bl	60b2 <gpio_pin_get_dt>
     490:	6038      	str	r0, [r7, #0]
		but2 = gpio_pin_get_dt(&button2);
     492:	4648      	mov	r0, r9
     494:	f005 fe0d 	bl	60b2 <gpio_pin_get_dt>
     498:	4b11      	ldr	r3, [pc, #68]	; (4e0 <thread_but_code+0x78>)
     49a:	6018      	str	r0, [r3, #0]
		but3 = gpio_pin_get_dt(&button3);
     49c:	4811      	ldr	r0, [pc, #68]	; (4e4 <thread_but_code+0x7c>)
     49e:	f005 fe08 	bl	60b2 <gpio_pin_get_dt>
     4a2:	4b11      	ldr	r3, [pc, #68]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     4a4:	6018      	str	r0, [r3, #0]
		but4 = gpio_pin_get_dt(&button4);
     4a6:	4811      	ldr	r0, [pc, #68]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     4a8:	f005 fe03 	bl	60b2 <gpio_pin_get_dt>
     4ac:	4b10      	ldr	r3, [pc, #64]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     4ae:	6018      	str	r0, [r3, #0]
        fin_time = k_uptime_get();
     4b0:	f005 fe14 	bl	60dc <k_uptime_get>
        if( fin_time < release_time) {
     4b4:	42a0      	cmp	r0, r4
     4b6:	eb71 0305 	sbcs.w	r3, r1, r5
     4ba:	dae6      	bge.n	48a <thread_but_code+0x22>
            k_msleep(release_time - fin_time); /* There are other variants, k_sleep(), k_usleep(), ... */
     4bc:	1a20      	subs	r0, r4, r0
     4be:	f005 fe2b 	bl	6118 <k_msleep.isra.0>
            release_time += thread_but_period;
     4c2:	6833      	ldr	r3, [r6, #0]
     4c4:	191c      	adds	r4, r3, r4
     4c6:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
     4ca:	e7de      	b.n	48a <thread_but_code+0x22>
     4cc:	000078f4 	.word	0x000078f4
     4d0:	20000014 	.word	0x20000014
     4d4:	00007678 	.word	0x00007678
     4d8:	20000758 	.word	0x20000758
     4dc:	00007680 	.word	0x00007680
     4e0:	2000075c 	.word	0x2000075c
     4e4:	00007688 	.word	0x00007688
     4e8:	20000760 	.word	0x20000760
     4ec:	00007690 	.word	0x00007690
     4f0:	20000764 	.word	0x20000764

000004f4 <thread_print_code>:
void thread_print_code(void *argA , void *argB, void *argC){
     4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printk("Thread print init (periodic)\n");
     4f8:	4835      	ldr	r0, [pc, #212]	; (5d0 <thread_print_code+0xdc>)
		printk("%d  ",temp);
     4fa:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 5d4 <thread_print_code+0xe0>
		printk("\n");
     4fe:	4e36      	ldr	r6, [pc, #216]	; (5d8 <thread_print_code+0xe4>)
		printk("%d ",but1);
     500:	4d36      	ldr	r5, [pc, #216]	; (5dc <thread_print_code+0xe8>)
	printk("Thread print init (periodic)\n");
     502:	f005 fe3c 	bl	617e <printk>
    release_time = k_uptime_get() + thread_print_period;
     506:	f005 fde9 	bl	60dc <k_uptime_get>
     50a:	f510 747a 	adds.w	r4, r0, #1000	; 0x3e8
     50e:	f141 0700 	adc.w	r7, r1, #0
		printk("%d  ",temp);
     512:	f8d8 1000 	ldr.w	r1, [r8]
     516:	4832      	ldr	r0, [pc, #200]	; (5e0 <thread_print_code+0xec>)
     518:	f005 fe31 	bl	617e <printk>
		printk("\n");
     51c:	4630      	mov	r0, r6
     51e:	f005 fe2e 	bl	617e <printk>
		printk("Temp Period: %d  ",thread_tempread_period);
     522:	4b30      	ldr	r3, [pc, #192]	; (5e4 <thread_print_code+0xf0>)
     524:	4830      	ldr	r0, [pc, #192]	; (5e8 <thread_print_code+0xf4>)
     526:	6819      	ldr	r1, [r3, #0]
     528:	f005 fe29 	bl	617e <printk>
		printk("\n");
     52c:	4630      	mov	r0, r6
     52e:	f005 fe26 	bl	617e <printk>
		printk("%d ",but1);
     532:	4b2e      	ldr	r3, [pc, #184]	; (5ec <thread_print_code+0xf8>)
     534:	4628      	mov	r0, r5
     536:	6819      	ldr	r1, [r3, #0]
     538:	f005 fe21 	bl	617e <printk>
		printk("%d ",but2);
     53c:	4b2c      	ldr	r3, [pc, #176]	; (5f0 <thread_print_code+0xfc>)
     53e:	4628      	mov	r0, r5
     540:	6819      	ldr	r1, [r3, #0]
     542:	f005 fe1c 	bl	617e <printk>
		printk("%d ",but3);
     546:	4b2b      	ldr	r3, [pc, #172]	; (5f4 <thread_print_code+0x100>)
     548:	4628      	mov	r0, r5
     54a:	6819      	ldr	r1, [r3, #0]
     54c:	f005 fe17 	bl	617e <printk>
		printk("%d ",but4);
     550:	4b29      	ldr	r3, [pc, #164]	; (5f8 <thread_print_code+0x104>)
     552:	4628      	mov	r0, r5
     554:	6819      	ldr	r1, [r3, #0]
     556:	f005 fe12 	bl	617e <printk>
		printk("\n");
     55a:	4630      	mov	r0, r6
     55c:	f005 fe0f 	bl	617e <printk>
		printk("But Period: %d  ",thread_but_period);
     560:	4b26      	ldr	r3, [pc, #152]	; (5fc <thread_print_code+0x108>)
     562:	4827      	ldr	r0, [pc, #156]	; (600 <thread_print_code+0x10c>)
     564:	6819      	ldr	r1, [r3, #0]
     566:	f005 fe0a 	bl	617e <printk>
		printk("\n");
     56a:	4630      	mov	r0, r6
     56c:	f005 fe07 	bl	617e <printk>
		printk("%d ",led0_state);
     570:	4b24      	ldr	r3, [pc, #144]	; (604 <thread_print_code+0x110>)
     572:	4628      	mov	r0, r5
     574:	6819      	ldr	r1, [r3, #0]
     576:	f005 fe02 	bl	617e <printk>
		printk("%d ",led1_state);
     57a:	4b23      	ldr	r3, [pc, #140]	; (608 <thread_print_code+0x114>)
     57c:	4628      	mov	r0, r5
     57e:	6819      	ldr	r1, [r3, #0]
     580:	f005 fdfd 	bl	617e <printk>
		printk("%d ",led2_state);
     584:	4b21      	ldr	r3, [pc, #132]	; (60c <thread_print_code+0x118>)
     586:	4628      	mov	r0, r5
     588:	6819      	ldr	r1, [r3, #0]
     58a:	f005 fdf8 	bl	617e <printk>
		printk("%d ",led3_state);
     58e:	4b20      	ldr	r3, [pc, #128]	; (610 <thread_print_code+0x11c>)
     590:	4628      	mov	r0, r5
     592:	6819      	ldr	r1, [r3, #0]
     594:	f005 fdf3 	bl	617e <printk>
		printk("\n");
     598:	4630      	mov	r0, r6
     59a:	f005 fdf0 	bl	617e <printk>
		printk("Led Period: %d  ",thread_led_period);
     59e:	4b1d      	ldr	r3, [pc, #116]	; (614 <thread_print_code+0x120>)
     5a0:	481d      	ldr	r0, [pc, #116]	; (618 <thread_print_code+0x124>)
     5a2:	6819      	ldr	r1, [r3, #0]
     5a4:	f005 fdeb 	bl	617e <printk>
		printk("\n");
     5a8:	4630      	mov	r0, r6
     5aa:	f005 fde8 	bl	617e <printk>
		printk("\n");		
     5ae:	4630      	mov	r0, r6
     5b0:	f005 fde5 	bl	617e <printk>
    	fin_time = k_uptime_get();
     5b4:	f005 fd92 	bl	60dc <k_uptime_get>
    	if( fin_time < release_time) {
     5b8:	42a0      	cmp	r0, r4
     5ba:	eb71 0307 	sbcs.w	r3, r1, r7
     5be:	daa8      	bge.n	512 <thread_print_code+0x1e>
        	k_msleep(release_time - fin_time); /* There are other variants, k_sleep(), k_usleep(), ... */
     5c0:	1a20      	subs	r0, r4, r0
     5c2:	f005 fda9 	bl	6118 <k_msleep.isra.0>
        	release_time += thread_print_period;
     5c6:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     5ca:	f147 0700 	adc.w	r7, r7, #0
     5ce:	e7a0      	b.n	512 <thread_print_code+0x1e>
     5d0:	00007915 	.word	0x00007915
     5d4:	20000778 	.word	0x20000778
     5d8:	000079a2 	.word	0x000079a2
     5dc:	00007945 	.word	0x00007945
     5e0:	00007966 	.word	0x00007966
     5e4:	2000001c 	.word	0x2000001c
     5e8:	00007933 	.word	0x00007933
     5ec:	20000758 	.word	0x20000758
     5f0:	2000075c 	.word	0x2000075c
     5f4:	20000760 	.word	0x20000760
     5f8:	20000764 	.word	0x20000764
     5fc:	20000014 	.word	0x20000014
     600:	00007949 	.word	0x00007949
     604:	20000008 	.word	0x20000008
     608:	2000000c 	.word	0x2000000c
     60c:	2000076c 	.word	0x2000076c
     610:	20000770 	.word	0x20000770
     614:	20000018 	.word	0x20000018
     618:	0000795a 	.word	0x0000795a

0000061c <thread_tempread_code>:
void thread_tempread_code(void *argA , void *argB, void *argC){
     61c:	e92d 42ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, lr}
	printk("Thread tempread init (periodic)\n");
     620:	481e      	ldr	r0, [pc, #120]	; (69c <thread_tempread_code+0x80>)
    release_time = k_uptime_get() + thread_tempread_period;
     622:	4e1f      	ldr	r6, [pc, #124]	; (6a0 <thread_tempread_code+0x84>)
		ret = i2c_read_dt(&dev_i2c, &temp_reading, sizeof(temp_reading));
     624:	f8df 907c 	ldr.w	r9, [pc, #124]	; 6a4 <thread_tempread_code+0x88>
	printk("Thread tempread init (periodic)\n");
     628:	f005 fda9 	bl	617e <printk>
    release_time = k_uptime_get() + thread_tempread_period;
     62c:	f005 fd56 	bl	60dc <k_uptime_get>
     630:	6835      	ldr	r5, [r6, #0]
				      uint16_t addr)
{
	const struct i2c_driver_api *api =
		(const struct i2c_driver_api *)dev->api;

	int res =  api->transfer(dev, msgs, num_msgs, addr);
     632:	4b1d      	ldr	r3, [pc, #116]	; (6a8 <thread_tempread_code+0x8c>)
     634:	182c      	adds	r4, r5, r0
     636:	689f      	ldr	r7, [r3, #8]
     638:	eb41 75e5 	adc.w	r5, r1, r5, asr #31
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
     63c:	f10d 0303 	add.w	r3, sp, #3
     640:	9301      	str	r3, [sp, #4]
	msg.len = num_bytes;
     642:	2201      	movs	r2, #1
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
     644:	2303      	movs	r3, #3
	msg.len = num_bytes;
     646:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
     648:	f88d 300c 	strb.w	r3, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     64c:	4816      	ldr	r0, [pc, #88]	; (6a8 <thread_tempread_code+0x8c>)
     64e:	f8d7 c008 	ldr.w	ip, [r7, #8]
     652:	234d      	movs	r3, #77	; 0x4d
     654:	a901      	add	r1, sp, #4
     656:	47e0      	blx	ip
		ret = i2c_read_dt(&dev_i2c, &temp_reading, sizeof(temp_reading));
     658:	f8c9 0000 	str.w	r0, [r9]
		if(ret != 0){
     65c:	b128      	cbz	r0, 66a <thread_tempread_code+0x4e>
			printk("Failed to write/read I2C device address %x at Reg. %x \r\n", dev_i2c.addr,config);
     65e:	4b13      	ldr	r3, [pc, #76]	; (6ac <thread_tempread_code+0x90>)
     660:	4813      	ldr	r0, [pc, #76]	; (6b0 <thread_tempread_code+0x94>)
     662:	781a      	ldrb	r2, [r3, #0]
     664:	214d      	movs	r1, #77	; 0x4d
     666:	f005 fd8a 	bl	617e <printk>
		if(temp_reading >= 128){
     66a:	f99d 2003 	ldrsb.w	r2, [sp, #3]
     66e:	f89d 3003 	ldrb.w	r3, [sp, #3]
     672:	2a00      	cmp	r2, #0
     674:	4a0f      	ldr	r2, [pc, #60]	; (6b4 <thread_tempread_code+0x98>)
			temp = -256 + temp_reading; // guardar o valor da temperatura no buffer de dados
     676:	bfb8      	it	lt
     678:	f5a3 7380 	sublt.w	r3, r3, #256	; 0x100
			temp = temp_reading; // guardar o valor da temperatura no buffer de dados
     67c:	6013      	str	r3, [r2, #0]
        fin_time = k_uptime_get();
     67e:	f005 fd2d 	bl	60dc <k_uptime_get>
        if( fin_time < release_time) {
     682:	42a0      	cmp	r0, r4
     684:	eb71 0305 	sbcs.w	r3, r1, r5
     688:	dad8      	bge.n	63c <thread_tempread_code+0x20>
            k_msleep(release_time - fin_time); /* There are other variants, k_sleep(), k_usleep(), ... */
     68a:	1a20      	subs	r0, r4, r0
     68c:	f005 fd44 	bl	6118 <k_msleep.isra.0>
            release_time += thread_tempread_period;
     690:	6833      	ldr	r3, [r6, #0]
     692:	191c      	adds	r4, r3, r4
     694:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	while(1){
     698:	e7d0      	b.n	63c <thread_tempread_code+0x20>
     69a:	bf00      	nop
     69c:	000078f4 	.word	0x000078f4
     6a0:	2000001c 	.word	0x2000001c
     6a4:	20000774 	.word	0x20000774
     6a8:	000074b4 	.word	0x000074b4
     6ac:	2000108b 	.word	0x2000108b
     6b0:	0000796b 	.word	0x0000796b
     6b4:	20000778 	.word	0x20000778

000006b8 <CmdChar>:
	if (cmdLen < MAX_CMDSTRING_SIZE) {
     6b8:	4a06      	ldr	r2, [pc, #24]	; (6d4 <CmdChar+0x1c>)
     6ba:	7813      	ldrb	r3, [r2, #0]
     6bc:	2b09      	cmp	r3, #9
		cmdString[cmdLen] = newChar;
     6be:	bf9f      	itttt	ls
     6c0:	4905      	ldrls	r1, [pc, #20]	; (6d8 <CmdChar+0x20>)
     6c2:	54c8      	strbls	r0, [r1, r3]
		cmdLen ++;
     6c4:	3301      	addls	r3, #1
		return EXIT_SUCCESS;
     6c6:	2000      	movls	r0, #0
		cmdLen ++;
     6c8:	bf94      	ite	ls
     6ca:	7013      	strbls	r3, [r2, #0]
	return STRING_FULL;
     6cc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
     6d0:	4770      	bx	lr
     6d2:	bf00      	nop
     6d4:	20001080 	.word	0x20001080
     6d8:	20001081 	.word	0x20001081

000006dc <uart_cb>:
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data){
     6dc:	b410      	push	{r4}
	switch (evt->type) {
     6de:	780a      	ldrb	r2, [r1, #0]
     6e0:	2a02      	cmp	r2, #2
     6e2:	d003      	beq.n	6ec <uart_cb+0x10>
     6e4:	2a05      	cmp	r2, #5
     6e6:	d010      	beq.n	70a <uart_cb+0x2e>
}
     6e8:	bc10      	pop	{r4}
     6ea:	4770      	bx	lr
        if(evt->data.rx.len > 0){
     6ec:	68cb      	ldr	r3, [r1, #12]
     6ee:	2b00      	cmp	r3, #0
     6f0:	d0fa      	beq.n	6e8 <uart_cb+0xc>
            if(evt->data.rx.buf[evt->data.rx.offset] == '\r') { // espera que seja primido enter
     6f2:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
     6f6:	5cd0      	ldrb	r0, [r2, r3]
     6f8:	280d      	cmp	r0, #13
     6fa:	d103      	bne.n	704 <uart_cb+0x28>
                cmd = 1; // identifica que foi inserido um comando
     6fc:	4b07      	ldr	r3, [pc, #28]	; (71c <uart_cb+0x40>)
     6fe:	2201      	movs	r2, #1
     700:	601a      	str	r2, [r3, #0]
                break;
     702:	e7f1      	b.n	6e8 <uart_cb+0xc>
}
     704:	bc10      	pop	{r4}
            res = CmdChar(evt->data.rx.buf[evt->data.rx.offset]);
     706:	f7ff bfd7 	b.w	6b8 <CmdChar>
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
     70a:	6883      	ldr	r3, [r0, #8]
     70c:	4904      	ldr	r1, [pc, #16]	; (720 <uart_cb+0x44>)
     70e:	68dc      	ldr	r4, [r3, #12]
     710:	220a      	movs	r2, #10
     712:	46a4      	mov	ip, r4
     714:	2364      	movs	r3, #100	; 0x64
}
     716:	bc10      	pop	{r4}
     718:	4760      	bx	ip
     71a:	bf00      	nop
     71c:	20000768 	.word	0x20000768
     720:	2000108c 	.word	0x2000108c

00000724 <resetcmd>:
	cmdLen = 0;
     724:	4b04      	ldr	r3, [pc, #16]	; (738 <resetcmd+0x14>)
     726:	2200      	movs	r2, #0
     728:	701a      	strb	r2, [r3, #0]
	SOF_C = -1;
     72a:	4a04      	ldr	r2, [pc, #16]	; (73c <resetcmd+0x18>)
     72c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     730:	6013      	str	r3, [r2, #0]
	EOF_C = -1;		
     732:	4a03      	ldr	r2, [pc, #12]	; (740 <resetcmd+0x1c>)
     734:	6013      	str	r3, [r2, #0]
}
     736:	4770      	bx	lr
     738:	20001080 	.word	0x20001080
     73c:	20000004 	.word	0x20000004
     740:	20000000 	.word	0x20000000

00000744 <cmdProcess>:
int cmdProcess(void){
     744:	b570      	push	{r4, r5, r6, lr}
	for(i=0;i<cmdLen;i++){
     746:	4b60      	ldr	r3, [pc, #384]	; (8c8 <CONFIG_ISR_STACK_SIZE+0xc8>)
     748:	4a60      	ldr	r2, [pc, #384]	; (8cc <CONFIG_ISR_STACK_SIZE+0xcc>)
     74a:	781c      	ldrb	r4, [r3, #0]
     74c:	4610      	mov	r0, r2
     74e:	2300      	movs	r3, #0
     750:	4611      	mov	r1, r2
     752:	429c      	cmp	r4, r3
     754:	dd05      	ble.n	762 <cmdProcess+0x1e>
		if(cmdString[i] == '#'){
     756:	f810 5b01 	ldrb.w	r5, [r0], #1
     75a:	2d23      	cmp	r5, #35	; 0x23
     75c:	d117      	bne.n	78e <cmdProcess+0x4a>
			SOF_C = i;
     75e:	485c      	ldr	r0, [pc, #368]	; (8d0 <CONFIG_ISR_STACK_SIZE+0xd0>)
     760:	6003      	str	r3, [r0, #0]
	for(i=0;i<cmdLen;i++){
     762:	2300      	movs	r3, #0
     764:	429c      	cmp	r4, r3
     766:	dd05      	ble.n	774 <cmdProcess+0x30>
		if(cmdString[i] == '!'){
     768:	f812 0b01 	ldrb.w	r0, [r2], #1
     76c:	2821      	cmp	r0, #33	; 0x21
     76e:	d110      	bne.n	792 <cmdProcess+0x4e>
			EOF_C = i;
     770:	4a58      	ldr	r2, [pc, #352]	; (8d4 <CONFIG_ISR_STACK_SIZE+0xd4>)
     772:	6013      	str	r3, [r2, #0]
	if(EOF_C < SOF_C){
     774:	4857      	ldr	r0, [pc, #348]	; (8d4 <CONFIG_ISR_STACK_SIZE+0xd4>)
     776:	4d56      	ldr	r5, [pc, #344]	; (8d0 <CONFIG_ISR_STACK_SIZE+0xd0>)
     778:	6802      	ldr	r2, [r0, #0]
     77a:	682b      	ldr	r3, [r5, #0]
     77c:	429a      	cmp	r2, r3
     77e:	da0a      	bge.n	796 <cmdProcess+0x52>
		SOF_C = -1;
     780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     784:	602b      	str	r3, [r5, #0]
		EOF_C = -1;
     786:	6003      	str	r3, [r0, #0]
			return WRONG_STR_FORMAT;
     788:	f06f 0002 	mvn.w	r0, #2
     78c:	e097      	b.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
	for(i=0;i<cmdLen;i++){
     78e:	3301      	adds	r3, #1
     790:	e7df      	b.n	752 <cmdProcess+0xe>
	for(i=0;i<cmdLen;i++){
     792:	3301      	adds	r3, #1
     794:	e7e6      	b.n	764 <cmdProcess+0x20>
	for(i=SOF_C+1;i<EOF_C;i++){
     796:	1c5d      	adds	r5, r3, #1
     798:	4628      	mov	r0, r5
     79a:	4282      	cmp	r2, r0
     79c:	dc31      	bgt.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
	if(SOF_C == -1){
     79e:	1c5e      	adds	r6, r3, #1
     7a0:	d0f2      	beq.n	788 <cmdProcess+0x44>
	if(EOF_C == -1){
     7a2:	1c50      	adds	r0, r2, #1
     7a4:	d0f0      	beq.n	788 <cmdProcess+0x44>
	if(cmdLen == 0) {
     7a6:	2c00      	cmp	r4, #0
     7a8:	f000 8087 	beq.w	8ba <CONFIG_ISR_STACK_SIZE+0xba>
	if(cmdString[SOF_C+1] == 'T' || cmdString[SOF_C+1] == 't'){
     7ac:	5d48      	ldrb	r0, [r1, r5]
     7ae:	f000 00df 	and.w	r0, r0, #223	; 0xdf
     7b2:	2854      	cmp	r0, #84	; 0x54
     7b4:	d164      	bne.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
		if(cmdLen<8){
     7b6:	2c07      	cmp	r4, #7
     7b8:	d9e6      	bls.n	788 <cmdProcess+0x44>
		for(i = SOF_C+3;i<EOF_C;i++){
     7ba:	1cd8      	adds	r0, r3, #3
     7bc:	4604      	mov	r4, r0
     7be:	42a2      	cmp	r2, r4
     7c0:	dc24      	bgt.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		if(cmdString[SOF_C+2] == 'L' || cmdString[SOF_C+2] == 'l'){
     7c2:	440b      	add	r3, r1
     7c4:	789c      	ldrb	r4, [r3, #2]
     7c6:	f004 04df 	and.w	r4, r4, #223	; 0xdf
     7ca:	2c4c      	cmp	r4, #76	; 0x4c
     7cc:	d124      	bne.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
			if( (EOF_C - (SOF_C+3)) == 4){
     7ce:	1a12      	subs	r2, r2, r0
     7d0:	2a04      	cmp	r2, #4
     7d2:	d175      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
				thread_led_period = (cmdString[SOF_C+3]-'0')*1000+(cmdString[SOF_C+4]-'0')*100+(cmdString[SOF_C+5]-'0')*10+(cmdString[SOF_C+6]-'0')*1;
     7d4:	791a      	ldrb	r2, [r3, #4]
     7d6:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
     7da:	5c0a      	ldrb	r2, [r1, r0]
     7dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     7e0:	3a30      	subs	r2, #48	; 0x30
     7e2:	434a      	muls	r2, r1
     7e4:	2164      	movs	r1, #100	; 0x64
     7e6:	fb01 2204 	mla	r2, r1, r4, r2
     7ea:	7959      	ldrb	r1, [r3, #5]
     7ec:	799b      	ldrb	r3, [r3, #6]
     7ee:	3930      	subs	r1, #48	; 0x30
     7f0:	200a      	movs	r0, #10
     7f2:	fb00 2201 	mla	r2, r0, r1, r2
     7f6:	3b30      	subs	r3, #48	; 0x30
     7f8:	4413      	add	r3, r2
     7fa:	4a37      	ldr	r2, [pc, #220]	; (8d8 <CONFIG_ISR_STACK_SIZE+0xd8>)
				thread_but_period = (cmdString[SOF_C+3]-'0')*1000+(cmdString[SOF_C+4]-'0')*100+(cmdString[SOF_C+5]-'0')*10+(cmdString[SOF_C+6]-'0')*1;
     7fc:	6013      	str	r3, [r2, #0]
		return EXIT_SUCCESS;
     7fe:	2000      	movs	r0, #0
     800:	e05d      	b.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
		if(cmdString[i] == '#'){
     802:	5c0e      	ldrb	r6, [r1, r0]
     804:	2e23      	cmp	r6, #35	; 0x23
     806:	d0bf      	beq.n	788 <cmdProcess+0x44>
	for(i=SOF_C+1;i<EOF_C;i++){
     808:	3001      	adds	r0, #1
     80a:	e7c6      	b.n	79a <cmdProcess+0x56>
			if(cmdString[i] < '0' || cmdString[i] > '9'){
     80c:	5d0d      	ldrb	r5, [r1, r4]
     80e:	3d30      	subs	r5, #48	; 0x30
     810:	2d09      	cmp	r5, #9
     812:	d855      	bhi.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
		for(i = SOF_C+3;i<EOF_C;i++){
     814:	3401      	adds	r4, #1
     816:	e7d2      	b.n	7be <cmdProcess+0x7a>
		else if(cmdString[SOF_C+2] == 'B' || cmdString[SOF_C+2] == 'b'){
     818:	2c42      	cmp	r4, #66	; 0x42
     81a:	d117      	bne.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
			if( (EOF_C - (SOF_C+3)) == 4){
     81c:	1a12      	subs	r2, r2, r0
     81e:	2a04      	cmp	r2, #4
     820:	d14e      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
				thread_but_period = (cmdString[SOF_C+3]-'0')*1000+(cmdString[SOF_C+4]-'0')*100+(cmdString[SOF_C+5]-'0')*10+(cmdString[SOF_C+6]-'0')*1;
     822:	791a      	ldrb	r2, [r3, #4]
     824:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
     828:	5c0a      	ldrb	r2, [r1, r0]
     82a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     82e:	3a30      	subs	r2, #48	; 0x30
     830:	434a      	muls	r2, r1
     832:	2164      	movs	r1, #100	; 0x64
     834:	fb01 2204 	mla	r2, r1, r4, r2
     838:	7959      	ldrb	r1, [r3, #5]
     83a:	799b      	ldrb	r3, [r3, #6]
     83c:	3930      	subs	r1, #48	; 0x30
     83e:	200a      	movs	r0, #10
     840:	fb00 2201 	mla	r2, r0, r1, r2
     844:	3b30      	subs	r3, #48	; 0x30
     846:	4413      	add	r3, r2
     848:	4a24      	ldr	r2, [pc, #144]	; (8dc <CONFIG_ISR_STACK_SIZE+0xdc>)
     84a:	e7d7      	b.n	7fc <cmdProcess+0xb8>
		else if(cmdString[SOF_C+2] == 'T' || cmdString[SOF_C+2] == 't'){
     84c:	2c54      	cmp	r4, #84	; 0x54
     84e:	d1d6      	bne.n	7fe <cmdProcess+0xba>
			if( (EOF_C - (SOF_C+3)) == 4){
     850:	1a12      	subs	r2, r2, r0
     852:	2a04      	cmp	r2, #4
     854:	d134      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
				thread_tempread_period = (cmdString[SOF_C+3]-'0')*1000+(cmdString[SOF_C+4]-'0')*100+(cmdString[SOF_C+5]-'0')*10+(cmdString[SOF_C+6]-'0')*1;
     856:	791a      	ldrb	r2, [r3, #4]
     858:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
     85c:	5c0a      	ldrb	r2, [r1, r0]
     85e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     862:	3a30      	subs	r2, #48	; 0x30
     864:	434a      	muls	r2, r1
     866:	2164      	movs	r1, #100	; 0x64
     868:	fb01 2204 	mla	r2, r1, r4, r2
     86c:	7959      	ldrb	r1, [r3, #5]
     86e:	799b      	ldrb	r3, [r3, #6]
     870:	3930      	subs	r1, #48	; 0x30
     872:	200a      	movs	r0, #10
     874:	fb00 2201 	mla	r2, r0, r1, r2
     878:	3b30      	subs	r3, #48	; 0x30
     87a:	4413      	add	r3, r2
     87c:	4a18      	ldr	r2, [pc, #96]	; (8e0 <CONFIG_ISR_STACK_SIZE+0xe0>)
     87e:	e7bd      	b.n	7fc <cmdProcess+0xb8>
	else if(cmdString[SOF_C+1] == 'L' || cmdString[SOF_C+1] == 'l'){
     880:	284c      	cmp	r0, #76	; 0x4c
     882:	d11d      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
		if((EOF_C - SOF_C) > 4 ){
     884:	1ad2      	subs	r2, r2, r3
     886:	2a04      	cmp	r2, #4
     888:	dc1a      	bgt.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
		else if(cmdString[SOF_C+2] < '0' || cmdString[SOF_C+2] > '3'){
     88a:	440b      	add	r3, r1
     88c:	789a      	ldrb	r2, [r3, #2]
     88e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
     892:	2903      	cmp	r1, #3
     894:	d814      	bhi.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
		else if(cmdString[SOF_C+3] < '0' || cmdString[SOF_C+3] > '1'){
     896:	78db      	ldrb	r3, [r3, #3]
     898:	3b30      	subs	r3, #48	; 0x30
     89a:	b2d9      	uxtb	r1, r3
     89c:	2901      	cmp	r1, #1
     89e:	d80f      	bhi.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
			if(cmdString[SOF_C+2] == '0'){
     8a0:	2a30      	cmp	r2, #48	; 0x30
     8a2:	d101      	bne.n	8a8 <CONFIG_ISR_STACK_SIZE+0xa8>
				led0_state = cmdString[SOF_C+3] - '0';
     8a4:	4a0f      	ldr	r2, [pc, #60]	; (8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
     8a6:	e7a9      	b.n	7fc <cmdProcess+0xb8>
			else if(cmdString[SOF_C+2] == '1'){
     8a8:	2a31      	cmp	r2, #49	; 0x31
     8aa:	d101      	bne.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
				led1_state = cmdString[SOF_C+3] - '0';
     8ac:	4a0e      	ldr	r2, [pc, #56]	; (8e8 <CONFIG_ISR_STACK_SIZE+0xe8>)
     8ae:	e7a5      	b.n	7fc <cmdProcess+0xb8>
			else if(cmdString[SOF_C+2] == '2'){
     8b0:	2a32      	cmp	r2, #50	; 0x32
				led2_state = cmdString[SOF_C+3] - '0';
     8b2:	bf0c      	ite	eq
     8b4:	4a0d      	ldreq	r2, [pc, #52]	; (8ec <CONFIG_ISR_STACK_SIZE+0xec>)
				led3_state = cmdString[SOF_C+3] - '0';
     8b6:	4a0e      	ldrne	r2, [pc, #56]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     8b8:	e7a0      	b.n	7fc <cmdProcess+0xb8>
		return EMPTY_STRING;
     8ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     8be:	bd70      	pop	{r4, r5, r6, pc}
				return CMD_NOT_FOUND;
     8c0:	f06f 0001 	mvn.w	r0, #1
	return WRONG_STR_FORMAT;
     8c4:	e7fb      	b.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
     8c6:	bf00      	nop
     8c8:	20001080 	.word	0x20001080
     8cc:	20001081 	.word	0x20001081
     8d0:	20000004 	.word	0x20000004
     8d4:	20000000 	.word	0x20000000
     8d8:	20000018 	.word	0x20000018
     8dc:	20000014 	.word	0x20000014
     8e0:	2000001c 	.word	0x2000001c
     8e4:	20000008 	.word	0x20000008
     8e8:	2000000c 	.word	0x2000000c
     8ec:	2000076c 	.word	0x2000076c
     8f0:	20000770 	.word	0x20000770

000008f4 <thread_cmd_code>:
 * e verificar se mesmo a estrutura do comando esteja correta mas um dos char inserido nao for o esperado identifica 
 * como comando invalido
 * Esta thread é periodica e o seu periodo é estatico
 * 
*/
void thread_cmd_code(void *argA , void *argB, void *argC){
     8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Timing variables to control task periodicity */
    int64_t fin_time=0, release_time=0;

	printk("Thread tempread init (periodic)\n");
     8f8:	4813      	ldr	r0, [pc, #76]	; (948 <thread_cmd_code+0x54>)
	/* Compute next release instant */
    release_time = k_uptime_get() + thread_cmd_period;

	while(1){
		
		if(cmd){
     8fa:	4e14      	ldr	r6, [pc, #80]	; (94c <thread_cmd_code+0x58>)
			res = cmdProcess();
     8fc:	4f14      	ldr	r7, [pc, #80]	; (950 <thread_cmd_code+0x5c>)
	printk("Thread tempread init (periodic)\n");
     8fe:	f005 fc3e 	bl	617e <printk>
    release_time = k_uptime_get() + thread_cmd_period;
     902:	f005 fbeb 	bl	60dc <k_uptime_get>
     906:	f510 747a 	adds.w	r4, r0, #1000	; 0x3e8
     90a:	f141 0500 	adc.w	r5, r1, #0
			printk("\n\rcmdProcess output: %d\n\r", res);
     90e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 954 <thread_cmd_code+0x60>
		if(cmd){
     912:	6833      	ldr	r3, [r6, #0]
     914:	b153      	cbz	r3, 92c <thread_cmd_code+0x38>
			res = cmdProcess();
     916:	f7ff ff15 	bl	744 <cmdProcess>
     91a:	6038      	str	r0, [r7, #0]
			printk("\n\rcmdProcess output: %d\n\r", res);
     91c:	6839      	ldr	r1, [r7, #0]
     91e:	4640      	mov	r0, r8
     920:	f005 fc2d 	bl	617e <printk>
			resetcmd();
     924:	f7ff fefe 	bl	724 <resetcmd>
			cmd=0;
     928:	2300      	movs	r3, #0
     92a:	6033      	str	r3, [r6, #0]
		}

		/* Wait for next release instant */ 
        fin_time = k_uptime_get();
     92c:	f005 fbd6 	bl	60dc <k_uptime_get>
        if( fin_time < release_time) {
     930:	42a0      	cmp	r0, r4
     932:	eb71 0305 	sbcs.w	r3, r1, r5
     936:	daec      	bge.n	912 <thread_cmd_code+0x1e>
            k_msleep(release_time - fin_time); /* There are other variants, k_sleep(), k_usleep(), ... */
     938:	1a20      	subs	r0, r4, r0
     93a:	f005 fbed 	bl	6118 <k_msleep.isra.0>
            release_time += thread_cmd_period;
     93e:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     942:	f145 0500 	adc.w	r5, r5, #0
     946:	e7e2      	b.n	90e <thread_cmd_code+0x1a>
     948:	000078f4 	.word	0x000078f4
     94c:	20000768 	.word	0x20000768
     950:	20000010 	.word	0x20000010
     954:	000079a4 	.word	0x000079a4

00000958 <in_out_puts_config>:
/** \brief Configuraçao dos butoes
 * 
 *
 * 
*/
void in_out_puts_config(void){
     958:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
     95c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; a04 <in_out_puts_config+0xac>
     960:	4d29      	ldr	r5, [pc, #164]	; (a08 <in_out_puts_config+0xb0>)
     962:	f8db 6008 	ldr.w	r6, [fp, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     966:	f8df 80a4 	ldr.w	r8, [pc, #164]	; a0c <in_out_puts_config+0xb4>
	
	/* configurar butoes da placa */
	//uint32_t pinmask = 0; /* Mask for setting the pins that shall generate interrupts */
	for(int i=0; i<sizeof(buttons_pins); i++) {
     96a:	2400      	movs	r4, #0
		ret = gpio_pin_configure(gpio0_dev, buttons_pins[i], GPIO_INPUT | GPIO_PULL_UP);
     96c:	f815 9b01 	ldrb.w	r9, [r5], #1
	struct gpio_driver_data *data =
     970:	f8db 1010 	ldr.w	r1, [fp, #16]
	return api->pin_configure(port, pin, flags);
     974:	4823      	ldr	r0, [pc, #140]	; (a04 <in_out_puts_config+0xac>)
     976:	4f26      	ldr	r7, [pc, #152]	; (a10 <in_out_puts_config+0xb8>)
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     978:	2301      	movs	r3, #1
     97a:	fa03 f209 	lsl.w	r2, r3, r9
     97e:	680b      	ldr	r3, [r1, #0]
     980:	ea23 0302 	bic.w	r3, r3, r2
     984:	600b      	str	r3, [r1, #0]
	return api->pin_configure(port, pin, flags);
     986:	4642      	mov	r2, r8
     988:	6833      	ldr	r3, [r6, #0]
     98a:	4649      	mov	r1, r9
     98c:	4798      	blx	r3
		if (ret < 0) {
			printk("Error: gpio_pin_configure failed for button %d/pin %d, error:%d\n\r", i+1,buttons_pins[i], ret);
     98e:	3401      	adds	r4, #1
		if (ret < 0) {
     990:	2800      	cmp	r0, #0
     992:	4603      	mov	r3, r0
		ret = gpio_pin_configure(gpio0_dev, buttons_pins[i], GPIO_INPUT | GPIO_PULL_UP);
     994:	6038      	str	r0, [r7, #0]
			printk("Error: gpio_pin_configure failed for button %d/pin %d, error:%d\n\r", i+1,buttons_pins[i], ret);
     996:	464a      	mov	r2, r9
     998:	4621      	mov	r1, r4
		if (ret < 0) {
     99a:	da05      	bge.n	9a8 <in_out_puts_config+0x50>

	/* configurar leds da placa */
	for(int i=0; i<sizeof(leds_pins); i++) {
		ret = gpio_pin_configure(gpio0_dev, leds_pins[i], GPIO_OUTPUT);
		if (ret < 0) {
			printk("Error: gpio_pin_configure failed for button %d/pin %d, error:%d\n\r", i+1,leds_pins[i], ret);
     99c:	481d      	ldr	r0, [pc, #116]	; (a14 <in_out_puts_config+0xbc>)
		} else {
			printk("Success: gpio_pin_configure for button %d/pin %d\n\r", i+1,leds_pins[i]);
		}
	}

     99e:	b001      	add	sp, #4
     9a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			printk("Error: gpio_pin_configure failed for button %d/pin %d, error:%d\n\r", i+1,leds_pins[i], ret);
     9a4:	f005 bbeb 	b.w	617e <printk>
			printk("Success: gpio_pin_configure for button %d/pin %d\n\r", i+1,buttons_pins[i]);
     9a8:	481b      	ldr	r0, [pc, #108]	; (a18 <in_out_puts_config+0xc0>)
     9aa:	f005 fbe8 	bl	617e <printk>
	for(int i=0; i<sizeof(buttons_pins); i++) {
     9ae:	2c04      	cmp	r4, #4
     9b0:	d1dc      	bne.n	96c <in_out_puts_config+0x14>
     9b2:	4e1a      	ldr	r6, [pc, #104]	; (a1c <in_out_puts_config+0xc4>)
	const struct gpio_driver_api *api =
     9b4:	f8db 9008 	ldr.w	r9, [fp, #8]
	return api->pin_configure(port, pin, flags);
     9b8:	f8df a048 	ldr.w	sl, [pc, #72]	; a04 <in_out_puts_config+0xac>
			printk("Success: gpio_pin_configure for button %d/pin %d\n\r", i+1,leds_pins[i]);
     9bc:	f8df 8058 	ldr.w	r8, [pc, #88]	; a18 <in_out_puts_config+0xc0>
	for(int i=0; i<sizeof(leds_pins); i++) {
     9c0:	2400      	movs	r4, #0
		ret = gpio_pin_configure(gpio0_dev, leds_pins[i], GPIO_OUTPUT);
     9c2:	f816 5b01 	ldrb.w	r5, [r6], #1
	struct gpio_driver_data *data =
     9c6:	f8db 1010 	ldr.w	r1, [fp, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     9ca:	2301      	movs	r3, #1
     9cc:	fa03 f205 	lsl.w	r2, r3, r5
     9d0:	680b      	ldr	r3, [r1, #0]
     9d2:	ea23 0302 	bic.w	r3, r3, r2
     9d6:	600b      	str	r3, [r1, #0]
	return api->pin_configure(port, pin, flags);
     9d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     9dc:	f8d9 3000 	ldr.w	r3, [r9]
     9e0:	4629      	mov	r1, r5
     9e2:	4650      	mov	r0, sl
     9e4:	4798      	blx	r3
			printk("Error: gpio_pin_configure failed for button %d/pin %d, error:%d\n\r", i+1,leds_pins[i], ret);
     9e6:	3401      	adds	r4, #1
		if (ret < 0) {
     9e8:	2800      	cmp	r0, #0
     9ea:	4603      	mov	r3, r0
		ret = gpio_pin_configure(gpio0_dev, leds_pins[i], GPIO_OUTPUT);
     9ec:	6038      	str	r0, [r7, #0]
			printk("Error: gpio_pin_configure failed for button %d/pin %d, error:%d\n\r", i+1,leds_pins[i], ret);
     9ee:	462a      	mov	r2, r5
     9f0:	4621      	mov	r1, r4
		if (ret < 0) {
     9f2:	dbd3      	blt.n	99c <in_out_puts_config+0x44>
			printk("Success: gpio_pin_configure for button %d/pin %d\n\r", i+1,leds_pins[i]);
     9f4:	4640      	mov	r0, r8
     9f6:	f005 fbc2 	bl	617e <printk>
	for(int i=0; i<sizeof(leds_pins); i++) {
     9fa:	2c04      	cmp	r4, #4
     9fc:	d1e1      	bne.n	9c2 <in_out_puts_config+0x6a>
     9fe:	b001      	add	sp, #4
     a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a04:	00007454 	.word	0x00007454
     a08:	00007ab3 	.word	0x00007ab3
     a0c:	00010010 	.word	0x00010010
     a10:	20000774 	.word	0x20000774
     a14:	000079be 	.word	0x000079be
     a18:	00007a00 	.word	0x00007a00
     a1c:	00007ab7 	.word	0x00007ab7

00000a20 <main>:
{
     a20:	b5f0      	push	{r4, r5, r6, r7, lr}
     a22:	b08d      	sub	sp, #52	; 0x34
	in_out_puts_config(); // config input and output pins
     a24:	f7ff ff98 	bl	958 <in_out_puts_config>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     a28:	4c5b      	ldr	r4, [pc, #364]	; (b98 <main+0x178>)
     a2a:	4620      	mov	r0, r4
     a2c:	f006 fb09 	bl	7042 <z_device_is_ready>
	printk("I2C bus %s is not ready!\n\r",dev_i2c.bus->name);
     a30:	6821      	ldr	r1, [r4, #0]
	if (!device_is_ready(dev_i2c.bus)) {
     a32:	b928      	cbnz	r0, a40 <main+0x20>
	printk("I2C bus %s is not ready!\n\r",dev_i2c.bus->name);
     a34:	4859      	ldr	r0, [pc, #356]	; (b9c <main+0x17c>)
}
     a36:	b00d      	add	sp, #52	; 0x34
     a38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	printk("I2C bus %s is not ready!\n\r",dev_i2c.bus->name);
     a3c:	f005 bb9f 	b.w	617e <printk>
	ret = i2c_write_dt(&dev_i2c, config, sizeof(config));
     a40:	4e57      	ldr	r6, [pc, #348]	; (ba0 <main+0x180>)
		printk("I2C bus %s is ready!\n\r",dev_i2c.bus->name);
     a42:	4858      	ldr	r0, [pc, #352]	; (ba4 <main+0x184>)
     a44:	f005 fb9b 	bl	617e <printk>
	ret = i2c_write_dt(&dev_i2c, config, sizeof(config));
     a48:	7833      	ldrb	r3, [r6, #0]
     a4a:	9309      	str	r3, [sp, #36]	; 0x24
	msg.len = num_bytes;
     a4c:	2701      	movs	r7, #1
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     a4e:	2302      	movs	r3, #2
	msg.len = num_bytes;
     a50:	970a      	str	r7, [sp, #40]	; 0x28
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     a52:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     a56:	68a3      	ldr	r3, [r4, #8]
     a58:	4620      	mov	r0, r4
     a5a:	689d      	ldr	r5, [r3, #8]
     a5c:	463a      	mov	r2, r7
     a5e:	234d      	movs	r3, #77	; 0x4d
     a60:	a909      	add	r1, sp, #36	; 0x24
     a62:	47a8      	blx	r5
     a64:	4d50      	ldr	r5, [pc, #320]	; (ba8 <main+0x188>)
     a66:	4604      	mov	r4, r0
     a68:	6028      	str	r0, [r5, #0]
	if(ret != 0){
     a6a:	b138      	cbz	r0, a7c <main+0x5c>
		printk("Failed to write to I2C device address %x at Reg. %x \n", dev_i2c.addr,config);
     a6c:	7832      	ldrb	r2, [r6, #0]
     a6e:	484f      	ldr	r0, [pc, #316]	; (bac <main+0x18c>)
     a70:	214d      	movs	r1, #77	; 0x4d
}
     a72:	b00d      	add	sp, #52	; 0x34
     a74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		printk("Failed to write to I2C device address %x at Reg. %x \n", dev_i2c.addr,config);
     a78:	f005 bb81 	b.w	617e <printk>
    if (!device_is_ready(uart)) {
     a7c:	4e4c      	ldr	r6, [pc, #304]	; (bb0 <main+0x190>)
     a7e:	6830      	ldr	r0, [r6, #0]
     a80:	f006 fadf 	bl	7042 <z_device_is_ready>
     a84:	b928      	cbnz	r0, a92 <main+0x72>
        printk("UART device not ready\r\n");
     a86:	484b      	ldr	r0, [pc, #300]	; (bb4 <main+0x194>)
}
     a88:	b00d      	add	sp, #52	; 0x34
     a8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        printk("UART device not ready\r\n");
     a8e:	f005 bb76 	b.w	617e <printk>
	ret = uart_callback_set(uart, uart_cb, NULL);
     a92:	6830      	ldr	r0, [r6, #0]
	if (api->callback_set == NULL) {
     a94:	6883      	ldr	r3, [r0, #8]
     a96:	681b      	ldr	r3, [r3, #0]
     a98:	b923      	cbnz	r3, aa4 <main+0x84>
     a9a:	f06f 0357 	mvn.w	r3, #87	; 0x57
     a9e:	602b      	str	r3, [r5, #0]
}
     aa0:	b00d      	add	sp, #52	; 0x34
     aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->callback_set(dev, callback, user_data);
     aa4:	4944      	ldr	r1, [pc, #272]	; (bb8 <main+0x198>)
     aa6:	4622      	mov	r2, r4
     aa8:	4798      	blx	r3
	ret = uart_callback_set(uart, uart_cb, NULL);
     aaa:	6028      	str	r0, [r5, #0]
    if (ret) {
     aac:	2800      	cmp	r0, #0
     aae:	d1f7      	bne.n	aa0 <main+0x80>
	ret = uart_tx(uart, tx_buf, sizeof(tx_buf), SYS_FOREVER_MS);
     ab0:	6830      	ldr	r0, [r6, #0]
	return api->tx(dev, buf, len, timeout);
     ab2:	6883      	ldr	r3, [r0, #8]
     ab4:	4941      	ldr	r1, [pc, #260]	; (bbc <main+0x19c>)
     ab6:	685c      	ldr	r4, [r3, #4]
     ab8:	463a      	mov	r2, r7
     aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     abe:	47a0      	blx	r4
     ac0:	6028      	str	r0, [r5, #0]
    if (ret) {
     ac2:	2800      	cmp	r0, #0
     ac4:	d1ec      	bne.n	aa0 <main+0x80>
	ret = uart_rx_enable(uart ,rx_buf,sizeof rx_buf,Receive_Timeout);
     ac6:	6830      	ldr	r0, [r6, #0]
	return api->rx_enable(dev, buf, len, timeout);
     ac8:	6883      	ldr	r3, [r0, #8]
     aca:	493d      	ldr	r1, [pc, #244]	; (bc0 <main+0x1a0>)
     acc:	68dc      	ldr	r4, [r3, #12]
     ace:	220a      	movs	r2, #10
     ad0:	2364      	movs	r3, #100	; 0x64
     ad2:	47a0      	blx	r4
     ad4:	4604      	mov	r4, r0
     ad6:	6028      	str	r0, [r5, #0]
	if (ret) {
     ad8:	2800      	cmp	r0, #0
     ada:	d1e1      	bne.n	aa0 <main+0x80>
	timing_init();
     adc:	f001 fe5e 	bl	279c <timing_init>
	timing_start();
     ae0:	2600      	movs	r6, #0
     ae2:	f001 fe67 	bl	27b4 <timing_start>
	thread_tempread_tid = k_thread_create(&thread_tempread_data, thread_tempread_stack,
     ae6:	2700      	movs	r7, #0
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     ae8:	2503      	movs	r5, #3
     aea:	e9cd 6706 	strd	r6, r7, [sp, #24]
     aee:	e9cd 4502 	strd	r4, r5, [sp, #8]
     af2:	e9cd 4400 	strd	r4, r4, [sp]
     af6:	4b33      	ldr	r3, [pc, #204]	; (bc4 <main+0x1a4>)
     af8:	4933      	ldr	r1, [pc, #204]	; (bc8 <main+0x1a8>)
     afa:	9404      	str	r4, [sp, #16]
     afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
     b00:	4832      	ldr	r0, [pc, #200]	; (bcc <main+0x1ac>)
     b02:	f004 fa19 	bl	4f38 <z_impl_k_thread_create>
     b06:	4b32      	ldr	r3, [pc, #200]	; (bd0 <main+0x1b0>)
     b08:	6018      	str	r0, [r3, #0]
     b0a:	4b32      	ldr	r3, [pc, #200]	; (bd4 <main+0x1b4>)
     b0c:	4932      	ldr	r1, [pc, #200]	; (bd8 <main+0x1b8>)
     b0e:	9400      	str	r4, [sp, #0]
     b10:	e9cd 6706 	strd	r6, r7, [sp, #24]
     b14:	e9cd 5403 	strd	r5, r4, [sp, #12]
     b18:	e9cd 4401 	strd	r4, r4, [sp, #4]
     b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
     b20:	482e      	ldr	r0, [pc, #184]	; (bdc <main+0x1bc>)
     b22:	f004 fa09 	bl	4f38 <z_impl_k_thread_create>
	thread_print_tid = k_thread_create(&thread_print_data, thread_print_stack,
     b26:	4b2e      	ldr	r3, [pc, #184]	; (be0 <main+0x1c0>)
     b28:	6018      	str	r0, [r3, #0]
     b2a:	4b2e      	ldr	r3, [pc, #184]	; (be4 <main+0x1c4>)
     b2c:	492e      	ldr	r1, [pc, #184]	; (be8 <main+0x1c8>)
     b2e:	9400      	str	r4, [sp, #0]
     b30:	e9cd 6706 	strd	r6, r7, [sp, #24]
     b34:	e9cd 5403 	strd	r5, r4, [sp, #12]
     b38:	e9cd 4401 	strd	r4, r4, [sp, #4]
     b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
     b40:	482a      	ldr	r0, [pc, #168]	; (bec <main+0x1cc>)
     b42:	f004 f9f9 	bl	4f38 <z_impl_k_thread_create>
	thread_but_tid = k_thread_create(&thread_but_data, thread_but_stack,
     b46:	4b2a      	ldr	r3, [pc, #168]	; (bf0 <main+0x1d0>)
     b48:	6018      	str	r0, [r3, #0]
     b4a:	4b2a      	ldr	r3, [pc, #168]	; (bf4 <main+0x1d4>)
     b4c:	492a      	ldr	r1, [pc, #168]	; (bf8 <main+0x1d8>)
     b4e:	9400      	str	r4, [sp, #0]
     b50:	e9cd 6706 	strd	r6, r7, [sp, #24]
     b54:	e9cd 5403 	strd	r5, r4, [sp, #12]
     b58:	e9cd 4401 	strd	r4, r4, [sp, #4]
     b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
     b60:	4826      	ldr	r0, [pc, #152]	; (bfc <main+0x1dc>)
     b62:	f004 f9e9 	bl	4f38 <z_impl_k_thread_create>
	thread_led_tid = k_thread_create(&thread_led_data, thread_led_stack,
     b66:	4b26      	ldr	r3, [pc, #152]	; (c00 <main+0x1e0>)
     b68:	6018      	str	r0, [r3, #0]
     b6a:	2304      	movs	r3, #4
     b6c:	e9cd 4302 	strd	r4, r3, [sp, #8]
     b70:	e9cd 6706 	strd	r6, r7, [sp, #24]
     b74:	e9cd 4400 	strd	r4, r4, [sp]
     b78:	4b22      	ldr	r3, [pc, #136]	; (c04 <main+0x1e4>)
     b7a:	4923      	ldr	r1, [pc, #140]	; (c08 <main+0x1e8>)
     b7c:	9404      	str	r4, [sp, #16]
     b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     b82:	4822      	ldr	r0, [pc, #136]	; (c0c <main+0x1ec>)
     b84:	f004 f9d8 	bl	4f38 <z_impl_k_thread_create>
	thread_cmd_tid = k_thread_create(&thread_cmd_data, thread_cmd_stack,
     b88:	4b21      	ldr	r3, [pc, #132]	; (c10 <main+0x1f0>)
     b8a:	6018      	str	r0, [r3, #0]
}
     b8c:	b00d      	add	sp, #52	; 0x34
     b8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	resetcmd();	
     b92:	f7ff bdc7 	b.w	724 <resetcmd>
     b96:	bf00      	nop
     b98:	000074b4 	.word	0x000074b4
     b9c:	00007a33 	.word	0x00007a33
     ba0:	2000108b 	.word	0x2000108b
     ba4:	00007a4e 	.word	0x00007a4e
     ba8:	20000774 	.word	0x20000774
     bac:	00007a65 	.word	0x00007a65
     bb0:	20000020 	.word	0x20000020
     bb4:	00007a9b 	.word	0x00007a9b
     bb8:	000006dd 	.word	0x000006dd
     bbc:	20001096 	.word	0x20001096
     bc0:	2000108c 	.word	0x2000108c
     bc4:	0000061d 	.word	0x0000061d
     bc8:	200014c0 	.word	0x200014c0
     bcc:	20000400 	.word	0x20000400
     bd0:	2000078c 	.word	0x2000078c
     bd4:	000004f5 	.word	0x000004f5
     bd8:	200018e0 	.word	0x200018e0
     bdc:	20000380 	.word	0x20000380
     be0:	20000788 	.word	0x20000788
     be4:	00000469 	.word	0x00000469
     be8:	20001d00 	.word	0x20001d00
     bec:	20000200 	.word	0x20000200
     bf0:	2000077c 	.word	0x2000077c
     bf4:	000003dd 	.word	0x000003dd
     bf8:	20002120 	.word	0x20002120
     bfc:	20000300 	.word	0x20000300
     c00:	20000784 	.word	0x20000784
     c04:	000008f5 	.word	0x000008f5
     c08:	20002540 	.word	0x20002540
     c0c:	20000280 	.word	0x20000280
     c10:	20000780 	.word	0x20000780

00000c14 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c14:	680b      	ldr	r3, [r1, #0]
     c16:	3301      	adds	r3, #1
     c18:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c1a:	4b01      	ldr	r3, [pc, #4]	; (c20 <char_out+0xc>)
     c1c:	681b      	ldr	r3, [r3, #0]
     c1e:	4718      	bx	r3
     c20:	20000024 	.word	0x20000024

00000c24 <__printk_hook_install>:
	_char_out = fn;
     c24:	4b01      	ldr	r3, [pc, #4]	; (c2c <__printk_hook_install+0x8>)
     c26:	6018      	str	r0, [r3, #0]
}
     c28:	4770      	bx	lr
     c2a:	bf00      	nop
     c2c:	20000024 	.word	0x20000024

00000c30 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     c30:	b507      	push	{r0, r1, r2, lr}
     c32:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     c34:	2100      	movs	r1, #0
{
     c36:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     c38:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     c3a:	4803      	ldr	r0, [pc, #12]	; (c48 <vprintk+0x18>)
     c3c:	a901      	add	r1, sp, #4
     c3e:	f000 f8e5 	bl	e0c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     c42:	b003      	add	sp, #12
     c44:	f85d fb04 	ldr.w	pc, [sp], #4
     c48:	00000c15 	.word	0x00000c15

00000c4c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c50:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     c54:	f019 0808 	ands.w	r8, r9, #8
{
     c58:	4604      	mov	r4, r0
     c5a:	4693      	mov	fp, r2
	if (processing) {
     c5c:	d00d      	beq.n	c7a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     c5e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     c60:	bf0c      	ite	eq
     c62:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     c66:	f049 0920 	orrne.w	r9, r9, #32
     c6a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     c6e:	f38b 8811 	msr	BASEPRI, fp
     c72:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     c76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c7a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     c7e:	2902      	cmp	r1, #2
     c80:	d107      	bne.n	c92 <process_event+0x46>
			evt = process_recheck(mgr);
     c82:	4620      	mov	r0, r4
     c84:	f005 fa88 	bl	6198 <process_recheck>
		if (evt == EVT_NOP) {
     c88:	2800      	cmp	r0, #0
     c8a:	d0f0      	beq.n	c6e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     c8c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c8e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     c90:	d14e      	bne.n	d30 <process_event+0xe4>
			res = mgr->last_res;
     c92:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c94:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     c96:	2f00      	cmp	r7, #0
     c98:	da15      	bge.n	cc6 <process_event+0x7a>
		*clients = mgr->clients;
     c9a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c9c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     ca0:	e9c4 8800 	strd	r8, r8, [r4]
     ca4:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     ca8:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     caa:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     cac:	8b21      	ldrh	r1, [r4, #24]
     cae:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     cb2:	45ca      	cmp	sl, r9
     cb4:	d002      	beq.n	cbc <process_event+0x70>
		if (do_monitors
     cb6:	68a3      	ldr	r3, [r4, #8]
     cb8:	2b00      	cmp	r3, #0
     cba:	d15a      	bne.n	d72 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     cbc:	b90d      	cbnz	r5, cc2 <process_event+0x76>
		    || (transit != NULL)) {
     cbe:	2e00      	cmp	r6, #0
     cc0:	d071      	beq.n	da6 <process_event+0x15a>
     cc2:	2300      	movs	r3, #0
     cc4:	e056      	b.n	d74 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     cc6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     cca:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     ccc:	2a01      	cmp	r2, #1
     cce:	d81e      	bhi.n	d0e <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cd0:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     cd4:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     cd6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cd8:	b289      	uxth	r1, r1
     cda:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     cde:	d10a      	bne.n	cf6 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     ce0:	b13d      	cbz	r5, cf2 <process_event+0xa6>
     ce2:	8b63      	ldrh	r3, [r4, #26]
     ce4:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     ce6:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     ce8:	3301      	adds	r3, #1
     cea:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     cec:	2a00      	cmp	r2, #0
     cee:	d1fa      	bne.n	ce6 <process_event+0x9a>
     cf0:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cf2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     cf6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     cf8:	4620      	mov	r0, r4
     cfa:	f005 fa4d 	bl	6198 <process_recheck>
     cfe:	4606      	mov	r6, r0
     d00:	2800      	cmp	r0, #0
     d02:	d0d3      	beq.n	cac <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     d04:	8b23      	ldrh	r3, [r4, #24]
     d06:	f043 0320 	orr.w	r3, r3, #32
     d0a:	8323      	strh	r3, [r4, #24]
     d0c:	e7cd      	b.n	caa <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     d0e:	2b04      	cmp	r3, #4
     d10:	d10c      	bne.n	d2c <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d12:	f021 0107 	bic.w	r1, r1, #7
     d16:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     d18:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     d1a:	4620      	mov	r0, r4
     d1c:	f005 fa3c 	bl	6198 <process_recheck>
     d20:	4605      	mov	r5, r0
     d22:	2800      	cmp	r0, #0
     d24:	d0c1      	beq.n	caa <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     d26:	f041 0120 	orr.w	r1, r1, #32
     d2a:	8321      	strh	r1, [r4, #24]
     d2c:	2500      	movs	r5, #0
     d2e:	e7bc      	b.n	caa <process_event+0x5e>
		} else if (evt == EVT_START) {
     d30:	2803      	cmp	r0, #3
     d32:	d109      	bne.n	d48 <process_event+0xfc>
			transit = mgr->transitions->start;
     d34:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d36:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     d3a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d3c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     d40:	8323      	strh	r3, [r4, #24]
}
     d42:	2500      	movs	r5, #0
		res = 0;
     d44:	462f      	mov	r7, r5
     d46:	e7b1      	b.n	cac <process_event+0x60>
		} else if (evt == EVT_STOP) {
     d48:	2804      	cmp	r0, #4
     d4a:	d106      	bne.n	d5a <process_event+0x10e>
			transit = mgr->transitions->stop;
     d4c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d4e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     d52:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d54:	f043 0304 	orr.w	r3, r3, #4
     d58:	e7f2      	b.n	d40 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     d5a:	2805      	cmp	r0, #5
     d5c:	d106      	bne.n	d6c <process_event+0x120>
			transit = mgr->transitions->reset;
     d5e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d60:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     d64:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d66:	f043 0305 	orr.w	r3, r3, #5
     d6a:	e7e9      	b.n	d40 <process_event+0xf4>
     d6c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     d6e:	462e      	mov	r6, r5
     d70:	e7e8      	b.n	d44 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     d72:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     d74:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     d78:	8321      	strh	r1, [r4, #24]
     d7a:	f38b 8811 	msr	BASEPRI, fp
     d7e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     d82:	b9fb      	cbnz	r3, dc4 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     d84:	bb85      	cbnz	r5, de8 <process_event+0x19c>
			if (transit != NULL) {
     d86:	b116      	cbz	r6, d8e <process_event+0x142>
				transit(mgr, transition_complete);
     d88:	491f      	ldr	r1, [pc, #124]	; (e08 <process_event+0x1bc>)
     d8a:	4620      	mov	r0, r4
     d8c:	47b0      	blx	r6
	__asm__ volatile(
     d8e:	f04f 0320 	mov.w	r3, #32
     d92:	f3ef 8b11 	mrs	fp, BASEPRI
     d96:	f383 8812 	msr	BASEPRI_MAX, r3
     d9a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     d9e:	8b23      	ldrh	r3, [r4, #24]
     da0:	f023 0308 	bic.w	r3, r3, #8
     da4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     da6:	8b23      	ldrh	r3, [r4, #24]
     da8:	06da      	lsls	r2, r3, #27
     daa:	d525      	bpl.n	df8 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     dac:	f023 0310 	bic.w	r3, r3, #16
     db0:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     db2:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     db4:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     db8:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     dbc:	2900      	cmp	r1, #0
     dbe:	f47f af5e 	bne.w	c7e <process_event+0x32>
out:
     dc2:	e754      	b.n	c6e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     dc4:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     dc6:	2900      	cmp	r1, #0
     dc8:	d0dc      	beq.n	d84 <process_event+0x138>
	return node->next;
     dca:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     dce:	f8d1 b004 	ldr.w	fp, [r1, #4]
     dd2:	463b      	mov	r3, r7
     dd4:	4652      	mov	r2, sl
     dd6:	4620      	mov	r0, r4
     dd8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     dda:	f1b9 0f00 	cmp.w	r9, #0
     dde:	d0d1      	beq.n	d84 <process_event+0x138>
     de0:	4649      	mov	r1, r9
     de2:	f8d9 9000 	ldr.w	r9, [r9]
     de6:	e7f2      	b.n	dce <process_event+0x182>
     de8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     dea:	463b      	mov	r3, r7
     dec:	4652      	mov	r2, sl
     dee:	4620      	mov	r0, r4
     df0:	682d      	ldr	r5, [r5, #0]
     df2:	f005 f9ed 	bl	61d0 <notify_one>
     df6:	e7c5      	b.n	d84 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     df8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     dfc:	bf1e      	ittt	ne
     dfe:	f023 0320 	bicne.w	r3, r3, #32
     e02:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     e04:	2102      	movne	r1, #2
     e06:	e7d5      	b.n	db4 <process_event+0x168>
     e08:	000061fd 	.word	0x000061fd

00000e0c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e10:	4681      	mov	r9, r0
     e12:	b09b      	sub	sp, #108	; 0x6c
     e14:	468a      	mov	sl, r1
     e16:	4615      	mov	r5, r2
     e18:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     e1a:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     e1c:	7828      	ldrb	r0, [r5, #0]
     e1e:	b910      	cbnz	r0, e26 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     e20:	4630      	mov	r0, r6
     e22:	f000 bdee 	b.w	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
			OUTC(*fp++);
     e26:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
     e28:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     e2a:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
     e2c:	d006      	beq.n	e3c <cbvprintf+0x30>
			OUTC(*fp++);
     e2e:	4651      	mov	r1, sl
			OUTC('%');
     e30:	47c8      	blx	r9
     e32:	2800      	cmp	r0, #0
     e34:	f2c0 85e5 	blt.w	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
     e38:	3601      	adds	r6, #1
		if (bps == NULL) {
     e3a:	e24c      	b.n	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
		} state = {
     e3c:	2218      	movs	r2, #24
     e3e:	2100      	movs	r1, #0
     e40:	a80c      	add	r0, sp, #48	; 0x30
     e42:	f005 fb24 	bl	648e <memset>
	if (*sp == '%') {
     e46:	786b      	ldrb	r3, [r5, #1]
     e48:	2b25      	cmp	r3, #37	; 0x25
     e4a:	d07c      	beq.n	f46 <cbvprintf+0x13a>
     e4c:	2200      	movs	r2, #0
     e4e:	1c68      	adds	r0, r5, #1
     e50:	4696      	mov	lr, r2
     e52:	4690      	mov	r8, r2
     e54:	4694      	mov	ip, r2
     e56:	4617      	mov	r7, r2
     e58:	4601      	mov	r1, r0
		switch (*sp) {
     e5a:	f810 3b01 	ldrb.w	r3, [r0], #1
     e5e:	2b2b      	cmp	r3, #43	; 0x2b
     e60:	f000 80a0 	beq.w	fa4 <cbvprintf+0x198>
     e64:	f200 8097 	bhi.w	f96 <cbvprintf+0x18a>
     e68:	2b20      	cmp	r3, #32
     e6a:	f000 809e 	beq.w	faa <cbvprintf+0x19e>
     e6e:	2b23      	cmp	r3, #35	; 0x23
     e70:	f000 809e 	beq.w	fb0 <cbvprintf+0x1a4>
     e74:	b12f      	cbz	r7, e82 <cbvprintf+0x76>
     e76:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
     e7a:	f040 0004 	orr.w	r0, r0, #4
     e7e:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
     e82:	f1bc 0f00 	cmp.w	ip, #0
     e86:	d005      	beq.n	e94 <cbvprintf+0x88>
     e88:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
     e8c:	f040 0008 	orr.w	r0, r0, #8
     e90:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
     e94:	f1b8 0f00 	cmp.w	r8, #0
     e98:	d005      	beq.n	ea6 <cbvprintf+0x9a>
     e9a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
     e9e:	f040 0010 	orr.w	r0, r0, #16
     ea2:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
     ea6:	f1be 0f00 	cmp.w	lr, #0
     eaa:	d005      	beq.n	eb8 <cbvprintf+0xac>
     eac:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
     eb0:	f040 0020 	orr.w	r0, r0, #32
     eb4:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
     eb8:	b12a      	cbz	r2, ec6 <cbvprintf+0xba>
     eba:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
     ebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     ec2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
     ec6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
     eca:	f002 0044 	and.w	r0, r2, #68	; 0x44
     ece:	2844      	cmp	r0, #68	; 0x44
     ed0:	d103      	bne.n	eda <cbvprintf+0xce>
		conv->flag_zero = false;
     ed2:	f36f 1286 	bfc	r2, #6, #1
     ed6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
     eda:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
     ede:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     ee0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     ee4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
     ee8:	d17e      	bne.n	fe8 <cbvprintf+0x1dc>
		conv->width_star = true;
     eea:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     eee:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     ef2:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     ef4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
     ef8:	781a      	ldrb	r2, [r3, #0]
     efa:	2a2e      	cmp	r2, #46	; 0x2e
     efc:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     f00:	bf0c      	ite	eq
     f02:	2101      	moveq	r1, #1
     f04:	2100      	movne	r1, #0
     f06:	f361 0241 	bfi	r2, r1, #1, #1
     f0a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
     f0e:	d177      	bne.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
	if (*sp == '*') {
     f10:	785a      	ldrb	r2, [r3, #1]
     f12:	2a2a      	cmp	r2, #42	; 0x2a
     f14:	d06d      	beq.n	ff2 <cbvprintf+0x1e6>
	++sp;
     f16:	3301      	adds	r3, #1
	size_t val = 0;
     f18:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     f1a:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     f1e:	4618      	mov	r0, r3
     f20:	f810 2b01 	ldrb.w	r2, [r0], #1
     f24:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     f28:	2f09      	cmp	r7, #9
     f2a:	f240 80ab 	bls.w	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
	conv->unsupported |= ((conv->prec_value < 0)
     f2e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
     f32:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
     f34:	f3c2 0040 	ubfx	r0, r2, #1, #1
     f38:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     f3c:	f361 0241 	bfi	r2, r1, #1, #1
     f40:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
     f44:	e05c      	b.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
		conv->specifier = *sp++;
     f46:	1caa      	adds	r2, r5, #2
     f48:	9202      	str	r2, [sp, #8]
     f4a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
     f4e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
     f52:	07df      	lsls	r7, r3, #31
     f54:	f140 8173 	bpl.w	123e <CONFIG_FPROTECT_BLOCK_SIZE+0x23e>
			width = va_arg(ap, int);
     f58:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
     f5c:	f1bb 0f00 	cmp.w	fp, #0
     f60:	da07      	bge.n	f72 <cbvprintf+0x166>
				conv->flag_dash = true;
     f62:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
     f66:	f042 0204 	orr.w	r2, r2, #4
     f6a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
     f6e:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
     f72:	0758      	lsls	r0, r3, #29
     f74:	f140 816c 	bpl.w	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
			int arg = va_arg(ap, int);
     f78:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     f7c:	f1b8 0f00 	cmp.w	r8, #0
     f80:	f280 816b 	bge.w	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
				conv->prec_present = false;
     f84:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
     f88:	f36f 0341 	bfc	r3, #1, #1
     f8c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
     f90:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     f94:	e161      	b.n	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
		switch (*sp) {
     f96:	2b2d      	cmp	r3, #45	; 0x2d
     f98:	d00d      	beq.n	fb6 <cbvprintf+0x1aa>
     f9a:	2b30      	cmp	r3, #48	; 0x30
     f9c:	f47f af6a 	bne.w	e74 <cbvprintf+0x68>
			conv->flag_zero = true;
     fa0:	2201      	movs	r2, #1
	} while (loop);
     fa2:	e759      	b.n	e58 <cbvprintf+0x4c>
			conv->flag_plus = true;
     fa4:	f04f 0c01 	mov.w	ip, #1
     fa8:	e756      	b.n	e58 <cbvprintf+0x4c>
			conv->flag_space = true;
     faa:	f04f 0801 	mov.w	r8, #1
     fae:	e753      	b.n	e58 <cbvprintf+0x4c>
			conv->flag_hash = true;
     fb0:	f04f 0e01 	mov.w	lr, #1
     fb4:	e750      	b.n	e58 <cbvprintf+0x4c>
		switch (*sp) {
     fb6:	2701      	movs	r7, #1
     fb8:	e74e      	b.n	e58 <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
     fba:	fb0c 7202 	mla	r2, ip, r2, r7
     fbe:	3a30      	subs	r2, #48	; 0x30
     fc0:	4603      	mov	r3, r0
     fc2:	4618      	mov	r0, r3
     fc4:	f810 7b01 	ldrb.w	r7, [r0], #1
     fc8:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     fcc:	f1be 0f09 	cmp.w	lr, #9
     fd0:	d9f3      	bls.n	fba <cbvprintf+0x1ae>
	if (sp != wp) {
     fd2:	4299      	cmp	r1, r3
     fd4:	d090      	beq.n	ef8 <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
     fd6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
     fda:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
     fdc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     fde:	f362 0141 	bfi	r1, r2, #1, #1
     fe2:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
     fe6:	e787      	b.n	ef8 <cbvprintf+0xec>
     fe8:	460b      	mov	r3, r1
	size_t val = 0;
     fea:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     fec:	f04f 0c0a 	mov.w	ip, #10
     ff0:	e7e7      	b.n	fc2 <cbvprintf+0x1b6>
		conv->prec_star = true;
     ff2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     ff6:	f042 0204 	orr.w	r2, r2, #4
     ffa:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
     ffe:	3302      	adds	r3, #2
	switch (*sp) {
    1000:	4619      	mov	r1, r3
    1002:	f811 2b01 	ldrb.w	r2, [r1], #1
    1006:	2a6c      	cmp	r2, #108	; 0x6c
    1008:	d05c      	beq.n	10c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>
    100a:	d840      	bhi.n	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
    100c:	2a68      	cmp	r2, #104	; 0x68
    100e:	d046      	beq.n	109e <CONFIG_FPROTECT_BLOCK_SIZE+0x9e>
    1010:	2a6a      	cmp	r2, #106	; 0x6a
    1012:	d061      	beq.n	10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>
    1014:	2a4c      	cmp	r2, #76	; 0x4c
    1016:	d067      	beq.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    1018:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    101a:	460b      	mov	r3, r1
    101c:	f813 2b01 	ldrb.w	r2, [r3], #1
    1020:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    1022:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    1024:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    1028:	f200 80df 	bhi.w	11ea <CONFIG_FPROTECT_BLOCK_SIZE+0x1ea>
    102c:	2a57      	cmp	r2, #87	; 0x57
    102e:	d868      	bhi.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
    1030:	2a41      	cmp	r2, #65	; 0x41
    1032:	d004      	beq.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
    1034:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    1038:	2b02      	cmp	r3, #2
    103a:	f200 80d6 	bhi.w	11ea <CONFIG_FPROTECT_BLOCK_SIZE+0x1ea>
		conv->specifier_cat = SPECIFIER_FP;
    103e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    1042:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    1046:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    1048:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    104c:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    1050:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    1054:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    1058:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    105c:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    1060:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    1064:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    1066:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    106a:	b2cb      	uxtb	r3, r1
    106c:	f100 80e5 	bmi.w	123a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
		if (conv->length_mod == LENGTH_L) {
    1070:	f003 0278 	and.w	r2, r3, #120	; 0x78
    1074:	2a18      	cmp	r2, #24
    1076:	f040 80b5 	bne.w	11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>
			conv->length_mod = LENGTH_NONE;
    107a:	f36f 03c6 	bfc	r3, #3, #4
    107e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    1082:	e09c      	b.n	11be <CONFIG_FPROTECT_BLOCK_SIZE+0x1be>
		val = 10U * val + *sp++ - '0';
    1084:	fb0c 2101 	mla	r1, ip, r1, r2
    1088:	3930      	subs	r1, #48	; 0x30
    108a:	4603      	mov	r3, r0
    108c:	e747      	b.n	f1e <cbvprintf+0x112>
	switch (*sp) {
    108e:	2a74      	cmp	r2, #116	; 0x74
    1090:	d026      	beq.n	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
    1092:	2a7a      	cmp	r2, #122	; 0x7a
    1094:	d1c0      	bne.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
		conv->length_mod = LENGTH_Z;
    1096:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    109a:	2206      	movs	r2, #6
    109c:	e00d      	b.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
		if (*++sp == 'h') {
    109e:	785a      	ldrb	r2, [r3, #1]
    10a0:	2a68      	cmp	r2, #104	; 0x68
    10a2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    10a6:	d106      	bne.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
			conv->length_mod = LENGTH_HH;
    10a8:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    10aa:	f361 02c6 	bfi	r2, r1, #3, #4
    10ae:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    10b2:	1c99      	adds	r1, r3, #2
    10b4:	e7b1      	b.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
			conv->length_mod = LENGTH_H;
    10b6:	4613      	mov	r3, r2
    10b8:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    10ba:	f362 03c6 	bfi	r3, r2, #3, #4
    10be:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    10c2:	e7aa      	b.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
		if (*++sp == 'l') {
    10c4:	785a      	ldrb	r2, [r3, #1]
    10c6:	2a6c      	cmp	r2, #108	; 0x6c
    10c8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    10cc:	d101      	bne.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
			conv->length_mod = LENGTH_LL;
    10ce:	2104      	movs	r1, #4
    10d0:	e7eb      	b.n	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
			conv->length_mod = LENGTH_L;
    10d2:	4613      	mov	r3, r2
    10d4:	2203      	movs	r2, #3
    10d6:	e7f0      	b.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
		conv->length_mod = LENGTH_J;
    10d8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    10dc:	2205      	movs	r2, #5
    10de:	e7ec      	b.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
		conv->length_mod = LENGTH_T;
    10e0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    10e4:	2207      	movs	r2, #7
    10e6:	e7e8      	b.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
		conv->unsupported = true;
    10e8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    10ec:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    10f0:	f023 0302 	bic.w	r3, r3, #2
    10f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    10f8:	f043 0302 	orr.w	r3, r3, #2
    10fc:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    1100:	e78b      	b.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
	switch (conv->specifier) {
    1102:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    1106:	2b20      	cmp	r3, #32
    1108:	d86f      	bhi.n	11ea <CONFIG_FPROTECT_BLOCK_SIZE+0x1ea>
    110a:	a101      	add	r1, pc, #4	; (adr r1, 1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    110c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    1110:	000011c3 	.word	0x000011c3
    1114:	000011eb 	.word	0x000011eb
    1118:	000011eb 	.word	0x000011eb
    111c:	000011eb 	.word	0x000011eb
    1120:	000011eb 	.word	0x000011eb
    1124:	000011eb 	.word	0x000011eb
    1128:	000011eb 	.word	0x000011eb
    112c:	000011eb 	.word	0x000011eb
    1130:	000011eb 	.word	0x000011eb
    1134:	0000103f 	.word	0x0000103f
    1138:	000011eb 	.word	0x000011eb
    113c:	000011c3 	.word	0x000011c3
    1140:	00001195 	.word	0x00001195
    1144:	0000103f 	.word	0x0000103f
    1148:	0000103f 	.word	0x0000103f
    114c:	0000103f 	.word	0x0000103f
    1150:	000011eb 	.word	0x000011eb
    1154:	00001195 	.word	0x00001195
    1158:	000011eb 	.word	0x000011eb
    115c:	000011eb 	.word	0x000011eb
    1160:	000011eb 	.word	0x000011eb
    1164:	000011eb 	.word	0x000011eb
    1168:	000011f9 	.word	0x000011f9
    116c:	000011c3 	.word	0x000011c3
    1170:	0000121d 	.word	0x0000121d
    1174:	000011eb 	.word	0x000011eb
    1178:	000011eb 	.word	0x000011eb
    117c:	0000121d 	.word	0x0000121d
    1180:	000011eb 	.word	0x000011eb
    1184:	000011c3 	.word	0x000011c3
    1188:	000011eb 	.word	0x000011eb
    118c:	000011eb 	.word	0x000011eb
    1190:	000011c3 	.word	0x000011c3
		conv->specifier_cat = SPECIFIER_SINT;
    1194:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1198:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    119a:	f361 0302 	bfi	r3, r1, #0, #3
    119e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    11a2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    11a6:	f003 0378 	and.w	r3, r3, #120	; 0x78
    11aa:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    11ac:	bf02      	ittt	eq
    11ae:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    11b2:	f041 0101 	orreq.w	r1, r1, #1
    11b6:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    11ba:	2a63      	cmp	r2, #99	; 0x63
    11bc:	d005      	beq.n	11ca <CONFIG_FPROTECT_BLOCK_SIZE+0x1ca>
	bool unsupported = false;
    11be:	2300      	movs	r3, #0
    11c0:	e006      	b.n	11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
		conv->specifier_cat = SPECIFIER_UINT;
    11c2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    11c6:	2102      	movs	r1, #2
    11c8:	e7e7      	b.n	119a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    11ca:	3b00      	subs	r3, #0
    11cc:	bf18      	it	ne
    11ce:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    11d0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    11d4:	f3c2 0140 	ubfx	r1, r2, #1, #1
    11d8:	430b      	orrs	r3, r1
    11da:	f363 0241 	bfi	r2, r3, #1, #1
    11de:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    11e2:	e6b4      	b.n	f4e <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    11e4:	f013 0f38 	tst.w	r3, #56	; 0x38
    11e8:	d0e9      	beq.n	11be <CONFIG_FPROTECT_BLOCK_SIZE+0x1be>
			conv->invalid = true;
    11ea:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    11ee:	f043 0301 	orr.w	r3, r3, #1
    11f2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    11f6:	e7e2      	b.n	11be <CONFIG_FPROTECT_BLOCK_SIZE+0x1be>
		conv->specifier_cat = SPECIFIER_PTR;
    11f8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    11fc:	2203      	movs	r2, #3
    11fe:	f362 0302 	bfi	r3, r2, #0, #3
    1202:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    1206:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    120a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    120e:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    1212:	f1dc 0300 	rsbs	r3, ip, #0
    1216:	eb43 030c 	adc.w	r3, r3, ip
    121a:	e7d9      	b.n	11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
		conv->specifier_cat = SPECIFIER_PTR;
    121c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1220:	2203      	movs	r2, #3
    1222:	f362 0302 	bfi	r3, r2, #0, #3
    1226:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    122a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    122e:	f013 0f78 	tst.w	r3, #120	; 0x78
    1232:	bf14      	ite	ne
    1234:	2301      	movne	r3, #1
    1236:	2300      	moveq	r3, #0
    1238:	e7ca      	b.n	11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
			unsupported = true;
    123a:	2301      	movs	r3, #1
    123c:	e7c8      	b.n	11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
		} else if (conv->width_present) {
    123e:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    1242:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1244:	bfb4      	ite	lt
    1246:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    124a:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    124e:	e690      	b.n	f72 <cbvprintf+0x166>
		} else if (conv->prec_present) {
    1250:	0799      	lsls	r1, r3, #30
    1252:	f57f ae9d 	bpl.w	f90 <cbvprintf+0x184>
			precision = conv->prec_value;
    1256:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    125a:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    125e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1260:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    1264:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    1268:	f003 0207 	and.w	r2, r3, #7
    126c:	2a04      	cmp	r2, #4
    126e:	d109      	bne.n	1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>
		    && !conv->prec_present) {
    1270:	078a      	lsls	r2, r1, #30
    1272:	d407      	bmi.n	1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>
			if (conv->specifier_a) {
    1274:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    1278:	2a00      	cmp	r2, #0
    127a:	bfb4      	ite	lt
    127c:	f04f 080d 	movlt.w	r8, #13
    1280:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    1284:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1288:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    128a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    128e:	d137      	bne.n	1300 <CONFIG_FPROTECT_BLOCK_SIZE+0x300>
			switch (length_mod) {
    1290:	1ecb      	subs	r3, r1, #3
    1292:	2b04      	cmp	r3, #4
    1294:	d821      	bhi.n	12da <CONFIG_FPROTECT_BLOCK_SIZE+0x2da>
    1296:	e8df f003 	tbb	[pc, r3]
    129a:	0903      	.short	0x0903
    129c:	2009      	.short	0x2009
    129e:	20          	.byte	0x20
    129f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    12a0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    12a4:	17da      	asrs	r2, r3, #31
    12a6:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    12aa:	e006      	b.n	12ba <CONFIG_FPROTECT_BLOCK_SIZE+0x2ba>
					(sint_value_type)va_arg(ap, intmax_t);
    12ac:	3407      	adds	r4, #7
    12ae:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    12b2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    12b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    12ba:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    12be:	07bb      	lsls	r3, r7, #30
    12c0:	d056      	beq.n	1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>
			OUTS(sp, fp);
    12c2:	9b02      	ldr	r3, [sp, #8]
    12c4:	462a      	mov	r2, r5
    12c6:	4651      	mov	r1, sl
    12c8:	4648      	mov	r0, r9
    12ca:	f005 f88f 	bl	63ec <outs>
    12ce:	2800      	cmp	r0, #0
    12d0:	f2c0 8397 	blt.w	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
    12d4:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    12d6:	9d02      	ldr	r5, [sp, #8]
    12d8:	e5a0      	b.n	e1c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    12da:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    12de:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    12e0:	ea4f 72e3 	mov.w	r2, r3, asr #31
    12e4:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    12e8:	d105      	bne.n	12f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f6>
				value->uint = (unsigned char)value->uint;
    12ea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    12ee:	930c      	str	r3, [sp, #48]	; 0x30
    12f0:	2300      	movs	r3, #0
    12f2:	930d      	str	r3, [sp, #52]	; 0x34
    12f4:	e7e1      	b.n	12ba <CONFIG_FPROTECT_BLOCK_SIZE+0x2ba>
			} else if (length_mod == LENGTH_H) {
    12f6:	2902      	cmp	r1, #2
    12f8:	d1df      	bne.n	12ba <CONFIG_FPROTECT_BLOCK_SIZE+0x2ba>
				value->sint = (short)value->sint;
    12fa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    12fe:	e7d1      	b.n	12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1300:	2b02      	cmp	r3, #2
    1302:	d123      	bne.n	134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>
			switch (length_mod) {
    1304:	1ecb      	subs	r3, r1, #3
    1306:	2b04      	cmp	r3, #4
    1308:	d813      	bhi.n	1332 <CONFIG_FPROTECT_BLOCK_SIZE+0x332>
    130a:	e8df f003 	tbb	[pc, r3]
    130e:	0a03      	.short	0x0a03
    1310:	120a      	.short	0x120a
    1312:	12          	.byte	0x12
    1313:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1314:	6822      	ldr	r2, [r4, #0]
    1316:	920c      	str	r2, [sp, #48]	; 0x30
    1318:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    131a:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    131c:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    131e:	4604      	mov	r4, r0
    1320:	e7cb      	b.n	12ba <CONFIG_FPROTECT_BLOCK_SIZE+0x2ba>
					(uint_value_type)va_arg(ap,
    1322:	1de0      	adds	r0, r4, #7
    1324:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    1328:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    132c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    1330:	e7f5      	b.n	131e <CONFIG_FPROTECT_BLOCK_SIZE+0x31e>
					(uint_value_type)va_arg(ap, size_t);
    1332:	f854 3b04 	ldr.w	r3, [r4], #4
    1336:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    1338:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    133a:	f04f 0300 	mov.w	r3, #0
    133e:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    1340:	d0d3      	beq.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
			} else if (length_mod == LENGTH_H) {
    1342:	2902      	cmp	r1, #2
    1344:	d1b9      	bne.n	12ba <CONFIG_FPROTECT_BLOCK_SIZE+0x2ba>
				value->uint = (unsigned short)value->uint;
    1346:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    134a:	e7d0      	b.n	12ee <CONFIG_FPROTECT_BLOCK_SIZE+0x2ee>
		} else if (specifier_cat == SPECIFIER_FP) {
    134c:	2b04      	cmp	r3, #4
    134e:	d109      	bne.n	1364 <CONFIG_FPROTECT_BLOCK_SIZE+0x364>
					(sint_value_type)va_arg(ap, long long);
    1350:	1de3      	adds	r3, r4, #7
    1352:	f023 0307 	bic.w	r3, r3, #7
    1356:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    135a:	e9d3 2300 	ldrd	r2, r3, [r3]
    135e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    1362:	e7aa      	b.n	12ba <CONFIG_FPROTECT_BLOCK_SIZE+0x2ba>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1364:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1366:	bf04      	itt	eq
    1368:	f854 3b04 	ldreq.w	r3, [r4], #4
    136c:	930c      	streq	r3, [sp, #48]	; 0x30
    136e:	e7a4      	b.n	12ba <CONFIG_FPROTECT_BLOCK_SIZE+0x2ba>
		switch (conv->specifier) {
    1370:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    1374:	2a78      	cmp	r2, #120	; 0x78
    1376:	d8ae      	bhi.n	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
    1378:	2a57      	cmp	r2, #87	; 0x57
    137a:	f200 808c 	bhi.w	1496 <CONFIG_FPROTECT_BLOCK_SIZE+0x496>
    137e:	2a25      	cmp	r2, #37	; 0x25
    1380:	f000 80d4 	beq.w	152c <CONFIG_FPROTECT_BLOCK_SIZE+0x52c>
    1384:	2a24      	cmp	r2, #36	; 0x24
    1386:	d9a6      	bls.n	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
    1388:	2a41      	cmp	r2, #65	; 0x41
    138a:	d003      	beq.n	1394 <CONFIG_FPROTECT_BLOCK_SIZE+0x394>
    138c:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    1390:	2b02      	cmp	r3, #2
    1392:	d8a0      	bhi.n	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
	} u = {
    1394:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    1398:	2b00      	cmp	r3, #0
    139a:	f2c0 81be 	blt.w	171a <CONFIG_FPROTECT_BLOCK_SIZE+0x71a>
	} else if (conv->flag_plus) {
    139e:	0738      	lsls	r0, r7, #28
    13a0:	f100 81bd 	bmi.w	171e <CONFIG_FPROTECT_BLOCK_SIZE+0x71e>
		*sign = ' ';
    13a4:	f017 0710 	ands.w	r7, r7, #16
    13a8:	bf18      	it	ne
    13aa:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    13ac:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    13b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    13b4:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    13b8:	2d00      	cmp	r5, #0
    13ba:	f040 81b2 	bne.w	1722 <CONFIG_FPROTECT_BLOCK_SIZE+0x722>
    13be:	ea51 0003 	orrs.w	r0, r1, r3
    13c2:	bf14      	ite	ne
    13c4:	2001      	movne	r0, #1
    13c6:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    13c8:	02db      	lsls	r3, r3, #11
    13ca:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    13ce:	02c9      	lsls	r1, r1, #11
		c = 'f';
    13d0:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    13d2:	ea45 0e01 	orr.w	lr, r5, r1
    13d6:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    13da:	bf08      	it	eq
    13dc:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    13de:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    13e2:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    13e6:	f000 8206 	beq.w	17f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x7f6>
		if (is_subnormal) {
    13ea:	2800      	cmp	r0, #0
    13ec:	f040 81ce 	bne.w	178c <CONFIG_FPROTECT_BLOCK_SIZE+0x78c>
		fract |= BIT_63;
    13f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    13f4:	f04f 0c00 	mov.w	ip, #0
    13f8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    13fc:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    1400:	9109      	str	r1, [sp, #36]	; 0x24
    1402:	4663      	mov	r3, ip
		fract *= 5U;
    1404:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    1408:	f115 0f02 	cmn.w	r5, #2
    140c:	f2c0 81c5 	blt.w	179a <CONFIG_FPROTECT_BLOCK_SIZE+0x79a>
    1410:	f1bc 0f00 	cmp.w	ip, #0
    1414:	d001      	beq.n	141a <CONFIG_FPROTECT_BLOCK_SIZE+0x41a>
    1416:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    141a:	2d00      	cmp	r5, #0
		fract += 2;
    141c:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    1420:	f300 81d0 	bgt.w	17c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x7c4>
	fract >>= (4 - expo);
    1424:	9809      	ldr	r0, [sp, #36]	; 0x24
    1426:	9908      	ldr	r1, [sp, #32]
    1428:	f1c5 0c04 	rsb	ip, r5, #4
    142c:	351c      	adds	r5, #28
    142e:	fa00 f505 	lsl.w	r5, r0, r5
    1432:	f1ac 0e20 	sub.w	lr, ip, #32
    1436:	fa21 f10c 	lsr.w	r1, r1, ip
    143a:	fa20 fe0e 	lsr.w	lr, r0, lr
    143e:	4329      	orrs	r1, r5
    1440:	ea41 010e 	orr.w	r1, r1, lr
    1444:	fa20 f00c 	lsr.w	r0, r0, ip
    1448:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    144c:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    1450:	2947      	cmp	r1, #71	; 0x47
    1452:	f040 81d7 	bne.w	1804 <CONFIG_FPROTECT_BLOCK_SIZE+0x804>
		if (decexp < (-4 + 1) || decexp > precision) {
    1456:	1cdd      	adds	r5, r3, #3
    1458:	db02      	blt.n	1460 <CONFIG_FPROTECT_BLOCK_SIZE+0x460>
    145a:	4598      	cmp	r8, r3
    145c:	f280 81ce 	bge.w	17fc <CONFIG_FPROTECT_BLOCK_SIZE+0x7fc>
			c += 'e' - 'g';  /* e or E */
    1460:	3a02      	subs	r2, #2
			if (precision > 0) {
    1462:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    1466:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    1468:	dd01      	ble.n	146e <CONFIG_FPROTECT_BLOCK_SIZE+0x46e>
				precision--;
    146a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    146e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    1472:	0688      	lsls	r0, r1, #26
    1474:	f100 81c6 	bmi.w	1804 <CONFIG_FPROTECT_BLOCK_SIZE+0x804>
    1478:	f1b8 0f00 	cmp.w	r8, #0
    147c:	bfd4      	ite	le
    147e:	2100      	movle	r1, #0
    1480:	2101      	movgt	r1, #1
	if (c == 'f') {
    1482:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    1484:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    1486:	f040 81bf 	bne.w	1808 <CONFIG_FPROTECT_BLOCK_SIZE+0x808>
		if (decimals < 0) {
    148a:	eb18 0503 	adds.w	r5, r8, r3
    148e:	f140 81bd 	bpl.w	180c <CONFIG_FPROTECT_BLOCK_SIZE+0x80c>
			decimals = 0;
    1492:	2500      	movs	r5, #0
    1494:	e1bd      	b.n	1812 <CONFIG_FPROTECT_BLOCK_SIZE+0x812>
		switch (conv->specifier) {
    1496:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    149a:	2b20      	cmp	r3, #32
    149c:	f63f af1b 	bhi.w	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
    14a0:	a001      	add	r0, pc, #4	; (adr r0, 14a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a8>)
    14a2:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    14a6:	bf00      	nop
    14a8:	000016bd 	.word	0x000016bd
    14ac:	000012d7 	.word	0x000012d7
    14b0:	000012d7 	.word	0x000012d7
    14b4:	000012d7 	.word	0x000012d7
    14b8:	000012d7 	.word	0x000012d7
    14bc:	000012d7 	.word	0x000012d7
    14c0:	000012d7 	.word	0x000012d7
    14c4:	000012d7 	.word	0x000012d7
    14c8:	000012d7 	.word	0x000012d7
    14cc:	00001395 	.word	0x00001395
    14d0:	000012d7 	.word	0x000012d7
    14d4:	00001559 	.word	0x00001559
    14d8:	0000165d 	.word	0x0000165d
    14dc:	00001395 	.word	0x00001395
    14e0:	00001395 	.word	0x00001395
    14e4:	00001395 	.word	0x00001395
    14e8:	000012d7 	.word	0x000012d7
    14ec:	0000165d 	.word	0x0000165d
    14f0:	000012d7 	.word	0x000012d7
    14f4:	000012d7 	.word	0x000012d7
    14f8:	000012d7 	.word	0x000012d7
    14fc:	000012d7 	.word	0x000012d7
    1500:	000016f3 	.word	0x000016f3
    1504:	000016bd 	.word	0x000016bd
    1508:	000016c1 	.word	0x000016c1
    150c:	000012d7 	.word	0x000012d7
    1510:	000012d7 	.word	0x000012d7
    1514:	00001533 	.word	0x00001533
    1518:	000012d7 	.word	0x000012d7
    151c:	000016bd 	.word	0x000016bd
    1520:	000012d7 	.word	0x000012d7
    1524:	000012d7 	.word	0x000012d7
    1528:	000016bd 	.word	0x000016bd
			OUTC('%');
    152c:	4651      	mov	r1, sl
    152e:	4610      	mov	r0, r2
    1530:	e47e      	b.n	e30 <cbvprintf+0x24>
			if (precision >= 0) {
    1532:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    1538:	db09      	blt.n	154e <CONFIG_FPROTECT_BLOCK_SIZE+0x54e>
				len = strnlen(bps, precision);
    153a:	4641      	mov	r1, r8
    153c:	4610      	mov	r0, r2
    153e:	9203      	str	r2, [sp, #12]
    1540:	f004 ff91 	bl	6466 <strnlen>
				len = strlen(bps);
    1544:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    1546:	2700      	movs	r7, #0
			bpe = bps + len;
    1548:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    154a:	b962      	cbnz	r2, 1566 <CONFIG_FPROTECT_BLOCK_SIZE+0x566>
    154c:	e6c3      	b.n	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
				len = strlen(bps);
    154e:	4610      	mov	r0, r2
    1550:	9203      	str	r2, [sp, #12]
    1552:	f004 ff81 	bl	6458 <strlen>
    1556:	e7f5      	b.n	1544 <CONFIG_FPROTECT_BLOCK_SIZE+0x544>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    155a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    155e:	2700      	movs	r7, #0
			bpe = buf + 1;
    1560:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    1564:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    1566:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    1568:	b107      	cbz	r7, 156c <CONFIG_FPROTECT_BLOCK_SIZE+0x56c>
			nj_len += 1U;
    156a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    156c:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    1570:	06c1      	lsls	r1, r0, #27
    1572:	f140 823a 	bpl.w	19ea <CONFIG_FPROTECT_BLOCK_SIZE+0x9ea>
			nj_len += 2U;
    1576:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    1578:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    157a:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    157c:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    157e:	bf44      	itt	mi
    1580:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    1582:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    1584:	f1bb 0f00 	cmp.w	fp, #0
    1588:	dd23      	ble.n	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
			width -= (int)nj_len;
    158a:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    158e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1592:	0759      	lsls	r1, r3, #29
    1594:	f3c3 0880 	ubfx	r8, r3, #2, #1
    1598:	d41b      	bmi.n	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
				if (conv->flag_zero) {
    159a:	0658      	lsls	r0, r3, #25
    159c:	f140 8234 	bpl.w	1a08 <CONFIG_FPROTECT_BLOCK_SIZE+0xa08>
					if (sign != 0) {
    15a0:	2f00      	cmp	r7, #0
    15a2:	f000 8234 	beq.w	1a0e <CONFIG_FPROTECT_BLOCK_SIZE+0xa0e>
						OUTC(sign);
    15a6:	4651      	mov	r1, sl
    15a8:	4638      	mov	r0, r7
    15aa:	9203      	str	r2, [sp, #12]
    15ac:	47c8      	blx	r9
    15ae:	2800      	cmp	r0, #0
    15b0:	f2c0 8227 	blt.w	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
    15b4:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    15b6:	4647      	mov	r7, r8
						OUTC(sign);
    15b8:	3601      	adds	r6, #1
					pad = '0';
    15ba:	f04f 0830 	mov.w	r8, #48	; 0x30
    15be:	445e      	add	r6, fp
    15c0:	465b      	mov	r3, fp
				while (width-- > 0) {
    15c2:	2b00      	cmp	r3, #0
    15c4:	eba6 000b 	sub.w	r0, r6, fp
    15c8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    15cc:	f300 8211 	bgt.w	19f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x9f2>
    15d0:	4606      	mov	r6, r0
		if (sign != 0) {
    15d2:	b147      	cbz	r7, 15e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e6>
			OUTC(sign);
    15d4:	4651      	mov	r1, sl
    15d6:	4638      	mov	r0, r7
    15d8:	9203      	str	r2, [sp, #12]
    15da:	47c8      	blx	r9
    15dc:	2800      	cmp	r0, #0
    15de:	f2c0 8210 	blt.w	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
    15e2:	9a03      	ldr	r2, [sp, #12]
    15e4:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    15e6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    15ea:	0659      	lsls	r1, r3, #25
    15ec:	f140 8265 	bpl.w	1aba <CONFIG_FPROTECT_BLOCK_SIZE+0xaba>
			if (conv->specifier_a) {
    15f0:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    15f4:	2b00      	cmp	r3, #0
    15f6:	eba6 0302 	sub.w	r3, r6, r2
    15fa:	9303      	str	r3, [sp, #12]
    15fc:	f2c0 820a 	blt.w	1a14 <CONFIG_FPROTECT_BLOCK_SIZE+0xa14>
    1600:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    1602:	7838      	ldrb	r0, [r7, #0]
    1604:	9b03      	ldr	r3, [sp, #12]
    1606:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    160a:	2a09      	cmp	r2, #9
    160c:	46b8      	mov	r8, r7
    160e:	eb03 0607 	add.w	r6, r3, r7
    1612:	f107 0701 	add.w	r7, r7, #1
    1616:	f240 8229 	bls.w	1a6c <CONFIG_FPROTECT_BLOCK_SIZE+0xa6c>
				if (!conv->pad_postdp) {
    161a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    161e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    1620:	0693      	lsls	r3, r2, #26
    1622:	d408      	bmi.n	1636 <CONFIG_FPROTECT_BLOCK_SIZE+0x636>
    1624:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    1626:	2f00      	cmp	r7, #0
    1628:	eba6 0307 	sub.w	r3, r6, r7
    162c:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    1630:	f300 8222 	bgt.w	1a78 <CONFIG_FPROTECT_BLOCK_SIZE+0xa78>
    1634:	461e      	mov	r6, r3
				if (*cp == '.') {
    1636:	f898 0000 	ldrb.w	r0, [r8]
    163a:	282e      	cmp	r0, #46	; 0x2e
    163c:	d10b      	bne.n	1656 <CONFIG_FPROTECT_BLOCK_SIZE+0x656>
					OUTC(*cp++);
    163e:	4651      	mov	r1, sl
    1640:	47c8      	blx	r9
						OUTC('0');
    1642:	2800      	cmp	r0, #0
    1644:	f2c0 81dd 	blt.w	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
					while (pad_len-- > 0) {
    1648:	2f00      	cmp	r7, #0
						OUTC('0');
    164a:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    164e:	f300 821a 	bgt.w	1a86 <CONFIG_FPROTECT_BLOCK_SIZE+0xa86>
					OUTC(*cp++);
    1652:	f108 0801 	add.w	r8, r8, #1
    1656:	eba6 0608 	sub.w	r6, r6, r8
    165a:	e21d      	b.n	1a98 <CONFIG_FPROTECT_BLOCK_SIZE+0xa98>
			if (conv->flag_plus) {
    165c:	073d      	lsls	r5, r7, #28
    165e:	d42b      	bmi.n	16b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b8>
				sign = ' ';
    1660:	f017 0710 	ands.w	r7, r7, #16
    1664:	bf18      	it	ne
    1666:	2720      	movne	r7, #32
			sint = value->sint;
    1668:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    166c:	2b00      	cmp	r3, #0
    166e:	da05      	bge.n	167c <CONFIG_FPROTECT_BLOCK_SIZE+0x67c>
				value->uint = (uint_value_type)-sint;
    1670:	4252      	negs	r2, r2
    1672:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1676:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    167a:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    167c:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    1680:	9300      	str	r3, [sp, #0]
    1682:	aa0e      	add	r2, sp, #56	; 0x38
    1684:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1688:	ab13      	add	r3, sp, #76	; 0x4c
    168a:	f004 fe69 	bl	6360 <encode_uint>
    168e:	4602      	mov	r2, r0
			if (precision >= 0) {
    1690:	f1b8 0f00 	cmp.w	r8, #0
    1694:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    1698:	f6ff af57 	blt.w	154a <CONFIG_FPROTECT_BLOCK_SIZE+0x54a>
				conv->flag_zero = false;
    169c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    16a0:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    16a2:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    16a6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    16a8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    16ac:	f67f af4d 	bls.w	154a <CONFIG_FPROTECT_BLOCK_SIZE+0x54a>
					conv->pad0_value = precision - (int)len;
    16b0:	eba8 0303 	sub.w	r3, r8, r3
    16b4:	930f      	str	r3, [sp, #60]	; 0x3c
    16b6:	e748      	b.n	154a <CONFIG_FPROTECT_BLOCK_SIZE+0x54a>
				sign = '+';
    16b8:	272b      	movs	r7, #43	; 0x2b
    16ba:	e7d5      	b.n	1668 <CONFIG_FPROTECT_BLOCK_SIZE+0x668>
		switch (conv->specifier) {
    16bc:	2700      	movs	r7, #0
    16be:	e7dd      	b.n	167c <CONFIG_FPROTECT_BLOCK_SIZE+0x67c>
			if (value->ptr != NULL) {
    16c0:	980c      	ldr	r0, [sp, #48]	; 0x30
    16c2:	2800      	cmp	r0, #0
    16c4:	f000 818d 	beq.w	19e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x9e2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    16c8:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    16cc:	9300      	str	r3, [sp, #0]
    16ce:	aa0e      	add	r2, sp, #56	; 0x38
    16d0:	ab13      	add	r3, sp, #76	; 0x4c
    16d2:	2100      	movs	r1, #0
    16d4:	f004 fe44 	bl	6360 <encode_uint>
				conv->altform_0c = true;
    16d8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    16dc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    16e0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    16e4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    16e8:	4602      	mov	r2, r0
				conv->altform_0c = true;
    16ea:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    16ee:	2700      	movs	r7, #0
				goto prec_int_pad0;
    16f0:	e7ce      	b.n	1690 <CONFIG_FPROTECT_BLOCK_SIZE+0x690>
				store_count(conv, value->ptr, count);
    16f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    16f4:	2907      	cmp	r1, #7
    16f6:	f63f adee 	bhi.w	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
    16fa:	e8df f001 	tbb	[pc, r1]
    16fe:	040c      	.short	0x040c
    1700:	08080c06 	.word	0x08080c06
    1704:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    1706:	701e      	strb	r6, [r3, #0]
		break;
    1708:	e5e5      	b.n	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
		*(short *)dp = (short)count;
    170a:	801e      	strh	r6, [r3, #0]
		break;
    170c:	e5e3      	b.n	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
		*(intmax_t *)dp = (intmax_t)count;
    170e:	17f2      	asrs	r2, r6, #31
    1710:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    1714:	e5df      	b.n	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1716:	601e      	str	r6, [r3, #0]
		break;
    1718:	e5dd      	b.n	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
		*sign = '-';
    171a:	272d      	movs	r7, #45	; 0x2d
    171c:	e646      	b.n	13ac <CONFIG_FPROTECT_BLOCK_SIZE+0x3ac>
		*sign = '+';
    171e:	272b      	movs	r7, #43	; 0x2b
    1720:	e644      	b.n	13ac <CONFIG_FPROTECT_BLOCK_SIZE+0x3ac>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    1722:	f240 70ff 	movw	r0, #2047	; 0x7ff
    1726:	4285      	cmp	r5, r0
    1728:	d12d      	bne.n	1786 <CONFIG_FPROTECT_BLOCK_SIZE+0x786>
		if (fract == 0) {
    172a:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    172c:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    1730:	d11b      	bne.n	176a <CONFIG_FPROTECT_BLOCK_SIZE+0x76a>
			if (isupper((int)c)) {
    1732:	2a19      	cmp	r2, #25
    1734:	d811      	bhi.n	175a <CONFIG_FPROTECT_BLOCK_SIZE+0x75a>
				*buf++ = 'I';
    1736:	2349      	movs	r3, #73	; 0x49
    1738:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    173c:	234e      	movs	r3, #78	; 0x4e
    173e:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    1742:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    1744:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    1748:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    174c:	f36f 1386 	bfc	r3, #6, #1
    1750:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    1754:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    1758:	e704      	b.n	1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>
				*buf++ = 'i';
    175a:	2369      	movs	r3, #105	; 0x69
    175c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    1760:	236e      	movs	r3, #110	; 0x6e
    1762:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    1766:	2366      	movs	r3, #102	; 0x66
    1768:	e7ec      	b.n	1744 <CONFIG_FPROTECT_BLOCK_SIZE+0x744>
			if (isupper((int)c)) {
    176a:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    176c:	bf99      	ittee	ls
    176e:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    1770:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    1772:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    1774:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    1776:	bf94      	ite	ls
    1778:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    177c:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    1780:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    1784:	e7de      	b.n	1744 <CONFIG_FPROTECT_BLOCK_SIZE+0x744>
	bool is_subnormal = (expo == 0) && (fract != 0);
    1786:	2000      	movs	r0, #0
    1788:	e61e      	b.n	13c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c8>
				expo--;
    178a:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    178c:	1849      	adds	r1, r1, r1
    178e:	415b      	adcs	r3, r3
    1790:	2b00      	cmp	r3, #0
    1792:	dafa      	bge.n	178a <CONFIG_FPROTECT_BLOCK_SIZE+0x78a>
    1794:	e9cd 1308 	strd	r1, r3, [sp, #32]
    1798:	e62a      	b.n	13f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f0>
			fract >>= 1;
    179a:	0840      	lsrs	r0, r0, #1
    179c:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    17a0:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    17a2:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    17a6:	46ac      	mov	ip, r5
			expo++;
    17a8:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    17ac:	d2f5      	bcs.n	179a <CONFIG_FPROTECT_BLOCK_SIZE+0x79a>
		fract *= 5U;
    17ae:	fb0e f501 	mul.w	r5, lr, r1
    17b2:	fba0 010e 	umull	r0, r1, r0, lr
    17b6:	4429      	add	r1, r5
		decexp--;
    17b8:	3b01      	subs	r3, #1
		expo++;
    17ba:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    17be:	f04f 0c01 	mov.w	ip, #1
    17c2:	e621      	b.n	1408 <CONFIG_FPROTECT_BLOCK_SIZE+0x408>
		fract += 2;
    17c4:	3102      	adds	r1, #2
    17c6:	f140 0000 	adc.w	r0, r0, #0
    17ca:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    17ce:	a808      	add	r0, sp, #32
    17d0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    17d4:	f004 fd95 	bl	6302 <_ldiv5>
		decexp++;
    17d8:	9b04      	ldr	r3, [sp, #16]
    17da:	9a03      	ldr	r2, [sp, #12]
    17dc:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    17e0:	3d01      	subs	r5, #1
		decexp++;
    17e2:	3301      	adds	r3, #1
			fract <<= 1;
    17e4:	1849      	adds	r1, r1, r1
    17e6:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    17e8:	2800      	cmp	r0, #0
			expo--;
    17ea:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    17ee:	daf9      	bge.n	17e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x7e4>
    17f0:	e9cd 1008 	strd	r1, r0, [sp, #32]
    17f4:	e611      	b.n	141a <CONFIG_FPROTECT_BLOCK_SIZE+0x41a>
    17f6:	2300      	movs	r3, #0
    17f8:	461d      	mov	r5, r3
    17fa:	e613      	b.n	1424 <CONFIG_FPROTECT_BLOCK_SIZE+0x424>
			precision -= decexp;
    17fc:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    1800:	2266      	movs	r2, #102	; 0x66
    1802:	e634      	b.n	146e <CONFIG_FPROTECT_BLOCK_SIZE+0x46e>
	bool prune_zero = false;
    1804:	2100      	movs	r1, #0
    1806:	e63c      	b.n	1482 <CONFIG_FPROTECT_BLOCK_SIZE+0x482>
		decimals = precision + 1;
    1808:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    180c:	2d10      	cmp	r5, #16
    180e:	bfa8      	it	ge
    1810:	2510      	movge	r5, #16
    1812:	2110      	movs	r1, #16
    1814:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    1816:	2000      	movs	r0, #0
    1818:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    181c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    1820:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    1824:	b9a5      	cbnz	r5, 1850 <CONFIG_FPROTECT_BLOCK_SIZE+0x850>
	fract += round;
    1826:	9d08      	ldr	r5, [sp, #32]
    1828:	1949      	adds	r1, r1, r5
    182a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    182c:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    1830:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    1834:	d21b      	bcs.n	186e <CONFIG_FPROTECT_BLOCK_SIZE+0x86e>
	fract += round;
    1836:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    183a:	2a66      	cmp	r2, #102	; 0x66
    183c:	f040 8099 	bne.w	1972 <CONFIG_FPROTECT_BLOCK_SIZE+0x972>
		if (decexp > 0) {
    1840:	2b00      	cmp	r3, #0
    1842:	dc23      	bgt.n	188c <CONFIG_FPROTECT_BLOCK_SIZE+0x88c>
			*buf++ = '0';
    1844:	2130      	movs	r1, #48	; 0x30
    1846:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    184a:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    184e:	e02f      	b.n	18b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x8b0>
	*v >>= 1;
    1850:	0849      	lsrs	r1, r1, #1
    1852:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    1856:	0840      	lsrs	r0, r0, #1
    1858:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    185c:	a80a      	add	r0, sp, #40	; 0x28
    185e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1862:	3d01      	subs	r5, #1
    1864:	f004 fd4d 	bl	6302 <_ldiv5>
    1868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    186c:	e7d8      	b.n	1820 <CONFIG_FPROTECT_BLOCK_SIZE+0x820>
	*v >>= 1;
    186e:	0849      	lsrs	r1, r1, #1
    1870:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    1874:	a808      	add	r0, sp, #32
	*v >>= 1;
    1876:	086d      	lsrs	r5, r5, #1
    1878:	e9cd 2304 	strd	r2, r3, [sp, #16]
    187c:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    1880:	f004 fd3f 	bl	6302 <_ldiv5>
		decexp++;
    1884:	9b05      	ldr	r3, [sp, #20]
    1886:	9a04      	ldr	r2, [sp, #16]
    1888:	3301      	adds	r3, #1
    188a:	e7d6      	b.n	183a <CONFIG_FPROTECT_BLOCK_SIZE+0x83a>
	char *buf = bps;
    188c:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    188e:	9907      	ldr	r1, [sp, #28]
    1890:	2900      	cmp	r1, #0
    1892:	dd0b      	ble.n	18ac <CONFIG_FPROTECT_BLOCK_SIZE+0x8ac>
				*buf++ = _get_digit(&fract, &digit_count);
    1894:	a907      	add	r1, sp, #28
    1896:	a808      	add	r0, sp, #32
    1898:	e9cd 2304 	strd	r2, r3, [sp, #16]
    189c:	f004 fd49 	bl	6332 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    18a0:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    18a2:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    18a6:	3b01      	subs	r3, #1
    18a8:	9a04      	ldr	r2, [sp, #16]
    18aa:	d1f0      	bne.n	188e <CONFIG_FPROTECT_BLOCK_SIZE+0x88e>
			conv->pad0_value = decexp;
    18ac:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    18ae:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    18b0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    18b4:	0689      	lsls	r1, r1, #26
    18b6:	d402      	bmi.n	18be <CONFIG_FPROTECT_BLOCK_SIZE+0x8be>
    18b8:	f1b8 0f00 	cmp.w	r8, #0
    18bc:	dd1d      	ble.n	18fa <CONFIG_FPROTECT_BLOCK_SIZE+0x8fa>
			*buf++ = '.';
    18be:	212e      	movs	r1, #46	; 0x2e
    18c0:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    18c4:	b19b      	cbz	r3, 18ee <CONFIG_FPROTECT_BLOCK_SIZE+0x8ee>
    18c6:	f1b8 0f00 	cmp.w	r8, #0
    18ca:	dd16      	ble.n	18fa <CONFIG_FPROTECT_BLOCK_SIZE+0x8fa>
			conv->pad0_value = -decexp;
    18cc:	4259      	negs	r1, r3
    18ce:	4541      	cmp	r1, r8
    18d0:	bfa8      	it	ge
    18d2:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    18d4:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    18d8:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    18da:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    18dc:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    18e0:	bfd4      	ite	le
    18e2:	2100      	movle	r1, #0
    18e4:	2101      	movgt	r1, #1
    18e6:	f361 1045 	bfi	r0, r1, #5, #1
    18ea:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    18ee:	f1b8 0f00 	cmp.w	r8, #0
    18f2:	dd02      	ble.n	18fa <CONFIG_FPROTECT_BLOCK_SIZE+0x8fa>
    18f4:	9907      	ldr	r1, [sp, #28]
    18f6:	2900      	cmp	r1, #0
    18f8:	dc56      	bgt.n	19a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x9a8>
	if (prune_zero) {
    18fa:	9903      	ldr	r1, [sp, #12]
    18fc:	2900      	cmp	r1, #0
    18fe:	d163      	bne.n	19c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x9c8>
	conv->pad0_pre_exp = precision;
    1900:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    1904:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    1908:	2945      	cmp	r1, #69	; 0x45
    190a:	d121      	bne.n	1950 <CONFIG_FPROTECT_BLOCK_SIZE+0x950>
		if (decexp < 0) {
    190c:	2b00      	cmp	r3, #0
		*buf++ = c;
    190e:	4629      	mov	r1, r5
			decexp = -decexp;
    1910:	bfb8      	it	lt
    1912:	425b      	neglt	r3, r3
		*buf++ = c;
    1914:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    1918:	bfb4      	ite	lt
    191a:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    191c:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    191e:	2b63      	cmp	r3, #99	; 0x63
    1920:	706a      	strb	r2, [r5, #1]
    1922:	dd09      	ble.n	1938 <CONFIG_FPROTECT_BLOCK_SIZE+0x938>
			*buf++ = (decexp / 100) + '0';
    1924:	2064      	movs	r0, #100	; 0x64
    1926:	fbb3 f2f0 	udiv	r2, r3, r0
    192a:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    192e:	1ce9      	adds	r1, r5, #3
    1930:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    1934:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    1938:	200a      	movs	r0, #10
    193a:	460d      	mov	r5, r1
    193c:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    1940:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    1944:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    1948:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    194a:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    194e:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    1950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1952:	2b00      	cmp	r3, #0
    1954:	dc43      	bgt.n	19de <CONFIG_FPROTECT_BLOCK_SIZE+0x9de>
    1956:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1958:	2b00      	cmp	r3, #0
    195a:	bfd4      	ite	le
    195c:	2300      	movle	r3, #0
    195e:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    1960:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    1964:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    1968:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    196a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    196e:	702b      	strb	r3, [r5, #0]
	return bps;
    1970:	e5f8      	b.n	1564 <CONFIG_FPROTECT_BLOCK_SIZE+0x564>
		*buf = _get_digit(&fract, &digit_count);
    1972:	a907      	add	r1, sp, #28
    1974:	a808      	add	r0, sp, #32
    1976:	e9cd 2304 	strd	r2, r3, [sp, #16]
    197a:	f004 fcda 	bl	6332 <_get_digit>
		if (*buf++ != '0') {
    197e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    1982:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    1986:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    198a:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    198c:	bf18      	it	ne
    198e:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    1992:	0688      	lsls	r0, r1, #26
    1994:	d402      	bmi.n	199c <CONFIG_FPROTECT_BLOCK_SIZE+0x99c>
    1996:	f1b8 0f00 	cmp.w	r8, #0
    199a:	dd12      	ble.n	19c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x9c2>
			*buf++ = '.';
    199c:	212e      	movs	r1, #46	; 0x2e
    199e:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    19a2:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    19a6:	e7a2      	b.n	18ee <CONFIG_FPROTECT_BLOCK_SIZE+0x8ee>
		*buf++ = _get_digit(&fract, &digit_count);
    19a8:	a907      	add	r1, sp, #28
    19aa:	a808      	add	r0, sp, #32
    19ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
    19b0:	f004 fcbf 	bl	6332 <_get_digit>
		precision--;
    19b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    19b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    19bc:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    19c0:	e795      	b.n	18ee <CONFIG_FPROTECT_BLOCK_SIZE+0x8ee>
		if (*buf++ != '0') {
    19c2:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    19c6:	e798      	b.n	18fa <CONFIG_FPROTECT_BLOCK_SIZE+0x8fa>
		conv->pad0_pre_exp = 0;
    19c8:	2100      	movs	r1, #0
    19ca:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    19cc:	4628      	mov	r0, r5
    19ce:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    19d2:	2930      	cmp	r1, #48	; 0x30
    19d4:	d0fa      	beq.n	19cc <CONFIG_FPROTECT_BLOCK_SIZE+0x9cc>
		if (*buf != '.') {
    19d6:	292e      	cmp	r1, #46	; 0x2e
    19d8:	bf18      	it	ne
    19da:	4605      	movne	r5, r0
    19dc:	e792      	b.n	1904 <CONFIG_FPROTECT_BLOCK_SIZE+0x904>
		|| (conv->pad0_pre_exp > 0);
    19de:	2301      	movs	r3, #1
    19e0:	e7be      	b.n	1960 <CONFIG_FPROTECT_BLOCK_SIZE+0x960>
			bpe = bps + 5;
    19e2:	4d4b      	ldr	r5, [pc, #300]	; (1b10 <CONFIG_FPROTECT_BLOCK_SIZE+0xb10>)
		char sign = 0;
    19e4:	4607      	mov	r7, r0
			bps = "(nil)";
    19e6:	1f6a      	subs	r2, r5, #5
    19e8:	e5bd      	b.n	1566 <CONFIG_FPROTECT_BLOCK_SIZE+0x566>
		} else if (conv->altform_0) {
    19ea:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    19ec:	bf48      	it	mi
    19ee:	3301      	addmi	r3, #1
    19f0:	e5c2      	b.n	1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>
					OUTC(pad);
    19f2:	4651      	mov	r1, sl
    19f4:	4640      	mov	r0, r8
    19f6:	9203      	str	r2, [sp, #12]
    19f8:	47c8      	blx	r9
    19fa:	2800      	cmp	r0, #0
    19fc:	9a03      	ldr	r2, [sp, #12]
    19fe:	f6bf addf 	bge.w	15c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c0>
#undef OUTS
#undef OUTC
}
    1a02:	b01b      	add	sp, #108	; 0x6c
    1a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1a08:	f04f 0820 	mov.w	r8, #32
    1a0c:	e5d7      	b.n	15be <CONFIG_FPROTECT_BLOCK_SIZE+0x5be>
					pad = '0';
    1a0e:	f04f 0830 	mov.w	r8, #48	; 0x30
    1a12:	e5d4      	b.n	15be <CONFIG_FPROTECT_BLOCK_SIZE+0x5be>
			if (conv->specifier_a) {
    1a14:	4690      	mov	r8, r2
    1a16:	9b03      	ldr	r3, [sp, #12]
    1a18:	4647      	mov	r7, r8
    1a1a:	4443      	add	r3, r8
				while (*cp != 'p') {
    1a1c:	f818 0b01 	ldrb.w	r0, [r8], #1
    1a20:	2870      	cmp	r0, #112	; 0x70
    1a22:	d11e      	bne.n	1a62 <CONFIG_FPROTECT_BLOCK_SIZE+0xa62>
			while (pad_len-- > 0) {
    1a24:	461e      	mov	r6, r3
    1a26:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1a28:	eb03 0806 	add.w	r8, r3, r6
    1a2c:	eba8 0306 	sub.w	r3, r8, r6
    1a30:	2b00      	cmp	r3, #0
    1a32:	dc3b      	bgt.n	1aac <CONFIG_FPROTECT_BLOCK_SIZE+0xaac>
			OUTS(cp, bpe);
    1a34:	462b      	mov	r3, r5
    1a36:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    1a38:	4651      	mov	r1, sl
    1a3a:	4648      	mov	r0, r9
    1a3c:	f004 fcd6 	bl	63ec <outs>
    1a40:	2800      	cmp	r0, #0
    1a42:	dbde      	blt.n	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
    1a44:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    1a46:	4606      	mov	r6, r0
    1a48:	4483      	add	fp, r0
		while (width > 0) {
    1a4a:	ebab 0306 	sub.w	r3, fp, r6
    1a4e:	2b00      	cmp	r3, #0
    1a50:	f77f ac41 	ble.w	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
			OUTC(' ');
    1a54:	4651      	mov	r1, sl
    1a56:	2020      	movs	r0, #32
    1a58:	47c8      	blx	r9
    1a5a:	2800      	cmp	r0, #0
    1a5c:	dbd1      	blt.n	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
    1a5e:	3601      	adds	r6, #1
			--width;
    1a60:	e7f3      	b.n	1a4a <CONFIG_FPROTECT_BLOCK_SIZE+0xa4a>
					OUTC(*cp++);
    1a62:	4651      	mov	r1, sl
    1a64:	47c8      	blx	r9
    1a66:	2800      	cmp	r0, #0
    1a68:	dad5      	bge.n	1a16 <CONFIG_FPROTECT_BLOCK_SIZE+0xa16>
    1a6a:	e7ca      	b.n	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
					OUTC(*cp++);
    1a6c:	4651      	mov	r1, sl
    1a6e:	47c8      	blx	r9
    1a70:	2800      	cmp	r0, #0
    1a72:	f6bf adc6 	bge.w	1602 <CONFIG_FPROTECT_BLOCK_SIZE+0x602>
    1a76:	e7c4      	b.n	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
						OUTC('0');
    1a78:	4651      	mov	r1, sl
    1a7a:	2030      	movs	r0, #48	; 0x30
    1a7c:	47c8      	blx	r9
    1a7e:	2800      	cmp	r0, #0
    1a80:	f6bf add1 	bge.w	1626 <CONFIG_FPROTECT_BLOCK_SIZE+0x626>
    1a84:	e7bd      	b.n	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
						OUTC('0');
    1a86:	4651      	mov	r1, sl
    1a88:	2030      	movs	r0, #48	; 0x30
    1a8a:	47c8      	blx	r9
    1a8c:	3f01      	subs	r7, #1
    1a8e:	e5d8      	b.n	1642 <CONFIG_FPROTECT_BLOCK_SIZE+0x642>
					OUTC(*cp++);
    1a90:	4651      	mov	r1, sl
    1a92:	47c8      	blx	r9
    1a94:	2800      	cmp	r0, #0
    1a96:	dbb4      	blt.n	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
    1a98:	4647      	mov	r7, r8
    1a9a:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    1a9e:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1aa2:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    1aa6:	2a09      	cmp	r2, #9
    1aa8:	d9f2      	bls.n	1a90 <CONFIG_FPROTECT_BLOCK_SIZE+0xa90>
    1aaa:	e7bb      	b.n	1a24 <CONFIG_FPROTECT_BLOCK_SIZE+0xa24>
				OUTC('0');
    1aac:	4651      	mov	r1, sl
    1aae:	2030      	movs	r0, #48	; 0x30
    1ab0:	47c8      	blx	r9
    1ab2:	2800      	cmp	r0, #0
    1ab4:	dba5      	blt.n	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
    1ab6:	3601      	adds	r6, #1
    1ab8:	e7b8      	b.n	1a2c <CONFIG_FPROTECT_BLOCK_SIZE+0xa2c>
			if (conv->altform_0c | conv->altform_0) {
    1aba:	06d8      	lsls	r0, r3, #27
    1abc:	d401      	bmi.n	1ac2 <CONFIG_FPROTECT_BLOCK_SIZE+0xac2>
    1abe:	0719      	lsls	r1, r3, #28
    1ac0:	d507      	bpl.n	1ad2 <CONFIG_FPROTECT_BLOCK_SIZE+0xad2>
				OUTC('0');
    1ac2:	4651      	mov	r1, sl
    1ac4:	2030      	movs	r0, #48	; 0x30
    1ac6:	9203      	str	r2, [sp, #12]
    1ac8:	47c8      	blx	r9
    1aca:	2800      	cmp	r0, #0
    1acc:	db99      	blt.n	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
    1ace:	9a03      	ldr	r2, [sp, #12]
    1ad0:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    1ad2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    1ad6:	06db      	lsls	r3, r3, #27
    1ad8:	d508      	bpl.n	1aec <CONFIG_FPROTECT_BLOCK_SIZE+0xaec>
				OUTC(conv->specifier);
    1ada:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    1ade:	9203      	str	r2, [sp, #12]
    1ae0:	4651      	mov	r1, sl
    1ae2:	47c8      	blx	r9
    1ae4:	2800      	cmp	r0, #0
    1ae6:	db8c      	blt.n	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
    1ae8:	9a03      	ldr	r2, [sp, #12]
    1aea:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    1aec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    1aee:	4437      	add	r7, r6
    1af0:	1bbb      	subs	r3, r7, r6
    1af2:	2b00      	cmp	r3, #0
    1af4:	dc01      	bgt.n	1afa <CONFIG_FPROTECT_BLOCK_SIZE+0xafa>
			OUTS(bps, bpe);
    1af6:	462b      	mov	r3, r5
    1af8:	e79e      	b.n	1a38 <CONFIG_FPROTECT_BLOCK_SIZE+0xa38>
				OUTC('0');
    1afa:	4651      	mov	r1, sl
    1afc:	2030      	movs	r0, #48	; 0x30
    1afe:	9203      	str	r2, [sp, #12]
    1b00:	47c8      	blx	r9
    1b02:	2800      	cmp	r0, #0
    1b04:	f6ff af7d 	blt.w	1a02 <CONFIG_FPROTECT_BLOCK_SIZE+0xa02>
    1b08:	9a03      	ldr	r2, [sp, #12]
    1b0a:	3601      	adds	r6, #1
    1b0c:	e7f0      	b.n	1af0 <CONFIG_FPROTECT_BLOCK_SIZE+0xaf0>
    1b0e:	bf00      	nop
    1b10:	00007ac0 	.word	0x00007ac0

00001b14 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1b14:	b508      	push	{r3, lr}
    1b16:	f04f 0220 	mov.w	r2, #32
    1b1a:	f3ef 8311 	mrs	r3, BASEPRI
    1b1e:	f382 8812 	msr	BASEPRI_MAX, r2
    1b22:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1b26:	f000 fe19 	bl	275c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1b2a:	4803      	ldr	r0, [pc, #12]	; (1b38 <sys_reboot+0x24>)
    1b2c:	f004 fb27 	bl	617e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1b30:	f000 fa32 	bl	1f98 <arch_cpu_idle>
    1b34:	e7fc      	b.n	1b30 <sys_reboot+0x1c>
    1b36:	bf00      	nop
    1b38:	00007ac1 	.word	0x00007ac1

00001b3c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1b40:	4605      	mov	r5, r0
    1b42:	f04f 0320 	mov.w	r3, #32
    1b46:	f3ef 8611 	mrs	r6, BASEPRI
    1b4a:	f383 8812 	msr	BASEPRI_MAX, r3
    1b4e:	f3bf 8f6f 	isb	sy
	return list->head;
    1b52:	4b0e      	ldr	r3, [pc, #56]	; (1b8c <pm_state_notify+0x50>)
    1b54:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1b56:	b19c      	cbz	r4, 1b80 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1b58:	4f0d      	ldr	r7, [pc, #52]	; (1b90 <pm_state_notify+0x54>)
    1b5a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1b94 <pm_state_notify+0x58>
    1b5e:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1b62:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1b66:	2d00      	cmp	r5, #0
    1b68:	bf08      	it	eq
    1b6a:	4613      	moveq	r3, r2
		if (callback) {
    1b6c:	b12b      	cbz	r3, 1b7a <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1b6e:	f898 2014 	ldrb.w	r2, [r8, #20]
    1b72:	fb09 f202 	mul.w	r2, r9, r2
    1b76:	5cb8      	ldrb	r0, [r7, r2]
    1b78:	4798      	blx	r3
	return node->next;
    1b7a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1b7c:	2c00      	cmp	r4, #0
    1b7e:	d1f0      	bne.n	1b62 <pm_state_notify+0x26>
	__asm__ volatile(
    1b80:	f386 8811 	msr	BASEPRI, r6
    1b84:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1b8c:	20000790 	.word	0x20000790
    1b90:	20000798 	.word	0x20000798
    1b94:	20000e70 	.word	0x20000e70

00001b98 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1b98:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    1b9a:	2301      	movs	r3, #1
    1b9c:	f000 001f 	and.w	r0, r0, #31
    1ba0:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1ba4:	4b07      	ldr	r3, [pc, #28]	; (1bc4 <atomic_clear_bit.constprop.0+0x2c>)
    1ba6:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1baa:	43c0      	mvns	r0, r0
    1bac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1bb0:	e853 2f00 	ldrex	r2, [r3]
    1bb4:	4002      	ands	r2, r0
    1bb6:	e843 2100 	strex	r1, r2, [r3]
    1bba:	2900      	cmp	r1, #0
    1bbc:	d1f8      	bne.n	1bb0 <atomic_clear_bit.constprop.0+0x18>
    1bbe:	f3bf 8f5b 	dmb	ish
}
    1bc2:	4770      	bx	lr
    1bc4:	200007a4 	.word	0x200007a4

00001bc8 <pm_system_resume>:

void pm_system_resume(void)
{
    1bc8:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1bca:	4b1a      	ldr	r3, [pc, #104]	; (1c34 <pm_system_resume+0x6c>)
    1bcc:	7d1c      	ldrb	r4, [r3, #20]
    1bce:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1bd2:	f004 031f 	and.w	r3, r4, #31
    1bd6:	2201      	movs	r2, #1
    1bd8:	409a      	lsls	r2, r3
    1bda:	4b17      	ldr	r3, [pc, #92]	; (1c38 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1bdc:	0961      	lsrs	r1, r4, #5
    1bde:	43d0      	mvns	r0, r2
    1be0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1be4:	e853 1f00 	ldrex	r1, [r3]
    1be8:	ea01 0500 	and.w	r5, r1, r0
    1bec:	e843 5c00 	strex	ip, r5, [r3]
    1bf0:	f1bc 0f00 	cmp.w	ip, #0
    1bf4:	d1f6      	bne.n	1be4 <pm_system_resume+0x1c>
    1bf6:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1bfa:	4211      	tst	r1, r2
    1bfc:	d013      	beq.n	1c26 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    1bfe:	4b0f      	ldr	r3, [pc, #60]	; (1c3c <pm_system_resume+0x74>)
    1c00:	4d0f      	ldr	r5, [pc, #60]	; (1c40 <pm_system_resume+0x78>)
    1c02:	b18b      	cbz	r3, 1c28 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1c04:	230c      	movs	r3, #12
    1c06:	4363      	muls	r3, r4
    1c08:	18ea      	adds	r2, r5, r3
    1c0a:	5ce8      	ldrb	r0, [r5, r3]
    1c0c:	7851      	ldrb	r1, [r2, #1]
    1c0e:	f004 fc56 	bl	64be <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1c12:	2000      	movs	r0, #0
    1c14:	f7ff ff92 	bl	1b3c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1c18:	230c      	movs	r3, #12
    1c1a:	435c      	muls	r4, r3
    1c1c:	192a      	adds	r2, r5, r4
    1c1e:	2300      	movs	r3, #0
    1c20:	512b      	str	r3, [r5, r4]
    1c22:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1c26:	bd38      	pop	{r3, r4, r5, pc}
    1c28:	f383 8811 	msr	BASEPRI, r3
    1c2c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1c30:	e7ef      	b.n	1c12 <pm_system_resume+0x4a>
    1c32:	bf00      	nop
    1c34:	20000e70 	.word	0x20000e70
    1c38:	200007a8 	.word	0x200007a8
    1c3c:	000064bf 	.word	0x000064bf
    1c40:	20000798 	.word	0x20000798

00001c44 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1c48:	4b32      	ldr	r3, [pc, #200]	; (1d14 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c4a:	4a33      	ldr	r2, [pc, #204]	; (1d18 <pm_system_suspend+0xd4>)
    1c4c:	7d1c      	ldrb	r4, [r3, #20]
    1c4e:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1c52:	0963      	lsrs	r3, r4, #5
    1c54:	ea4f 0983 	mov.w	r9, r3, lsl #2
    1c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c5c:	4e2f      	ldr	r6, [pc, #188]	; (1d1c <pm_system_suspend+0xd8>)
    1c5e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1c62:	f004 081f 	and.w	r8, r4, #31
    1c66:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1c6a:	f013 0f01 	tst.w	r3, #1
{
    1c6e:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1c70:	d10a      	bne.n	1c88 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    1c72:	4601      	mov	r1, r0
    1c74:	4620      	mov	r0, r4
    1c76:	f000 f869 	bl	1d4c <pm_policy_next_state>
		if (info != NULL) {
    1c7a:	b128      	cbz	r0, 1c88 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    1c7c:	c807      	ldmia	r0, {r0, r1, r2}
    1c7e:	230c      	movs	r3, #12
    1c80:	fb03 6304 	mla	r3, r3, r4, r6
    1c84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1c88:	230c      	movs	r3, #12
    1c8a:	4363      	muls	r3, r4
    1c8c:	18f2      	adds	r2, r6, r3
    1c8e:	5cf5      	ldrb	r5, [r6, r3]
    1c90:	b92d      	cbnz	r5, 1c9e <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    1c92:	4620      	mov	r0, r4
    1c94:	f7ff ff80 	bl	1b98 <atomic_clear_bit.constprop.0>
		ret = false;
    1c98:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    1c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    1c9e:	1c7b      	adds	r3, r7, #1
    1ca0:	d00f      	beq.n	1cc2 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1ca2:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1ca6:	481e      	ldr	r0, [pc, #120]	; (1d20 <pm_system_suspend+0xdc>)
    1ca8:	4a1e      	ldr	r2, [pc, #120]	; (1d24 <pm_system_suspend+0xe0>)
    1caa:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    1cae:	2100      	movs	r1, #0
    1cb0:	2300      	movs	r3, #0
    1cb2:	fbec 0105 	umlal	r0, r1, ip, r5
    1cb6:	f7fe fa23 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1cba:	2101      	movs	r1, #1
    1cbc:	1a38      	subs	r0, r7, r0
    1cbe:	f005 fb36 	bl	732e <z_set_timeout_expiry>
	k_sched_lock();
    1cc2:	f003 fb37 	bl	5334 <k_sched_lock>
	pm_state_notify(true);
    1cc6:	2001      	movs	r0, #1
    1cc8:	f7ff ff38 	bl	1b3c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1ccc:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1cd0:	2301      	movs	r3, #1
    1cd2:	fa03 f808 	lsl.w	r8, r3, r8
    1cd6:	4b14      	ldr	r3, [pc, #80]	; (1d28 <pm_system_suspend+0xe4>)
    1cd8:	4499      	add	r9, r3
    1cda:	e859 3f00 	ldrex	r3, [r9]
    1cde:	ea43 0308 	orr.w	r3, r3, r8
    1ce2:	e849 3200 	strex	r2, r3, [r9]
    1ce6:	2a00      	cmp	r2, #0
    1ce8:	d1f7      	bne.n	1cda <pm_system_suspend+0x96>
    1cea:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1cee:	4b0f      	ldr	r3, [pc, #60]	; (1d2c <pm_system_suspend+0xe8>)
    1cf0:	b133      	cbz	r3, 1d00 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    1cf2:	230c      	movs	r3, #12
    1cf4:	4363      	muls	r3, r4
    1cf6:	18f2      	adds	r2, r6, r3
    1cf8:	5cf0      	ldrb	r0, [r6, r3]
    1cfa:	7851      	ldrb	r1, [r2, #1]
    1cfc:	f004 fbd3 	bl	64a6 <pm_state_set>
	pm_system_resume();
    1d00:	f7ff ff62 	bl	1bc8 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    1d04:	4620      	mov	r0, r4
    1d06:	f7ff ff47 	bl	1b98 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    1d0a:	f003 fce3 	bl	56d4 <k_sched_unlock>
	bool ret = true;
    1d0e:	2001      	movs	r0, #1
    1d10:	e7c3      	b.n	1c9a <pm_system_suspend+0x56>
    1d12:	bf00      	nop
    1d14:	20000e70 	.word	0x20000e70
    1d18:	200007a4 	.word	0x200007a4
    1d1c:	20000798 	.word	0x20000798
    1d20:	000f423f 	.word	0x000f423f
    1d24:	000f4240 	.word	0x000f4240
    1d28:	200007a8 	.word	0x200007a8
    1d2c:	000064a7 	.word	0x000064a7

00001d30 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1d30:	4b05      	ldr	r3, [pc, #20]	; (1d48 <pm_policy_state_lock_is_active+0x18>)
    1d32:	f3bf 8f5b 	dmb	ish
    1d36:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1d3a:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    1d3e:	3800      	subs	r0, #0
    1d40:	bf18      	it	ne
    1d42:	2001      	movne	r0, #1
    1d44:	4770      	bx	lr
    1d46:	bf00      	nop
    1d48:	200007ac 	.word	0x200007ac

00001d4c <pm_policy_next_state>:
{
    1d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d50:	b085      	sub	sp, #20
    1d52:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1d54:	a903      	add	r1, sp, #12
    1d56:	f000 f847 	bl	1de8 <pm_state_cpu_get_all>
    1d5a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1ddc <pm_policy_next_state+0x90>
    1d5e:	f8df a080 	ldr.w	sl, [pc, #128]	; 1de0 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1d62:	1e44      	subs	r4, r0, #1
    1d64:	b224      	sxth	r4, r4
    1d66:	f04f 0b00 	mov.w	fp, #0
    1d6a:	1c63      	adds	r3, r4, #1
    1d6c:	d104      	bne.n	1d78 <pm_policy_next_state+0x2c>
	return NULL;
    1d6e:	2600      	movs	r6, #0
}
    1d70:	4630      	mov	r0, r6
    1d72:	b005      	add	sp, #20
    1d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    1d78:	9a03      	ldr	r2, [sp, #12]
    1d7a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1d7e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    1d82:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    1d86:	f7ff ffd3 	bl	1d30 <pm_policy_state_lock_is_active>
    1d8a:	4605      	mov	r5, r0
    1d8c:	bb10      	cbnz	r0, 1dd4 <pm_policy_next_state+0x88>
    1d8e:	6870      	ldr	r0, [r6, #4]
    1d90:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    1d94:	46c4      	mov	ip, r8
    1d96:	4629      	mov	r1, r5
    1d98:	fbe0 c109 	umlal	ip, r1, r0, r9
    1d9c:	4652      	mov	r2, sl
    1d9e:	465b      	mov	r3, fp
    1da0:	4660      	mov	r0, ip
    1da2:	f7fe f9ad 	bl	100 <__aeabi_uldivmod>
    1da6:	9001      	str	r0, [sp, #4]
    1da8:	68b0      	ldr	r0, [r6, #8]
    1daa:	46c4      	mov	ip, r8
    1dac:	4629      	mov	r1, r5
    1dae:	fbe0 c109 	umlal	ip, r1, r0, r9
    1db2:	465b      	mov	r3, fp
    1db4:	4652      	mov	r2, sl
    1db6:	4660      	mov	r0, ip
    1db8:	f7fe f9a2 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1dbc:	4b09      	ldr	r3, [pc, #36]	; (1de4 <pm_policy_next_state+0x98>)
    1dbe:	681b      	ldr	r3, [r3, #0]
    1dc0:	1c59      	adds	r1, r3, #1
    1dc2:	d001      	beq.n	1dc8 <pm_policy_next_state+0x7c>
    1dc4:	4283      	cmp	r3, r0
    1dc6:	d905      	bls.n	1dd4 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    1dc8:	1c7a      	adds	r2, r7, #1
    1dca:	d0d1      	beq.n	1d70 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    1dcc:	9b01      	ldr	r3, [sp, #4]
    1dce:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    1dd0:	42b8      	cmp	r0, r7
    1dd2:	d9cd      	bls.n	1d70 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1dd4:	3c01      	subs	r4, #1
    1dd6:	b224      	sxth	r4, r4
    1dd8:	e7c7      	b.n	1d6a <pm_policy_next_state+0x1e>
    1dda:	bf00      	nop
    1ddc:	000f423f 	.word	0x000f423f
    1de0:	000f4240 	.word	0x000f4240
    1de4:	20000028 	.word	0x20000028

00001de8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1de8:	b908      	cbnz	r0, 1dee <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1dea:	4b02      	ldr	r3, [pc, #8]	; (1df4 <pm_state_cpu_get_all+0xc>)
    1dec:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1dee:	2000      	movs	r0, #0
    1df0:	4770      	bx	lr
    1df2:	bf00      	nop
    1df4:	00007698 	.word	0x00007698

00001df8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1df8:	4801      	ldr	r0, [pc, #4]	; (1e00 <nrf_cc3xx_platform_abort_init+0x8>)
    1dfa:	f003 bfcb 	b.w	5d94 <nrf_cc3xx_platform_set_abort>
    1dfe:	bf00      	nop
    1e00:	00007698 	.word	0x00007698

00001e04 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1e04:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    1e06:	4604      	mov	r4, r0
    1e08:	b918      	cbnz	r0, 1e12 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1e0a:	4b0d      	ldr	r3, [pc, #52]	; (1e40 <mutex_free_platform+0x3c>)
    1e0c:	480d      	ldr	r0, [pc, #52]	; (1e44 <mutex_free_platform+0x40>)
    1e0e:	685b      	ldr	r3, [r3, #4]
    1e10:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1e12:	6861      	ldr	r1, [r4, #4]
    1e14:	2908      	cmp	r1, #8
    1e16:	d00d      	beq.n	1e34 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1e18:	f031 0304 	bics.w	r3, r1, #4
    1e1c:	d00a      	beq.n	1e34 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1e1e:	f011 0102 	ands.w	r1, r1, #2
    1e22:	d008      	beq.n	1e36 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1e24:	4808      	ldr	r0, [pc, #32]	; (1e48 <mutex_free_platform+0x44>)
    1e26:	4621      	mov	r1, r4
    1e28:	f005 f94f 	bl	70ca <k_mem_slab_free>
        mutex->mutex = NULL;
    1e2c:	2300      	movs	r3, #0
    1e2e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1e30:	2300      	movs	r3, #0
    1e32:	6063      	str	r3, [r4, #4]
}
    1e34:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1e36:	6820      	ldr	r0, [r4, #0]
    1e38:	2214      	movs	r2, #20
    1e3a:	f004 fb28 	bl	648e <memset>
    1e3e:	e7f7      	b.n	1e30 <mutex_free_platform+0x2c>
    1e40:	20000134 	.word	0x20000134
    1e44:	00007aea 	.word	0x00007aea
    1e48:	200007c8 	.word	0x200007c8

00001e4c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1e4c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1e4e:	b308      	cbz	r0, 1e94 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    1e50:	6843      	ldr	r3, [r0, #4]
    1e52:	2b04      	cmp	r3, #4
    1e54:	d110      	bne.n	1e78 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1e56:	2201      	movs	r2, #1
    1e58:	6803      	ldr	r3, [r0, #0]
    1e5a:	f3bf 8f5b 	dmb	ish
    1e5e:	e853 1f00 	ldrex	r1, [r3]
    1e62:	2900      	cmp	r1, #0
    1e64:	d103      	bne.n	1e6e <mutex_lock_platform+0x22>
    1e66:	e843 2000 	strex	r0, r2, [r3]
    1e6a:	2800      	cmp	r0, #0
    1e6c:	d1f7      	bne.n	1e5e <mutex_lock_platform+0x12>
    1e6e:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1e72:	d10b      	bne.n	1e8c <mutex_lock_platform+0x40>
    1e74:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    1e76:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1e78:	b153      	cbz	r3, 1e90 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1e7a:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1e84:	f003 f8fc 	bl	5080 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1e88:	2800      	cmp	r0, #0
    1e8a:	d0f3      	beq.n	1e74 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1e8c:	4803      	ldr	r0, [pc, #12]	; (1e9c <mutex_lock_platform+0x50>)
    1e8e:	e7f2      	b.n	1e76 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1e90:	4803      	ldr	r0, [pc, #12]	; (1ea0 <mutex_lock_platform+0x54>)
    1e92:	e7f0      	b.n	1e76 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1e94:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1e98:	e7ed      	b.n	1e76 <mutex_lock_platform+0x2a>
    1e9a:	bf00      	nop
    1e9c:	ffff8fe9 	.word	0xffff8fe9
    1ea0:	ffff8fea 	.word	0xffff8fea

00001ea4 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1ea4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1ea6:	b1d0      	cbz	r0, 1ede <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1ea8:	6843      	ldr	r3, [r0, #4]
    1eaa:	2b04      	cmp	r3, #4
    1eac:	d111      	bne.n	1ed2 <mutex_unlock_platform+0x2e>
    1eae:	2200      	movs	r2, #0
    1eb0:	6803      	ldr	r3, [r0, #0]
    1eb2:	f3bf 8f5b 	dmb	ish
    1eb6:	e853 1f00 	ldrex	r1, [r3]
    1eba:	2901      	cmp	r1, #1
    1ebc:	d103      	bne.n	1ec6 <mutex_unlock_platform+0x22>
    1ebe:	e843 2000 	strex	r0, r2, [r3]
    1ec2:	2800      	cmp	r0, #0
    1ec4:	d1f7      	bne.n	1eb6 <mutex_unlock_platform+0x12>
    1ec6:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1eca:	4807      	ldr	r0, [pc, #28]	; (1ee8 <mutex_unlock_platform+0x44>)
    1ecc:	bf08      	it	eq
    1ece:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1ed0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1ed2:	b13b      	cbz	r3, 1ee4 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1ed4:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1ed6:	f003 f94b 	bl	5170 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1eda:	2000      	movs	r0, #0
    1edc:	e7f8      	b.n	1ed0 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1ede:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1ee2:	e7f5      	b.n	1ed0 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1ee4:	4801      	ldr	r0, [pc, #4]	; (1eec <mutex_unlock_platform+0x48>)
    1ee6:	e7f3      	b.n	1ed0 <mutex_unlock_platform+0x2c>
    1ee8:	ffff8fe9 	.word	0xffff8fe9
    1eec:	ffff8fea 	.word	0xffff8fea

00001ef0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1ef0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1ef2:	4604      	mov	r4, r0
    1ef4:	b918      	cbnz	r0, 1efe <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1ef6:	4b16      	ldr	r3, [pc, #88]	; (1f50 <mutex_init_platform+0x60>)
    1ef8:	4816      	ldr	r0, [pc, #88]	; (1f54 <mutex_init_platform+0x64>)
    1efa:	685b      	ldr	r3, [r3, #4]
    1efc:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1efe:	6863      	ldr	r3, [r4, #4]
    1f00:	2b04      	cmp	r3, #4
    1f02:	d023      	beq.n	1f4c <mutex_init_platform+0x5c>
    1f04:	2b08      	cmp	r3, #8
    1f06:	d021      	beq.n	1f4c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1f08:	b9cb      	cbnz	r3, 1f3e <mutex_init_platform+0x4e>
    1f0a:	6823      	ldr	r3, [r4, #0]
    1f0c:	b9bb      	cbnz	r3, 1f3e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1f0e:	4812      	ldr	r0, [pc, #72]	; (1f58 <mutex_init_platform+0x68>)
    1f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1f18:	4621      	mov	r1, r4
    1f1a:	f002 ffad 	bl	4e78 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1f1e:	b908      	cbnz	r0, 1f24 <mutex_init_platform+0x34>
    1f20:	6823      	ldr	r3, [r4, #0]
    1f22:	b91b      	cbnz	r3, 1f2c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1f24:	4b0a      	ldr	r3, [pc, #40]	; (1f50 <mutex_init_platform+0x60>)
    1f26:	480d      	ldr	r0, [pc, #52]	; (1f5c <mutex_init_platform+0x6c>)
    1f28:	685b      	ldr	r3, [r3, #4]
    1f2a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1f2c:	6820      	ldr	r0, [r4, #0]
    1f2e:	2214      	movs	r2, #20
    1f30:	2100      	movs	r1, #0
    1f32:	f004 faac 	bl	648e <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1f36:	6863      	ldr	r3, [r4, #4]
    1f38:	f043 0302 	orr.w	r3, r3, #2
    1f3c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1f3e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1f40:	f005 f901 	bl	7146 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1f44:	6863      	ldr	r3, [r4, #4]
    1f46:	f043 0301 	orr.w	r3, r3, #1
    1f4a:	6063      	str	r3, [r4, #4]
}
    1f4c:	bd10      	pop	{r4, pc}
    1f4e:	bf00      	nop
    1f50:	20000134 	.word	0x20000134
    1f54:	00007aea 	.word	0x00007aea
    1f58:	200007c8 	.word	0x200007c8
    1f5c:	00007b10 	.word	0x00007b10

00001f60 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1f60:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1f62:	4906      	ldr	r1, [pc, #24]	; (1f7c <nrf_cc3xx_platform_mutex_init+0x1c>)
    1f64:	4806      	ldr	r0, [pc, #24]	; (1f80 <nrf_cc3xx_platform_mutex_init+0x20>)
    1f66:	2340      	movs	r3, #64	; 0x40
    1f68:	2214      	movs	r2, #20
    1f6a:	f005 f893 	bl	7094 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1f72:	4904      	ldr	r1, [pc, #16]	; (1f84 <nrf_cc3xx_platform_mutex_init+0x24>)
    1f74:	4804      	ldr	r0, [pc, #16]	; (1f88 <nrf_cc3xx_platform_mutex_init+0x28>)
    1f76:	f003 bf6d 	b.w	5e54 <nrf_cc3xx_platform_set_mutexes>
    1f7a:	bf00      	nop
    1f7c:	200007e4 	.word	0x200007e4
    1f80:	200007c8 	.word	0x200007c8
    1f84:	000076b0 	.word	0x000076b0
    1f88:	000076a0 	.word	0x000076a0

00001f8c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1f8c:	4901      	ldr	r1, [pc, #4]	; (1f94 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1f8e:	2210      	movs	r2, #16
	str	r2, [r1]
    1f90:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1f92:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1f94:	e000ed10 	.word	0xe000ed10

00001f98 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1f98:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1f9a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1f9c:	f380 8811 	msr	BASEPRI, r0
	isb
    1fa0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1fa4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1fa8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1faa:	b662      	cpsie	i
	isb
    1fac:	f3bf 8f6f 	isb	sy

	bx	lr
    1fb0:	4770      	bx	lr
    1fb2:	bf00      	nop

00001fb4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1fb4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1fb6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1fb8:	f381 8811 	msr	BASEPRI, r1

	wfe
    1fbc:	bf20      	wfe

	msr	BASEPRI, r0
    1fbe:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1fc2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1fc4:	4770      	bx	lr
    1fc6:	bf00      	nop

00001fc8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1fc8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1fca:	2b00      	cmp	r3, #0
    1fcc:	db08      	blt.n	1fe0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1fce:	2201      	movs	r2, #1
    1fd0:	f000 001f 	and.w	r0, r0, #31
    1fd4:	fa02 f000 	lsl.w	r0, r2, r0
    1fd8:	095b      	lsrs	r3, r3, #5
    1fda:	4a02      	ldr	r2, [pc, #8]	; (1fe4 <arch_irq_enable+0x1c>)
    1fdc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1fe0:	4770      	bx	lr
    1fe2:	bf00      	nop
    1fe4:	e000e100 	.word	0xe000e100

00001fe8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1fe8:	4b05      	ldr	r3, [pc, #20]	; (2000 <arch_irq_is_enabled+0x18>)
    1fea:	0942      	lsrs	r2, r0, #5
    1fec:	f000 001f 	and.w	r0, r0, #31
    1ff0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1ff4:	2301      	movs	r3, #1
    1ff6:	fa03 f000 	lsl.w	r0, r3, r0
}
    1ffa:	4010      	ands	r0, r2
    1ffc:	4770      	bx	lr
    1ffe:	bf00      	nop
    2000:	e000e100 	.word	0xe000e100

00002004 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2004:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2006:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2008:	bfa8      	it	ge
    200a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    200e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2012:	bfb8      	it	lt
    2014:	4b06      	ldrlt	r3, [pc, #24]	; (2030 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2016:	ea4f 1141 	mov.w	r1, r1, lsl #5
    201a:	bfac      	ite	ge
    201c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2020:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2024:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2026:	bfb4      	ite	lt
    2028:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    202a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    202e:	4770      	bx	lr
    2030:	e000ed14 	.word	0xe000ed14

00002034 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2034:	bf30      	wfi
    b z_SysNmiOnReset
    2036:	f7ff bffd 	b.w	2034 <z_SysNmiOnReset>
    203a:	bf00      	nop

0000203c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    203c:	4a0b      	ldr	r2, [pc, #44]	; (206c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    203e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2040:	4b0b      	ldr	r3, [pc, #44]	; (2070 <z_arm_prep_c+0x34>)
    2042:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2046:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2048:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    204c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2050:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2054:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    205c:	f002 fe3c 	bl	4cd8 <z_bss_zero>
	z_data_copy();
    2060:	f003 fc5a 	bl	5918 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2064:	f000 f9d0 	bl	2408 <z_arm_interrupt_init>
	z_cstart();
    2068:	f002 fe7a 	bl	4d60 <z_cstart>
    206c:	00000000 	.word	0x00000000
    2070:	e000ed00 	.word	0xe000ed00

00002074 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2074:	4a09      	ldr	r2, [pc, #36]	; (209c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2076:	490a      	ldr	r1, [pc, #40]	; (20a0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2078:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    207a:	6809      	ldr	r1, [r1, #0]
    207c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    207e:	4909      	ldr	r1, [pc, #36]	; (20a4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2080:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2082:	684b      	ldr	r3, [r1, #4]
    2084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2088:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    208a:	2300      	movs	r3, #0
    208c:	f383 8811 	msr	BASEPRI, r3
    2090:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2094:	6893      	ldr	r3, [r2, #8]
}
    2096:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2098:	4770      	bx	lr
    209a:	bf00      	nop
    209c:	20000e70 	.word	0x20000e70
    20a0:	00007868 	.word	0x00007868
    20a4:	e000ed00 	.word	0xe000ed00

000020a8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    20a8:	4912      	ldr	r1, [pc, #72]	; (20f4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    20aa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    20ac:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    20b0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    20b2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    20b6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    20ba:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    20bc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    20c0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    20c4:	4f0c      	ldr	r7, [pc, #48]	; (20f8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    20c6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    20ca:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    20cc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    20ce:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    20d0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    20d2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    20d4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    20d6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    20da:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    20dc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    20de:	f000 fa4d 	bl	257c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    20e2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    20e6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    20ea:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    20ee:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    20f2:	4770      	bx	lr
    ldr r1, =_kernel
    20f4:	20000e70 	.word	0x20000e70
    ldr v4, =_SCS_ICSR
    20f8:	e000ed04 	.word	0xe000ed04

000020fc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    20fc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2100:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2102:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2106:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    210a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    210c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2110:	2902      	cmp	r1, #2
    beq _oops
    2112:	d0ff      	beq.n	2114 <_oops>

00002114 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2114:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2116:	f004 f986 	bl	6426 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    211a:	bd01      	pop	{r0, pc}

0000211c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    211c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2120:	9b00      	ldr	r3, [sp, #0]
    2122:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2126:	490a      	ldr	r1, [pc, #40]	; (2150 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2128:	9b01      	ldr	r3, [sp, #4]
    212a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    212e:	9b02      	ldr	r3, [sp, #8]
    2130:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2134:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2138:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    213c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2140:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2144:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2146:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2148:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    214a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    214c:	4770      	bx	lr
    214e:	bf00      	nop
    2150:	000062ef 	.word	0x000062ef

00002154 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2154:	4a09      	ldr	r2, [pc, #36]	; (217c <z_check_thread_stack_fail+0x28>)
{
    2156:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2158:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    215a:	b170      	cbz	r0, 217a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    215c:	f113 0f16 	cmn.w	r3, #22
    2160:	6e40      	ldr	r0, [r0, #100]	; 0x64
    2162:	d005      	beq.n	2170 <z_check_thread_stack_fail+0x1c>
    2164:	f1a0 0220 	sub.w	r2, r0, #32
    2168:	429a      	cmp	r2, r3
    216a:	d805      	bhi.n	2178 <z_check_thread_stack_fail+0x24>
    216c:	4283      	cmp	r3, r0
    216e:	d203      	bcs.n	2178 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2170:	4281      	cmp	r1, r0
    2172:	bf28      	it	cs
    2174:	2000      	movcs	r0, #0
    2176:	4770      	bx	lr
    2178:	2000      	movs	r0, #0
}
    217a:	4770      	bx	lr
    217c:	20000e70 	.word	0x20000e70

00002180 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2180:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2182:	4b09      	ldr	r3, [pc, #36]	; (21a8 <arch_switch_to_main_thread+0x28>)
    2184:	6098      	str	r0, [r3, #8]
{
    2186:	460d      	mov	r5, r1
    2188:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    218a:	f000 f9f7 	bl	257c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    218e:	4620      	mov	r0, r4
    2190:	f385 8809 	msr	PSP, r5
    2194:	2100      	movs	r1, #0
    2196:	b663      	cpsie	if
    2198:	f381 8811 	msr	BASEPRI, r1
    219c:	f3bf 8f6f 	isb	sy
    21a0:	2200      	movs	r2, #0
    21a2:	2300      	movs	r3, #0
    21a4:	f004 f8a3 	bl	62ee <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    21a8:	20000e70 	.word	0x20000e70

000021ac <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    21ac:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    21ae:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    21b0:	4a0b      	ldr	r2, [pc, #44]	; (21e0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    21b2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    21b4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    21b6:	bf1e      	ittt	ne
	movne	r1, #0
    21b8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    21ba:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    21bc:	f004 ffb4 	blne	7128 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    21c0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    21c2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    21c6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    21ca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    21ce:	4905      	ldr	r1, [pc, #20]	; (21e4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    21d0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    21d2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    21d4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    21d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    21da:	4903      	ldr	r1, [pc, #12]	; (21e8 <_isr_wrapper+0x3c>)
	bx r1
    21dc:	4708      	bx	r1
    21de:	0000      	.short	0x0000
	ldr r2, =_kernel
    21e0:	20000e70 	.word	0x20000e70
	ldr r1, =_sw_isr_table
    21e4:	000074cc 	.word	0x000074cc
	ldr r1, =z_arm_int_exit
    21e8:	000021ed 	.word	0x000021ed

000021ec <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    21ec:	4b04      	ldr	r3, [pc, #16]	; (2200 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    21ee:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    21f0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    21f2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    21f4:	d003      	beq.n	21fe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    21f6:	4903      	ldr	r1, [pc, #12]	; (2204 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    21f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    21fc:	600a      	str	r2, [r1, #0]

000021fe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    21fe:	4770      	bx	lr
	ldr r3, =_kernel
    2200:	20000e70 	.word	0x20000e70
	ldr r1, =_SCS_ICSR
    2204:	e000ed04 	.word	0xe000ed04

00002208 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2208:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    220a:	4b1c      	ldr	r3, [pc, #112]	; (227c <mem_manage_fault+0x74>)
{
    220c:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    220e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    2214:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2216:	0790      	lsls	r0, r2, #30
    2218:	d520      	bpl.n	225c <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    221a:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    221c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    221e:	0612      	lsls	r2, r2, #24
    2220:	d51c      	bpl.n	225c <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    2222:	b119      	cbz	r1, 222c <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    222a:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    222c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    222e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2232:	06d2      	lsls	r2, r2, #27
    2234:	d415      	bmi.n	2262 <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2238:	079b      	lsls	r3, r3, #30
    223a:	d412      	bmi.n	2262 <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    223c:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    223e:	4b0f      	ldr	r3, [pc, #60]	; (227c <mem_manage_fault+0x74>)
    2240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2242:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2244:	bf42      	ittt	mi
    2246:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    2248:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    224c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    224e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2250:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2254:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2256:	2300      	movs	r3, #0
    2258:	7023      	strb	r3, [r4, #0]

	return reason;
}
    225a:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    225c:	f06f 0015 	mvn.w	r0, #21
    2260:	e7e4      	b.n	222c <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2262:	4b06      	ldr	r3, [pc, #24]	; (227c <mem_manage_fault+0x74>)
    2264:	685b      	ldr	r3, [r3, #4]
    2266:	0519      	lsls	r1, r3, #20
    2268:	d5e8      	bpl.n	223c <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    226a:	4629      	mov	r1, r5
    226c:	f7ff ff72 	bl	2154 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2270:	2800      	cmp	r0, #0
    2272:	d0e3      	beq.n	223c <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2274:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2278:	2002      	movs	r0, #2
    227a:	e7e0      	b.n	223e <mem_manage_fault+0x36>
    227c:	e000ed00 	.word	0xe000ed00

00002280 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2280:	4b0d      	ldr	r3, [pc, #52]	; (22b8 <bus_fault.constprop.0+0x38>)
    2282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2288:	0592      	lsls	r2, r2, #22
    228a:	d508      	bpl.n	229e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    228c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    228e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2290:	0412      	lsls	r2, r2, #16
    2292:	d504      	bpl.n	229e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2294:	b118      	cbz	r0, 229e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2298:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    229c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    229e:	4b06      	ldr	r3, [pc, #24]	; (22b8 <bus_fault.constprop.0+0x38>)
    22a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    22a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    22a4:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    22a6:	bf58      	it	pl
    22a8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    22aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    22ac:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    22ae:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    22b2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    22b4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    22b6:	4770      	bx	lr
    22b8:	e000ed00 	.word	0xe000ed00

000022bc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    22bc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    22be:	4b48      	ldr	r3, [pc, #288]	; (23e0 <z_arm_fault+0x124>)
    22c0:	685b      	ldr	r3, [r3, #4]
{
    22c2:	b08a      	sub	sp, #40	; 0x28
    22c4:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    22c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    22ca:	2600      	movs	r6, #0
    22cc:	f386 8811 	msr	BASEPRI, r6
    22d0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    22d4:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    22d8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    22dc:	d111      	bne.n	2302 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    22de:	f002 010c 	and.w	r1, r2, #12
    22e2:	2908      	cmp	r1, #8
    22e4:	d00d      	beq.n	2302 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    22e6:	0711      	lsls	r1, r2, #28
    22e8:	d401      	bmi.n	22ee <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    22ea:	4605      	mov	r5, r0
			*nested_exc = true;
    22ec:	2601      	movs	r6, #1
	*recoverable = false;
    22ee:	2200      	movs	r2, #0
	switch (fault) {
    22f0:	3b03      	subs	r3, #3
	*recoverable = false;
    22f2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    22f6:	2b03      	cmp	r3, #3
    22f8:	d86b      	bhi.n	23d2 <z_arm_fault+0x116>
    22fa:	e8df f003 	tbb	[pc, r3]
    22fe:	5504      	.short	0x5504
    2300:	5d59      	.short	0x5d59
		return NULL;
    2302:	4635      	mov	r5, r6
    2304:	e7f3      	b.n	22ee <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2306:	4b36      	ldr	r3, [pc, #216]	; (23e0 <z_arm_fault+0x124>)
    2308:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    230a:	f014 0402 	ands.w	r4, r4, #2
    230e:	d160      	bne.n	23d2 <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2312:	2a00      	cmp	r2, #0
    2314:	db15      	blt.n	2342 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2318:	0052      	lsls	r2, r2, #1
    231a:	d512      	bpl.n	2342 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    231c:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    231e:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    2322:	f64d 7202 	movw	r2, #57090	; 0xdf02
    2326:	4291      	cmp	r1, r2
    2328:	d00a      	beq.n	2340 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    232a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    232e:	b30a      	cbz	r2, 2374 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    2330:	f10d 0207 	add.w	r2, sp, #7
    2334:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2336:	4628      	mov	r0, r5
    2338:	f7ff ff66 	bl	2208 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    233c:	4604      	mov	r4, r0
		break;
    233e:	e000      	b.n	2342 <z_arm_fault+0x86>
			reason = esf->basic.r0;
    2340:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2342:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2346:	b99b      	cbnz	r3, 2370 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2348:	2220      	movs	r2, #32
    234a:	4629      	mov	r1, r5
    234c:	a802      	add	r0, sp, #8
    234e:	f004 f893 	bl	6478 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2352:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2354:	2e00      	cmp	r6, #0
    2356:	d03e      	beq.n	23d6 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2358:	f3c3 0208 	ubfx	r2, r3, #0, #9
    235c:	b922      	cbnz	r2, 2368 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    235e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2362:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2366:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2368:	a902      	add	r1, sp, #8
    236a:	4620      	mov	r0, r4
    236c:	f004 f859 	bl	6422 <z_arm_fatal_error>
}
    2370:	b00a      	add	sp, #40	; 0x28
    2372:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    2374:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    2378:	b12a      	cbz	r2, 2386 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    237a:	f10d 0107 	add.w	r1, sp, #7
    237e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2380:	f7ff ff7e 	bl	2280 <bus_fault.constprop.0>
    2384:	e7da      	b.n	233c <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    2386:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    2388:	b292      	uxth	r2, r2
    238a:	2a00      	cmp	r2, #0
    238c:	d0d9      	beq.n	2342 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    238e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2396:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    239a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    239c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    23a0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    23a4:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    23a6:	e7cc      	b.n	2342 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    23a8:	f10d 0207 	add.w	r2, sp, #7
    23ac:	2100      	movs	r1, #0
    23ae:	e7c2      	b.n	2336 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    23b0:	f10d 0107 	add.w	r1, sp, #7
    23b4:	2000      	movs	r0, #0
    23b6:	e7e3      	b.n	2380 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    23b8:	4b09      	ldr	r3, [pc, #36]	; (23e0 <z_arm_fault+0x124>)
    23ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    23bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    23be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    23c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    23c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    23c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    23c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    23c8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    23cc:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    23d0:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    23d2:	2400      	movs	r4, #0
    23d4:	e7b5      	b.n	2342 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    23d6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    23da:	f023 0301 	bic.w	r3, r3, #1
    23de:	e7c2      	b.n	2366 <z_arm_fault+0xaa>
    23e0:	e000ed00 	.word	0xe000ed00

000023e4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    23e4:	4a02      	ldr	r2, [pc, #8]	; (23f0 <z_arm_fault_init+0xc>)
    23e6:	6953      	ldr	r3, [r2, #20]
    23e8:	f043 0310 	orr.w	r3, r3, #16
    23ec:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    23ee:	4770      	bx	lr
    23f0:	e000ed00 	.word	0xe000ed00

000023f4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    23f4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    23f8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    23fc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    23fe:	4672      	mov	r2, lr
	bl z_arm_fault
    2400:	f7ff ff5c 	bl	22bc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2404:	bd01      	pop	{r0, pc}
    2406:	bf00      	nop

00002408 <z_arm_interrupt_init>:
    2408:	4804      	ldr	r0, [pc, #16]	; (241c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    240a:	2300      	movs	r3, #0
    240c:	2120      	movs	r1, #32
    240e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2410:	3301      	adds	r3, #1
    2412:	2b30      	cmp	r3, #48	; 0x30
    2414:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2418:	d1f9      	bne.n	240e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    241a:	4770      	bx	lr
    241c:	e000e100 	.word	0xe000e100

00002420 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2420:	2000      	movs	r0, #0
    msr CONTROL, r0
    2422:	f380 8814 	msr	CONTROL, r0
    isb
    2426:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    242a:	f004 ffcd 	bl	73c8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    242e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2430:	490d      	ldr	r1, [pc, #52]	; (2468 <__start+0x48>)
    str r0, [r1]
    2432:	6008      	str	r0, [r1, #0]
    dsb
    2434:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2438:	480c      	ldr	r0, [pc, #48]	; (246c <__start+0x4c>)
    msr msp, r0
    243a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    243e:	f000 f82b 	bl	2498 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2442:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2444:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2448:	4809      	ldr	r0, [pc, #36]	; (2470 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    244a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    244e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2450:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2454:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2458:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    245a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    245c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2460:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2464:	f7ff fdea 	bl	203c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2468:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    246c:	20002d60 	.word	0x20002d60
    ldr r0, =z_interrupt_stacks
    2470:	20002ee0 	.word	0x20002ee0

00002474 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2474:	4907      	ldr	r1, [pc, #28]	; (2494 <z_arm_clear_arm_mpu_config+0x20>)
    2476:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    247a:	2300      	movs	r3, #0
	int num_regions =
    247c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2480:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2482:	4293      	cmp	r3, r2
    2484:	d100      	bne.n	2488 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2486:	4770      	bx	lr
  MPU->RNR = rnr;
    2488:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    248c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2490:	3301      	adds	r3, #1
    2492:	e7f6      	b.n	2482 <z_arm_clear_arm_mpu_config+0xe>
    2494:	e000ed00 	.word	0xe000ed00

00002498 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2498:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    249a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    249c:	2300      	movs	r3, #0
    249e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    24a2:	f7ff ffe7 	bl	2474 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    24a6:	4b14      	ldr	r3, [pc, #80]	; (24f8 <z_arm_init_arch_hw_at_boot+0x60>)
    24a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    24ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    24b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    24b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    24b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    24bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    24c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    24c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    24c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    24cc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    24d0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    24d4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    24d8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    24dc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    24e0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    24e4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    24e8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    24ec:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    24ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    24f2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    24f6:	bd08      	pop	{r3, pc}
    24f8:	e000e100 	.word	0xe000e100

000024fc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    24fc:	4b08      	ldr	r3, [pc, #32]	; (2520 <z_impl_k_thread_abort+0x24>)
    24fe:	689b      	ldr	r3, [r3, #8]
    2500:	4283      	cmp	r3, r0
    2502:	d10b      	bne.n	251c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2504:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2508:	b143      	cbz	r3, 251c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    250a:	4b06      	ldr	r3, [pc, #24]	; (2524 <z_impl_k_thread_abort+0x28>)
    250c:	685a      	ldr	r2, [r3, #4]
    250e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2512:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2516:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    251a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    251c:	f003 b9aa 	b.w	5874 <z_thread_abort>
    2520:	20000e70 	.word	0x20000e70
    2524:	e000ed00 	.word	0xe000ed00

00002528 <arch_timing_init>:
 * @return 0
 */
static inline int z_arm_dwt_init(void)
{
	/* Enable tracing */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    2528:	4a07      	ldr	r2, [pc, #28]	; (2548 <arch_timing_init+0x20>)
    252a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    252e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2532:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 * @return 0
 */
static inline int z_arm_dwt_init_cycle_counter(void)
{
	/* Clear and enable the cycle counter */
	DWT->CYCCNT = 0;
    2536:	4b05      	ldr	r3, [pc, #20]	; (254c <arch_timing_init+0x24>)
    2538:	2200      	movs	r2, #0
    253a:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    253c:	681a      	ldr	r2, [r3, #0]
    253e:	f042 0201 	orr.w	r2, r2, #1
    2542:	601a      	str	r2, [r3, #0]

void arch_timing_init(void)
{
	z_arm_dwt_init();
	z_arm_dwt_init_cycle_counter();
}
    2544:	4770      	bx	lr
    2546:	bf00      	nop
    2548:	e000ed00 	.word	0xe000ed00
    254c:	e0001000 	.word	0xe0001000

00002550 <arch_timing_start>:
 *
 * This routine starts the cycle counter and resets its value to zero.
 */
static inline void z_arm_dwt_cycle_count_start(void)
{
	DWT->CYCCNT = 0;
    2550:	4b03      	ldr	r3, [pc, #12]	; (2560 <arch_timing_start+0x10>)
    2552:	2200      	movs	r2, #0
    2554:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    2556:	681a      	ldr	r2, [r3, #0]
    2558:	f042 0201 	orr.w	r2, r2, #1
    255c:	601a      	str	r2, [r3, #0]

void arch_timing_start(void)
{
	z_arm_dwt_cycle_count_start();
}
    255e:	4770      	bx	lr
    2560:	e0001000 	.word	0xe0001000

00002564 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2564:	4b02      	ldr	r3, [pc, #8]	; (2570 <z_arm_configure_static_mpu_regions+0xc>)
    2566:	4a03      	ldr	r2, [pc, #12]	; (2574 <z_arm_configure_static_mpu_regions+0x10>)
    2568:	4803      	ldr	r0, [pc, #12]	; (2578 <z_arm_configure_static_mpu_regions+0x14>)
    256a:	2101      	movs	r1, #1
    256c:	f000 b86e 	b.w	264c <arm_core_mpu_configure_static_mpu_regions>
    2570:	20040000 	.word	0x20040000
    2574:	20000000 	.word	0x20000000
    2578:	000076c4 	.word	0x000076c4

0000257c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    257c:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    257e:	4b05      	ldr	r3, [pc, #20]	; (2594 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2580:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2582:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2584:	4a04      	ldr	r2, [pc, #16]	; (2598 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2586:	2120      	movs	r1, #32
    2588:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    258c:	4618      	mov	r0, r3
    258e:	2101      	movs	r1, #1
    2590:	f000 b866 	b.w	2660 <arm_core_mpu_configure_dynamic_mpu_regions>
    2594:	20000ce4 	.word	0x20000ce4
    2598:	150b0000 	.word	0x150b0000

0000259c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    259c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    259e:	4f1f      	ldr	r7, [pc, #124]	; (261c <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    25a0:	2600      	movs	r6, #0
    25a2:	428e      	cmp	r6, r1
    25a4:	db01      	blt.n	25aa <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    25a6:	4610      	mov	r0, r2
    25a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    25aa:	6844      	ldr	r4, [r0, #4]
    25ac:	b39c      	cbz	r4, 2616 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    25ae:	b153      	cbz	r3, 25c6 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    25b0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    25b4:	ea14 0f0c 	tst.w	r4, ip
    25b8:	d118      	bne.n	25ec <mpu_configure_regions+0x50>
		&&
    25ba:	2c1f      	cmp	r4, #31
    25bc:	d916      	bls.n	25ec <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    25be:	6805      	ldr	r5, [r0, #0]
		&&
    25c0:	ea1c 0f05 	tst.w	ip, r5
    25c4:	d112      	bne.n	25ec <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    25c6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    25c8:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    25ca:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    25ce:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    25d0:	d90f      	bls.n	25f2 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    25d2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    25d6:	d80e      	bhi.n	25f6 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    25d8:	3c01      	subs	r4, #1
    25da:	fab4 f484 	clz	r4, r4
    25de:	f1c4 041f 	rsb	r4, r4, #31
    25e2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    25e4:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    25e6:	ea4c 0404 	orr.w	r4, ip, r4
    25ea:	d906      	bls.n	25fa <mpu_configure_regions+0x5e>
			return -EINVAL;
    25ec:	f06f 0215 	mvn.w	r2, #21
    25f0:	e7d9      	b.n	25a6 <mpu_configure_regions+0xa>
		return REGION_32B;
    25f2:	2408      	movs	r4, #8
    25f4:	e7f6      	b.n	25e4 <mpu_configure_regions+0x48>
		return REGION_4G;
    25f6:	243e      	movs	r4, #62	; 0x3e
    25f8:	e7f4      	b.n	25e4 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    25fa:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    25fe:	4315      	orrs	r5, r2
    2600:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2604:	f044 0401 	orr.w	r4, r4, #1
    2608:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    260c:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    2610:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2612:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    2616:	3601      	adds	r6, #1
    2618:	300c      	adds	r0, #12
    261a:	e7c2      	b.n	25a2 <mpu_configure_regions+0x6>
    261c:	e000ed00 	.word	0xe000ed00

00002620 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2620:	4b04      	ldr	r3, [pc, #16]	; (2634 <arm_core_mpu_enable+0x14>)
    2622:	2205      	movs	r2, #5
    2624:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2628:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    262c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2630:	4770      	bx	lr
    2632:	bf00      	nop
    2634:	e000ed00 	.word	0xe000ed00

00002638 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2638:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    263c:	4b02      	ldr	r3, [pc, #8]	; (2648 <arm_core_mpu_disable+0x10>)
    263e:	2200      	movs	r2, #0
    2640:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2644:	4770      	bx	lr
    2646:	bf00      	nop
    2648:	e000ed00 	.word	0xe000ed00

0000264c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    264c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    264e:	4c03      	ldr	r4, [pc, #12]	; (265c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2650:	2301      	movs	r3, #1
    2652:	7822      	ldrb	r2, [r4, #0]
    2654:	f7ff ffa2 	bl	259c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2658:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    265a:	bd10      	pop	{r4, pc}
    265c:	20001097 	.word	0x20001097

00002660 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2660:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2662:	4a09      	ldr	r2, [pc, #36]	; (2688 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    2664:	2300      	movs	r3, #0
    2666:	7812      	ldrb	r2, [r2, #0]
    2668:	f7ff ff98 	bl	259c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    266c:	f110 0f16 	cmn.w	r0, #22
    2670:	d002      	beq.n	2678 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    2672:	4a06      	ldr	r2, [pc, #24]	; (268c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2674:	2807      	cmp	r0, #7
    2676:	dd00      	ble.n	267a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2678:	bd08      	pop	{r3, pc}
    267a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    267e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    2682:	3001      	adds	r0, #1
    2684:	e7f6      	b.n	2674 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    2686:	bf00      	nop
    2688:	20001097 	.word	0x20001097
    268c:	e000ed00 	.word	0xe000ed00

00002690 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2690:	4914      	ldr	r1, [pc, #80]	; (26e4 <z_arm_mpu_init+0x54>)
    2692:	6808      	ldr	r0, [r1, #0]
    2694:	2808      	cmp	r0, #8
{
    2696:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2698:	d821      	bhi.n	26de <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    269a:	f7ff ffcd 	bl	2638 <arm_core_mpu_disable>
    269e:	4c12      	ldr	r4, [pc, #72]	; (26e8 <z_arm_mpu_init+0x58>)
    26a0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    26a2:	2200      	movs	r2, #0
    26a4:	4290      	cmp	r0, r2
    26a6:	f101 010c 	add.w	r1, r1, #12
    26aa:	d105      	bne.n	26b8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    26ac:	4b0f      	ldr	r3, [pc, #60]	; (26ec <z_arm_mpu_init+0x5c>)
    26ae:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    26b0:	f7ff ffb6 	bl	2620 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    26b4:	2000      	movs	r0, #0
}
    26b6:	bd10      	pop	{r4, pc}
    26b8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    26bc:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    26c0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    26c4:	4313      	orrs	r3, r2
    26c6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    26ca:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    26ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
    26d2:	f043 0301 	orr.w	r3, r3, #1
    26d6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    26da:	3201      	adds	r2, #1
    26dc:	e7e2      	b.n	26a4 <z_arm_mpu_init+0x14>
		return -1;
    26de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    26e2:	e7e8      	b.n	26b6 <z_arm_mpu_init+0x26>
    26e4:	000076d0 	.word	0x000076d0
    26e8:	e000ed00 	.word	0xe000ed00
    26ec:	20001097 	.word	0x20001097

000026f0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    26f0:	4b01      	ldr	r3, [pc, #4]	; (26f8 <__stdout_hook_install+0x8>)
    26f2:	6018      	str	r0, [r3, #0]
}
    26f4:	4770      	bx	lr
    26f6:	bf00      	nop
    26f8:	2000004c 	.word	0x2000004c

000026fc <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    26fc:	b510      	push	{r4, lr}
	__asm__ volatile(
    26fe:	f04f 0320 	mov.w	r3, #32
    2702:	f3ef 8011 	mrs	r0, BASEPRI
    2706:	f383 8812 	msr	BASEPRI_MAX, r3
    270a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    270e:	4a11      	ldr	r2, [pc, #68]	; (2754 <nordicsemi_nrf52_init+0x58>)
    2710:	2301      	movs	r3, #1
    2712:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    271a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    271e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2722:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    2726:	2c08      	cmp	r4, #8
    2728:	d108      	bne.n	273c <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    272a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    272e:	2905      	cmp	r1, #5
    2730:	d804      	bhi.n	273c <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2732:	4c09      	ldr	r4, [pc, #36]	; (2758 <nordicsemi_nrf52_init+0x5c>)
    2734:	5c61      	ldrb	r1, [r4, r1]
    2736:	b109      	cbz	r1, 273c <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2738:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    273c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2740:	2201      	movs	r2, #1
    2742:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2746:	f380 8811 	msr	BASEPRI, r0
    274a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    274e:	2000      	movs	r0, #0
    2750:	bd10      	pop	{r4, pc}
    2752:	bf00      	nop
    2754:	4001e000 	.word	0x4001e000
    2758:	00007b4c 	.word	0x00007b4c

0000275c <sys_arch_reboot>:
    *p_gpregret = val;
    275c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2760:	b2c0      	uxtb	r0, r0
    2762:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2766:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    276a:	4905      	ldr	r1, [pc, #20]	; (2780 <sys_arch_reboot+0x24>)
    276c:	4b05      	ldr	r3, [pc, #20]	; (2784 <sys_arch_reboot+0x28>)
    276e:	68ca      	ldr	r2, [r1, #12]
    2770:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2774:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2776:	60cb      	str	r3, [r1, #12]
    2778:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    277c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    277e:	e7fd      	b.n	277c <sys_arch_reboot+0x20>
    2780:	e000ed00 	.word	0xe000ed00
    2784:	05fa0004 	.word	0x05fa0004

00002788 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2788:	b120      	cbz	r0, 2794 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    278a:	4b03      	ldr	r3, [pc, #12]	; (2798 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    278c:	0180      	lsls	r0, r0, #6
    278e:	f043 0301 	orr.w	r3, r3, #1
    2792:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2794:	4770      	bx	lr
    2796:	bf00      	nop
    2798:	00007670 	.word	0x00007670

0000279c <timing_init>:

static bool has_inited;
static atomic_val_t started_ref;

void timing_init(void)
{
    279c:	b510      	push	{r4, lr}
	if (has_inited) {
    279e:	4c04      	ldr	r4, [pc, #16]	; (27b0 <timing_init+0x14>)
    27a0:	7823      	ldrb	r3, [r4, #0]
    27a2:	b91b      	cbnz	r3, 27ac <timing_init+0x10>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_init();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_init();
#else
	arch_timing_init();
    27a4:	f7ff fec0 	bl	2528 <arch_timing_init>
#endif

	has_inited = true;
    27a8:	2301      	movs	r3, #1
    27aa:	7023      	strb	r3, [r4, #0]
}
    27ac:	bd10      	pop	{r4, pc}
    27ae:	bf00      	nop
    27b0:	20001098 	.word	0x20001098

000027b4 <timing_start>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    27b4:	4b07      	ldr	r3, [pc, #28]	; (27d4 <timing_start+0x20>)
    27b6:	f3bf 8f5b 	dmb	ish
    27ba:	e853 2f00 	ldrex	r2, [r3]
    27be:	1c51      	adds	r1, r2, #1
    27c0:	e843 1000 	strex	r0, r1, [r3]
    27c4:	2800      	cmp	r0, #0
    27c6:	d1f8      	bne.n	27ba <timing_start+0x6>
    27c8:	f3bf 8f5b 	dmb	ish

void timing_start(void)
{
	if (atomic_inc(&started_ref) != 0) {
    27cc:	b90a      	cbnz	r2, 27d2 <timing_start+0x1e>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_start();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_start();
#else
	arch_timing_start();
    27ce:	f7ff bebf 	b.w	2550 <arch_timing_start>
#endif
}
    27d2:	4770      	bx	lr
    27d4:	20000cf0 	.word	0x20000cf0

000027d8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    27d8:	4b08      	ldr	r3, [pc, #32]	; (27fc <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    27da:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    27dc:	1ac3      	subs	r3, r0, r3
{
    27de:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    27e0:	4907      	ldr	r1, [pc, #28]	; (2800 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    27e2:	109b      	asrs	r3, r3, #2
{
    27e4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    27e6:	4359      	muls	r1, r3
    27e8:	4806      	ldr	r0, [pc, #24]	; (2804 <onoff_stop+0x2c>)
    27ea:	2240      	movs	r2, #64	; 0x40
    27ec:	f003 fe89 	bl	6502 <stop>
	notify(mgr, res);
    27f0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    27f2:	4601      	mov	r1, r0
	notify(mgr, res);
    27f4:	4620      	mov	r0, r4
}
    27f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    27fa:	4718      	bx	r3
    27fc:	20000d04 	.word	0x20000d04
    2800:	b6db6db7 	.word	0xb6db6db7
    2804:	0000743c 	.word	0x0000743c

00002808 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2808:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    280a:	4c0c      	ldr	r4, [pc, #48]	; (283c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    280c:	4a0c      	ldr	r2, [pc, #48]	; (2840 <onoff_start+0x38>)
    280e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    2810:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2812:	9300      	str	r3, [sp, #0]
{
    2814:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2816:	460b      	mov	r3, r1
    2818:	490a      	ldr	r1, [pc, #40]	; (2844 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    281a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    281c:	4361      	muls	r1, r4
{
    281e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2820:	4809      	ldr	r0, [pc, #36]	; (2848 <onoff_start+0x40>)
    2822:	f003 fe9a 	bl	655a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2826:	1e01      	subs	r1, r0, #0
    2828:	da05      	bge.n	2836 <onoff_start+0x2e>
		notify(mgr, err);
    282a:	4630      	mov	r0, r6
    282c:	462b      	mov	r3, r5
	}
}
    282e:	b002      	add	sp, #8
    2830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2834:	4718      	bx	r3
}
    2836:	b002      	add	sp, #8
    2838:	bd70      	pop	{r4, r5, r6, pc}
    283a:	bf00      	nop
    283c:	20000d04 	.word	0x20000d04
    2840:	000065cb 	.word	0x000065cb
    2844:	b6db6db7 	.word	0xb6db6db7
    2848:	0000743c 	.word	0x0000743c

0000284c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    284c:	2200      	movs	r2, #0
{
    284e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2850:	2101      	movs	r1, #1
{
    2852:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2854:	4610      	mov	r0, r2
    2856:	f7ff fbd5 	bl	2004 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    285a:	480f      	ldr	r0, [pc, #60]	; (2898 <clk_init+0x4c>)
    285c:	f001 fb78 	bl	3f50 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2860:	4b0e      	ldr	r3, [pc, #56]	; (289c <clk_init+0x50>)
    2862:	4298      	cmp	r0, r3
    2864:	d115      	bne.n	2892 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2866:	f004 fa8c 	bl	6d82 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    286a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    286c:	490c      	ldr	r1, [pc, #48]	; (28a0 <clk_init+0x54>)
    286e:	4630      	mov	r0, r6
    2870:	f003 fce1 	bl	6236 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2874:	2800      	cmp	r0, #0
    2876:	db0b      	blt.n	2890 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    2878:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    287a:	4909      	ldr	r1, [pc, #36]	; (28a0 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    287c:	2501      	movs	r5, #1
    287e:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2880:	f104 001c 	add.w	r0, r4, #28
    2884:	f003 fcd7 	bl	6236 <onoff_manager_init>
		if (err < 0) {
    2888:	2800      	cmp	r0, #0
    288a:	db01      	blt.n	2890 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    288c:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    288e:	2000      	movs	r0, #0
}
    2890:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2892:	f06f 0004 	mvn.w	r0, #4
    2896:	e7fb      	b.n	2890 <clk_init+0x44>
    2898:	000028d9 	.word	0x000028d9
    289c:	0bad0000 	.word	0x0bad0000
    28a0:	00007718 	.word	0x00007718

000028a4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    28a4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    28a6:	230c      	movs	r3, #12
    28a8:	4809      	ldr	r0, [pc, #36]	; (28d0 <clkstarted_handle.constprop.0+0x2c>)
    28aa:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    28ac:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    28ae:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    28b0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    28b4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    28b6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    28b8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    28ba:	4418      	add	r0, r3
    28bc:	f003 fe0e 	bl	64dc <set_on_state>
	if (callback) {
    28c0:	b12d      	cbz	r5, 28ce <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    28c2:	4632      	mov	r2, r6
    28c4:	462b      	mov	r3, r5
    28c6:	4803      	ldr	r0, [pc, #12]	; (28d4 <clkstarted_handle.constprop.0+0x30>)
}
    28c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    28cc:	4718      	bx	r3
}
    28ce:	bd70      	pop	{r4, r5, r6, pc}
    28d0:	20000d04 	.word	0x20000d04
    28d4:	0000743c 	.word	0x0000743c

000028d8 <clock_event_handler>:
	switch (event) {
    28d8:	b110      	cbz	r0, 28e0 <clock_event_handler+0x8>
    28da:	2801      	cmp	r0, #1
    28dc:	d004      	beq.n	28e8 <clock_event_handler+0x10>
    28de:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    28e0:	4b03      	ldr	r3, [pc, #12]	; (28f0 <clock_event_handler+0x18>)
    28e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    28e4:	075b      	lsls	r3, r3, #29
    28e6:	d101      	bne.n	28ec <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    28e8:	f7ff bfdc 	b.w	28a4 <clkstarted_handle.constprop.0>
}
    28ec:	4770      	bx	lr
    28ee:	bf00      	nop
    28f0:	20000d04 	.word	0x20000d04

000028f4 <generic_hfclk_start>:
{
    28f4:	b508      	push	{r3, lr}
	__asm__ volatile(
    28f6:	f04f 0320 	mov.w	r3, #32
    28fa:	f3ef 8111 	mrs	r1, BASEPRI
    28fe:	f383 8812 	msr	BASEPRI_MAX, r3
    2902:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2906:	4a12      	ldr	r2, [pc, #72]	; (2950 <generic_hfclk_start+0x5c>)
    2908:	6813      	ldr	r3, [r2, #0]
    290a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    290e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2912:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2914:	d00c      	beq.n	2930 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    291a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    291e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2922:	f013 0301 	ands.w	r3, r3, #1
    2926:	d003      	beq.n	2930 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2928:	480a      	ldr	r0, [pc, #40]	; (2954 <generic_hfclk_start+0x60>)
    292a:	f003 fdd7 	bl	64dc <set_on_state>
			already_started = true;
    292e:	2301      	movs	r3, #1
	__asm__ volatile(
    2930:	f381 8811 	msr	BASEPRI, r1
    2934:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2938:	b123      	cbz	r3, 2944 <generic_hfclk_start+0x50>
}
    293a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    293e:	2000      	movs	r0, #0
    2940:	f7ff bfb0 	b.w	28a4 <clkstarted_handle.constprop.0>
}
    2944:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2948:	2001      	movs	r0, #1
    294a:	f004 ba27 	b.w	6d9c <nrfx_clock_start>
    294e:	bf00      	nop
    2950:	20000d54 	.word	0x20000d54
    2954:	20000d44 	.word	0x20000d44

00002958 <api_blocking_start>:
{
    2958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    295a:	2200      	movs	r2, #0
    295c:	2301      	movs	r3, #1
    295e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2962:	4a09      	ldr	r2, [pc, #36]	; (2988 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2964:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2968:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    296a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    296e:	f003 fe25 	bl	65bc <api_start>
	if (err < 0) {
    2972:	2800      	cmp	r0, #0
    2974:	db05      	blt.n	2982 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    297a:	2300      	movs	r3, #0
    297c:	4668      	mov	r0, sp
    297e:	f002 fc59 	bl	5234 <z_impl_k_sem_take>
}
    2982:	b005      	add	sp, #20
    2984:	f85d fb04 	ldr.w	pc, [sp], #4
    2988:	000065e9 	.word	0x000065e9

0000298c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    298c:	4b09      	ldr	r3, [pc, #36]	; (29b4 <generic_hfclk_stop+0x28>)
    298e:	f3bf 8f5b 	dmb	ish
    2992:	e853 2f00 	ldrex	r2, [r3]
    2996:	f022 0102 	bic.w	r1, r2, #2
    299a:	e843 1000 	strex	r0, r1, [r3]
    299e:	2800      	cmp	r0, #0
    29a0:	d1f7      	bne.n	2992 <generic_hfclk_stop+0x6>
    29a2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    29a6:	07d3      	lsls	r3, r2, #31
    29a8:	d402      	bmi.n	29b0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    29aa:	2001      	movs	r0, #1
    29ac:	f004 ba33 	b.w	6e16 <nrfx_clock_stop>
}
    29b0:	4770      	bx	lr
    29b2:	bf00      	nop
    29b4:	20000d54 	.word	0x20000d54

000029b8 <z_nrf_clock_control_lf_on>:
{
    29b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    29bc:	4939      	ldr	r1, [pc, #228]	; (2aa4 <z_nrf_clock_control_lf_on+0xec>)
    29be:	f3bf 8f5b 	dmb	ish
    29c2:	4607      	mov	r7, r0
    29c4:	2201      	movs	r2, #1
    29c6:	e851 3f00 	ldrex	r3, [r1]
    29ca:	e841 2000 	strex	r0, r2, [r1]
    29ce:	2800      	cmp	r0, #0
    29d0:	d1f9      	bne.n	29c6 <z_nrf_clock_control_lf_on+0xe>
    29d2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    29d6:	b933      	cbnz	r3, 29e6 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    29d8:	4933      	ldr	r1, [pc, #204]	; (2aa8 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    29da:	4834      	ldr	r0, [pc, #208]	; (2aac <z_nrf_clock_control_lf_on+0xf4>)
    29dc:	604b      	str	r3, [r1, #4]
    29de:	60cb      	str	r3, [r1, #12]
    29e0:	608a      	str	r2, [r1, #8]
    29e2:	f003 fc3b 	bl	625c <onoff_request>
	switch (start_mode) {
    29e6:	1e7b      	subs	r3, r7, #1
    29e8:	2b01      	cmp	r3, #1
    29ea:	d82f      	bhi.n	2a4c <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    29ec:	2f01      	cmp	r7, #1
    29ee:	d107      	bne.n	2a00 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    29f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29f4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    29f8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    29fc:	2b01      	cmp	r3, #1
    29fe:	d025      	beq.n	2a4c <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2a00:	f004 fb8c 	bl	711c <k_is_in_isr>
    2a04:	4604      	mov	r4, r0
    2a06:	b918      	cbnz	r0, 2a10 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    2a08:	4b29      	ldr	r3, [pc, #164]	; (2ab0 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    2a0a:	781b      	ldrb	r3, [r3, #0]
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d141      	bne.n	2a94 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    2a10:	f04f 0320 	mov.w	r3, #32
    2a14:	f3ef 8611 	mrs	r6, BASEPRI
    2a18:	f383 8812 	msr	BASEPRI_MAX, r3
    2a1c:	f3bf 8f6f 	isb	sy
    2a20:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a22:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2ab4 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2a26:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2a2a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2a2e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    2a32:	03d2      	lsls	r2, r2, #15
    2a34:	d50c      	bpl.n	2a50 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2a36:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2a3a:	2b01      	cmp	r3, #1
    2a3c:	d001      	beq.n	2a42 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2a3e:	2f01      	cmp	r7, #1
    2a40:	d106      	bne.n	2a50 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    2a42:	b30c      	cbz	r4, 2a88 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    2a44:	f386 8811 	msr	BASEPRI, r6
    2a48:	f3bf 8f6f 	isb	sy
}
    2a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2a50:	b1ac      	cbz	r4, 2a7e <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2a52:	4630      	mov	r0, r6
    2a54:	f7ff faae 	bl	1fb4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2a58:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d1e4      	bne.n	2a2a <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2a60:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2a64:	2a00      	cmp	r2, #0
    2a66:	d0e0      	beq.n	2a2a <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2a68:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2a6c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2a70:	2301      	movs	r3, #1
    2a72:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    2a76:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2a7a:	60ab      	str	r3, [r5, #8]
}
    2a7c:	e7d5      	b.n	2a2a <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    2a7e:	2100      	movs	r1, #0
    2a80:	2021      	movs	r0, #33	; 0x21
    2a82:	f002 fed7 	bl	5834 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2a86:	e7e7      	b.n	2a58 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    2a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a8c:	2202      	movs	r2, #2
    2a8e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2a92:	e7db      	b.n	2a4c <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    2a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a98:	2202      	movs	r2, #2
    2a9a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2a9e:	4606      	mov	r6, r0
}
    2aa0:	e7bf      	b.n	2a22 <z_nrf_clock_control_lf_on+0x6a>
    2aa2:	bf00      	nop
    2aa4:	20000d58 	.word	0x20000d58
    2aa8:	20000cf4 	.word	0x20000cf4
    2aac:	20000d20 	.word	0x20000d20
    2ab0:	200014a9 	.word	0x200014a9
    2ab4:	e000e100 	.word	0xe000e100

00002ab8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2ab8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2aba:	4b08      	ldr	r3, [pc, #32]	; (2adc <uart_console_init+0x24>)
    2abc:	4808      	ldr	r0, [pc, #32]	; (2ae0 <uart_console_init+0x28>)
    2abe:	6018      	str	r0, [r3, #0]
    2ac0:	f004 fabf 	bl	7042 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2ac4:	b138      	cbz	r0, 2ad6 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2ac6:	4807      	ldr	r0, [pc, #28]	; (2ae4 <uart_console_init+0x2c>)
    2ac8:	f7ff fe12 	bl	26f0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2acc:	4805      	ldr	r0, [pc, #20]	; (2ae4 <uart_console_init+0x2c>)
    2ace:	f7fe f8a9 	bl	c24 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2ad2:	2000      	movs	r0, #0
}
    2ad4:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2ad6:	f06f 0012 	mvn.w	r0, #18
    2ada:	e7fb      	b.n	2ad4 <uart_console_init+0x1c>
    2adc:	20000d5c 	.word	0x20000d5c
    2ae0:	0000749c 	.word	0x0000749c
    2ae4:	00002ae9 	.word	0x00002ae9

00002ae8 <console_out>:
	if ('\n' == c) {
    2ae8:	280a      	cmp	r0, #10
{
    2aea:	b538      	push	{r3, r4, r5, lr}
    2aec:	4d07      	ldr	r5, [pc, #28]	; (2b0c <console_out+0x24>)
    2aee:	4604      	mov	r4, r0
	if ('\n' == c) {
    2af0:	d104      	bne.n	2afc <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    2af2:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    2af4:	6883      	ldr	r3, [r0, #8]
    2af6:	210d      	movs	r1, #13
    2af8:	69db      	ldr	r3, [r3, #28]
    2afa:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2afc:	6828      	ldr	r0, [r5, #0]
    2afe:	6883      	ldr	r3, [r0, #8]
    2b00:	b2e1      	uxtb	r1, r4
    2b02:	69db      	ldr	r3, [r3, #28]
    2b04:	4798      	blx	r3
}
    2b06:	4620      	mov	r0, r4
    2b08:	bd38      	pop	{r3, r4, r5, pc}
    2b0a:	bf00      	nop
    2b0c:	20000d5c 	.word	0x20000d5c

00002b10 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2b10:	b530      	push	{r4, r5, lr}
	return port->config;
    2b12:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2b14:	7b04      	ldrb	r4, [r0, #12]
    2b16:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    2b1a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2b1e:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    2b22:	b085      	sub	sp, #20
    2b24:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    2b28:	d104      	bne.n	2b34 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    2b2a:	4628      	mov	r0, r5
    2b2c:	f001 fc92 	bl	4454 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    2b30:	2000      	movs	r0, #0
    2b32:	e032      	b.n	2b9a <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2b34:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b38:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2b3c:	d12f      	bne.n	2b9e <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2b3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2b42:	bf0c      	ite	eq
    2b44:	2304      	moveq	r3, #4
    2b46:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b48:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2b4c:	6883      	ldr	r3, [r0, #8]
    2b4e:	fa23 f101 	lsr.w	r1, r3, r1
    2b52:	07c9      	lsls	r1, r1, #31
    2b54:	d42f      	bmi.n	2bb6 <gpio_nrfx_pin_interrupt_configure+0xa6>
    2b56:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2b5a:	d12c      	bne.n	2bb6 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    2b5c:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    2b5e:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    2b60:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    2b64:	4a1c      	ldr	r2, [pc, #112]	; (2bd8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2b66:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    2b6a:	bf18      	it	ne
    2b6c:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2b74:	07db      	lsls	r3, r3, #31
    2b76:	d41e      	bmi.n	2bb6 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2b78:	f10d 0407 	add.w	r4, sp, #7
    2b7c:	4621      	mov	r1, r4
    2b7e:	4628      	mov	r0, r5
    2b80:	f001 fbcc 	bl	431c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2b84:	4b15      	ldr	r3, [pc, #84]	; (2bdc <gpio_nrfx_pin_interrupt_configure+0xcc>)
    2b86:	4298      	cmp	r0, r3
    2b88:	d114      	bne.n	2bb4 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    2b8a:	4620      	mov	r0, r4
    2b8c:	f001 fc14 	bl	43b8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2b90:	4b13      	ldr	r3, [pc, #76]	; (2be0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    2b92:	4298      	cmp	r0, r3
    2b94:	d00e      	beq.n	2bb4 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    2b96:	f06f 000b 	mvn.w	r0, #11
}
    2b9a:	b005      	add	sp, #20
    2b9c:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2b9e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2ba2:	d005      	beq.n	2bb0 <gpio_nrfx_pin_interrupt_configure+0xa0>
    2ba4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2ba8:	bf0c      	ite	eq
    2baa:	2302      	moveq	r3, #2
    2bac:	2301      	movne	r3, #1
    2bae:	e7cb      	b.n	2b48 <gpio_nrfx_pin_interrupt_configure+0x38>
    2bb0:	2303      	movs	r3, #3
    2bb2:	e7c9      	b.n	2b48 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    2bb4:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2bb6:	2300      	movs	r3, #0
    2bb8:	4619      	mov	r1, r3
    2bba:	aa02      	add	r2, sp, #8
    2bbc:	4628      	mov	r0, r5
    2bbe:	f001 fa87 	bl	40d0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2bc2:	4b07      	ldr	r3, [pc, #28]	; (2be0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    2bc4:	4298      	cmp	r0, r3
    2bc6:	d104      	bne.n	2bd2 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2bc8:	2101      	movs	r1, #1
    2bca:	4628      	mov	r0, r5
    2bcc:	f001 fbfa 	bl	43c4 <nrfx_gpiote_trigger_enable>
    2bd0:	e7ae      	b.n	2b30 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    2bd2:	f06f 0004 	mvn.w	r0, #4
    2bd6:	e7e0      	b.n	2b9a <gpio_nrfx_pin_interrupt_configure+0x8a>
    2bd8:	50000300 	.word	0x50000300
    2bdc:	0bad0004 	.word	0x0bad0004
    2be0:	0bad0000 	.word	0x0bad0000

00002be4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2be4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2be6:	f001 fbd7 	bl	4398 <nrfx_gpiote_is_init>
    2bea:	4604      	mov	r4, r0
    2bec:	b968      	cbnz	r0, 2c0a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2bee:	f001 fbab 	bl	4348 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2bf2:	4b08      	ldr	r3, [pc, #32]	; (2c14 <gpio_nrfx_init+0x30>)
    2bf4:	4298      	cmp	r0, r3
    2bf6:	d10a      	bne.n	2c0e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2bf8:	4807      	ldr	r0, [pc, #28]	; (2c18 <gpio_nrfx_init+0x34>)
    2bfa:	4621      	mov	r1, r4
    2bfc:	f001 fb88 	bl	4310 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2c00:	4622      	mov	r2, r4
    2c02:	2105      	movs	r1, #5
    2c04:	2006      	movs	r0, #6
    2c06:	f7ff f9fd 	bl	2004 <z_arm_irq_priority_set>
		return 0;
    2c0a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2c0c:	bd10      	pop	{r4, pc}
		return -EIO;
    2c0e:	f06f 0004 	mvn.w	r0, #4
    2c12:	e7fb      	b.n	2c0c <gpio_nrfx_init+0x28>
    2c14:	0bad0000 	.word	0x0bad0000
    2c18:	00002c1d 	.word	0x00002c1d

00002c1c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2c1c:	0942      	lsrs	r2, r0, #5
{
    2c1e:	b570      	push	{r4, r5, r6, lr}
    2c20:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2c22:	d002      	beq.n	2c2a <nrfx_gpio_handler+0xe>
    2c24:	2a01      	cmp	r2, #1
    2c26:	d015      	beq.n	2c54 <nrfx_gpio_handler+0x38>
}
    2c28:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2c2a:	4e0b      	ldr	r6, [pc, #44]	; (2c58 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2c2c:	6932      	ldr	r2, [r6, #16]
    2c2e:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2c30:	2900      	cmp	r1, #0
    2c32:	d0f9      	beq.n	2c28 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    2c34:	f003 031f 	and.w	r3, r3, #31
    2c38:	2501      	movs	r5, #1
    2c3a:	680c      	ldr	r4, [r1, #0]
    2c3c:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    2c3e:	688a      	ldr	r2, [r1, #8]
    2c40:	402a      	ands	r2, r5
    2c42:	d002      	beq.n	2c4a <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2c44:	684b      	ldr	r3, [r1, #4]
    2c46:	4630      	mov	r0, r6
    2c48:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2c4a:	2c00      	cmp	r4, #0
    2c4c:	d0ec      	beq.n	2c28 <nrfx_gpio_handler+0xc>
    2c4e:	4621      	mov	r1, r4
    2c50:	6824      	ldr	r4, [r4, #0]
    2c52:	e7f4      	b.n	2c3e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2c54:	4e01      	ldr	r6, [pc, #4]	; (2c5c <nrfx_gpio_handler+0x40>)
    2c56:	e7e9      	b.n	2c2c <nrfx_gpio_handler+0x10>
    2c58:	00007454 	.word	0x00007454
    2c5c:	0000746c 	.word	0x0000746c

00002c60 <gpio_nrfx_pin_configure>:
{
    2c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    2c64:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2c66:	7b3b      	ldrb	r3, [r7, #12]
    2c68:	f001 051f 	and.w	r5, r1, #31
{
    2c6c:	b085      	sub	sp, #20
    2c6e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2c70:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2c74:	4614      	mov	r4, r2
    2c76:	b9ca      	cbnz	r2, 2cac <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2c78:	a902      	add	r1, sp, #8
    2c7a:	4628      	mov	r0, r5
    2c7c:	f001 fb4e 	bl	431c <nrfx_gpiote_channel_get>
    2c80:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2c82:	4628      	mov	r0, r5
    2c84:	f001 fc0e 	bl	44a4 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2c88:	4b4a      	ldr	r3, [pc, #296]	; (2db4 <gpio_nrfx_pin_configure+0x154>)
    2c8a:	4298      	cmp	r0, r3
    2c8c:	d004      	beq.n	2c98 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2c8e:	f06f 0004 	mvn.w	r0, #4
}
    2c92:	b005      	add	sp, #20
    2c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2c98:	4284      	cmp	r4, r0
    2c9a:	d105      	bne.n	2ca8 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2c9c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2ca0:	f001 fb84 	bl	43ac <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2ca4:	42a0      	cmp	r0, r4
    2ca6:	d1f2      	bne.n	2c8e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2ca8:	2000      	movs	r0, #0
    2caa:	e7f2      	b.n	2c92 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2cac:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2cb0:	f10d 0103 	add.w	r1, sp, #3
    2cb4:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2cb6:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2cba:	f001 fb2f 	bl	431c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2cbe:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2cc0:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2cc2:	aa02      	add	r2, sp, #8
    2cc4:	4649      	mov	r1, r9
    2cc6:	4628      	mov	r0, r5
    2cc8:	f001 fa02 	bl	40d0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2ccc:	4b39      	ldr	r3, [pc, #228]	; (2db4 <gpio_nrfx_pin_configure+0x154>)
    2cce:	4298      	cmp	r0, r3
    2cd0:	d002      	beq.n	2cd8 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2cd2:	f06f 0015 	mvn.w	r0, #21
    2cd6:	e7dc      	b.n	2c92 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2cd8:	4580      	cmp	r8, r0
    2cda:	d103      	bne.n	2ce4 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2cdc:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2ce0:	f001 fb64 	bl	43ac <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2ce4:	03a3      	lsls	r3, r4, #14
    2ce6:	d551      	bpl.n	2d8c <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2ce8:	f240 6306 	movw	r3, #1542	; 0x606
    2cec:	4023      	ands	r3, r4
    2cee:	f240 2206 	movw	r2, #518	; 0x206
    2cf2:	4293      	cmp	r3, r2
    2cf4:	d03b      	beq.n	2d6e <gpio_nrfx_pin_configure+0x10e>
    2cf6:	d80c      	bhi.n	2d12 <gpio_nrfx_pin_configure+0xb2>
    2cf8:	2b06      	cmp	r3, #6
    2cfa:	d015      	beq.n	2d28 <gpio_nrfx_pin_configure+0xc8>
    2cfc:	d804      	bhi.n	2d08 <gpio_nrfx_pin_configure+0xa8>
    2cfe:	b19b      	cbz	r3, 2d28 <gpio_nrfx_pin_configure+0xc8>
    2d00:	2b02      	cmp	r3, #2
    2d02:	d1e6      	bne.n	2cd2 <gpio_nrfx_pin_configure+0x72>
    2d04:	2304      	movs	r3, #4
    2d06:	e00f      	b.n	2d28 <gpio_nrfx_pin_configure+0xc8>
    2d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2d0c:	d1e1      	bne.n	2cd2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2d0e:	2301      	movs	r3, #1
    2d10:	e00a      	b.n	2d28 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2d12:	f240 4202 	movw	r2, #1026	; 0x402
    2d16:	4293      	cmp	r3, r2
    2d18:	d02b      	beq.n	2d72 <gpio_nrfx_pin_configure+0x112>
    2d1a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    2d1e:	d02a      	beq.n	2d76 <gpio_nrfx_pin_configure+0x116>
    2d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2d24:	d1d5      	bne.n	2cd2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2d26:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2d28:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2d2c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2d30:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2d34:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2d36:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2d3a:	bf54      	ite	pl
    2d3c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2d40:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2d42:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2d44:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2d48:	d517      	bpl.n	2d7a <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2d4a:	687b      	ldr	r3, [r7, #4]
    2d4c:	2101      	movs	r1, #1
    2d4e:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2d52:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2d56:	2200      	movs	r2, #0
    2d58:	a901      	add	r1, sp, #4
    2d5a:	4628      	mov	r0, r5
    2d5c:	f001 fa66 	bl	422c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2d60:	4b14      	ldr	r3, [pc, #80]	; (2db4 <gpio_nrfx_pin_configure+0x154>)
    2d62:	4298      	cmp	r0, r3
    2d64:	bf14      	ite	ne
    2d66:	f06f 0015 	mvnne.w	r0, #21
    2d6a:	2000      	moveq	r0, #0
    2d6c:	e791      	b.n	2c92 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2d6e:	2307      	movs	r3, #7
    2d70:	e7da      	b.n	2d28 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    2d72:	2305      	movs	r3, #5
    2d74:	e7d8      	b.n	2d28 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    2d76:	2303      	movs	r3, #3
    2d78:	e7d6      	b.n	2d28 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2d7a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2d7c:	bf41      	itttt	mi
    2d7e:	687b      	ldrmi	r3, [r7, #4]
    2d80:	2101      	movmi	r1, #1
    2d82:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2d86:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2d8a:	e7e4      	b.n	2d56 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    2d8c:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2d8e:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2d92:	bf54      	ite	pl
    2d94:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2d98:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2d9a:	461a      	mov	r2, r3
    2d9c:	a901      	add	r1, sp, #4
    2d9e:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2da0:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2da4:	f001 f994 	bl	40d0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2da8:	4b02      	ldr	r3, [pc, #8]	; (2db4 <gpio_nrfx_pin_configure+0x154>)
    2daa:	4298      	cmp	r0, r3
    2dac:	f43f af7c 	beq.w	2ca8 <gpio_nrfx_pin_configure+0x48>
    2db0:	e78f      	b.n	2cd2 <gpio_nrfx_pin_configure+0x72>
    2db2:	bf00      	nop
    2db4:	0bad0000 	.word	0x0bad0000

00002db8 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    2db8:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
    2dba:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    2dbc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    2dc0:	f001 feb6 	bl	4b30 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twi_bus_recover(config->config.scl,
					      config->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    2dc4:	4b03      	ldr	r3, [pc, #12]	; (2dd4 <i2c_nrfx_twi_recover_bus+0x1c>)
    2dc6:	4298      	cmp	r0, r3
}
    2dc8:	bf14      	ite	ne
    2dca:	f06f 000f 	mvnne.w	r0, #15
    2dce:	2000      	moveq	r0, #0
    2dd0:	bd08      	pop	{r3, pc}
    2dd2:	bf00      	nop
    2dd4:	0bad0000 	.word	0x0bad0000

00002dd8 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    2dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2dda:	4604      	mov	r4, r0
    2ddc:	2200      	movs	r2, #0
    2dde:	2101      	movs	r1, #1
    2de0:	2003      	movs	r0, #3
    2de2:	f7ff f90f 	bl	2004 <z_arm_irq_priority_set>
    2de6:	6863      	ldr	r3, [r4, #4]
    2de8:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2dea:	aa01      	add	r2, sp, #4
    2dec:	2100      	movs	r1, #0
    2dee:	4628      	mov	r0, r5
    2df0:	f003 fef0 	bl	6bd4 <pinctrl_lookup_state>
	if (ret < 0) {
    2df4:	2800      	cmp	r0, #0
    2df6:	db14      	blt.n	2e22 <twi_0_init+0x4a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2df8:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2dfa:	682a      	ldr	r2, [r5, #0]
    2dfc:	7919      	ldrb	r1, [r3, #4]
    2dfe:	6818      	ldr	r0, [r3, #0]
    2e00:	f003 ff05 	bl	6c0e <pinctrl_configure_pins>
    2e04:	2800      	cmp	r0, #0
    2e06:	db0c      	blt.n	2e22 <twi_0_init+0x4a>
	const struct i2c_nrfx_twi_config *config = dev->config;
    2e08:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    2e0a:	6923      	ldr	r3, [r4, #16]
    2e0c:	4a06      	ldr	r2, [pc, #24]	; (2e28 <twi_0_init+0x50>)
    2e0e:	f100 0108 	add.w	r1, r0, #8
    2e12:	f001 fd27 	bl	4864 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    2e16:	4b05      	ldr	r3, [pc, #20]	; (2e2c <twi_0_init+0x54>)
		return -EBUSY;
    2e18:	4298      	cmp	r0, r3
    2e1a:	bf0c      	ite	eq
    2e1c:	2000      	moveq	r0, #0
    2e1e:	f06f 000f 	mvnne.w	r0, #15
I2C_NRFX_TWI_DEVICE(0);
    2e22:	b003      	add	sp, #12
    2e24:	bd30      	pop	{r4, r5, pc}
    2e26:	bf00      	nop
    2e28:	00002e31 	.word	0x00002e31
    2e2c:	0bad0000 	.word	0x0bad0000

00002e30 <event_handler>:
	switch (p_event->type) {
    2e30:	7803      	ldrb	r3, [r0, #0]
    2e32:	2b01      	cmp	r3, #1
    2e34:	d008      	beq.n	2e48 <event_handler+0x18>
    2e36:	2b02      	cmp	r3, #2
    2e38:	d008      	beq.n	2e4c <event_handler+0x1c>
    2e3a:	b94b      	cbnz	r3, 2e50 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    2e3c:	4b05      	ldr	r3, [pc, #20]	; (2e54 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    2e3e:	620b      	str	r3, [r1, #32]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2e40:	f101 0010 	add.w	r0, r1, #16
    2e44:	f002 b9d6 	b.w	51f4 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2e48:	4b03      	ldr	r3, [pc, #12]	; (2e58 <event_handler+0x28>)
    2e4a:	e7f8      	b.n	2e3e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    2e4c:	4b03      	ldr	r3, [pc, #12]	; (2e5c <event_handler+0x2c>)
    2e4e:	e7f6      	b.n	2e3e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    2e50:	4b03      	ldr	r3, [pc, #12]	; (2e60 <event_handler+0x30>)
    2e52:	e7f4      	b.n	2e3e <event_handler+0xe>
    2e54:	0bad0000 	.word	0x0bad0000
    2e58:	0bae0001 	.word	0x0bae0001
    2e5c:	0bae0002 	.word	0x0bae0002
    2e60:	0bad0001 	.word	0x0bad0001

00002e64 <i2c_nrfx_twi_transfer>:
{
    2e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e68:	460c      	mov	r4, r1
    2e6a:	b089      	sub	sp, #36	; 0x24
    2e6c:	4617      	mov	r7, r2
    2e6e:	4699      	mov	r9, r3
	const struct i2c_nrfx_twi_config *config = dev->config;
    2e70:	6845      	ldr	r5, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    2e72:	6906      	ldr	r6, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    2e74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e7c:	4630      	mov	r0, r6
    2e7e:	f002 f9d9 	bl	5234 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    2e82:	f106 0a10 	add.w	sl, r6, #16
    2e86:	2200      	movs	r2, #0
    2e88:	2300      	movs	r3, #0
    2e8a:	4650      	mov	r0, sl
    2e8c:	f002 f9d2 	bl	5234 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    2e90:	4628      	mov	r0, r5
    2e92:	f001 fd45 	bl	4920 <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
    2e96:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 2f54 <i2c_nrfx_twi_transfer+0xf0>
	for (size_t i = 0; i < num_msgs; i++) {
    2e9a:	f04f 0800 	mov.w	r8, #0
    2e9e:	45b8      	cmp	r8, r7
    2ea0:	d301      	bcc.n	2ea6 <i2c_nrfx_twi_transfer+0x42>
    2ea2:	2400      	movs	r4, #0
    2ea4:	e02b      	b.n	2efe <i2c_nrfx_twi_transfer+0x9a>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    2ea6:	7a23      	ldrb	r3, [r4, #8]
    2ea8:	9301      	str	r3, [sp, #4]
    2eaa:	f013 0108 	ands.w	r1, r3, #8
    2eae:	d14b      	bne.n	2f48 <i2c_nrfx_twi_transfer+0xe4>
		nrfx_twi_xfer_desc_t cur_xfer = {
    2eb0:	2214      	movs	r2, #20
    2eb2:	a803      	add	r0, sp, #12
    2eb4:	9100      	str	r1, [sp, #0]
    2eb6:	f003 faea 	bl	648e <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    2eba:	9b01      	ldr	r3, [sp, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
    2ebc:	6860      	ldr	r0, [r4, #4]
    2ebe:	9004      	str	r0, [sp, #16]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    2ec0:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    2ec4:	6820      	ldr	r0, [r4, #0]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    2ec6:	9900      	ldr	r1, [sp, #0]
		nrfx_twi_xfer_desc_t cur_xfer = {
    2ec8:	f88d 200c 	strb.w	r2, [sp, #12]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    2ecc:	f013 0f02 	tst.w	r3, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
    2ed0:	f88d 900d 	strb.w	r9, [sp, #13]
    2ed4:	9006      	str	r0, [sp, #24]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    2ed6:	d11c      	bne.n	2f12 <i2c_nrfx_twi_transfer+0xae>
			if ((i < (num_msgs - 1)) &&
    2ed8:	1e7b      	subs	r3, r7, #1
    2eda:	4543      	cmp	r3, r8
    2edc:	d902      	bls.n	2ee4 <i2c_nrfx_twi_transfer+0x80>
    2ede:	7d23      	ldrb	r3, [r4, #20]
    2ee0:	075b      	lsls	r3, r3, #29
    2ee2:	d518      	bpl.n	2f16 <i2c_nrfx_twi_transfer+0xb2>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    2ee4:	bb82      	cbnz	r2, 2f48 <i2c_nrfx_twi_transfer+0xe4>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    2ee6:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    2ee8:	a903      	add	r1, sp, #12
    2eea:	4628      	mov	r0, r5
    2eec:	f001 fd46 	bl	497c <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    2ef0:	4558      	cmp	r0, fp
    2ef2:	d012      	beq.n	2f1a <i2c_nrfx_twi_transfer+0xb6>
			if (res == NRFX_ERROR_BUSY) {
    2ef4:	4b18      	ldr	r3, [pc, #96]	; (2f58 <i2c_nrfx_twi_transfer+0xf4>)
    2ef6:	4298      	cmp	r0, r3
    2ef8:	d029      	beq.n	2f4e <i2c_nrfx_twi_transfer+0xea>
			ret = -EIO;
    2efa:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
    2efe:	4628      	mov	r0, r5
    2f00:	f001 fd1e 	bl	4940 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    2f04:	4630      	mov	r0, r6
    2f06:	f002 f975 	bl	51f4 <z_impl_k_sem_give>
}
    2f0a:	4620      	mov	r0, r4
    2f0c:	b009      	add	sp, #36	; 0x24
    2f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    2f12:	460a      	mov	r2, r1
    2f14:	e7e8      	b.n	2ee8 <i2c_nrfx_twi_transfer+0x84>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    2f16:	2240      	movs	r2, #64	; 0x40
    2f18:	e7e6      	b.n	2ee8 <i2c_nrfx_twi_transfer+0x84>
	return z_impl_k_sem_take(sem, timeout);
    2f1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2f1e:	2300      	movs	r3, #0
    2f20:	4650      	mov	r0, sl
    2f22:	f002 f987 	bl	5234 <z_impl_k_sem_take>
		if (ret != 0) {
    2f26:	b138      	cbz	r0, 2f38 <i2c_nrfx_twi_transfer+0xd4>
			nrfx_twi_disable(&config->twi);
    2f28:	4628      	mov	r0, r5
    2f2a:	f001 fd09 	bl	4940 <nrfx_twi_disable>
    2f2e:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    2f32:	f001 fdfd 	bl	4b30 <nrfx_twi_twim_bus_recover>
    2f36:	e7e0      	b.n	2efa <i2c_nrfx_twi_transfer+0x96>
		res = data->res;
    2f38:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    2f3a:	455b      	cmp	r3, fp
    2f3c:	f104 040c 	add.w	r4, r4, #12
    2f40:	d1db      	bne.n	2efa <i2c_nrfx_twi_transfer+0x96>
	for (size_t i = 0; i < num_msgs; i++) {
    2f42:	f108 0801 	add.w	r8, r8, #1
    2f46:	e7aa      	b.n	2e9e <i2c_nrfx_twi_transfer+0x3a>
			ret = -ENOTSUP;
    2f48:	f06f 0485 	mvn.w	r4, #133	; 0x85
    2f4c:	e7d7      	b.n	2efe <i2c_nrfx_twi_transfer+0x9a>
				ret = -EBUSY;
    2f4e:	f06f 040f 	mvn.w	r4, #15
    2f52:	e7d4      	b.n	2efe <i2c_nrfx_twi_transfer+0x9a>
    2f54:	0bad0000 	.word	0x0bad0000
    2f58:	0bad000b 	.word	0x0bad000b

00002f5c <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
    2f5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2f60:	461c      	mov	r4, r3
	return config->uarte_regs;
    2f62:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    2f64:	6907      	ldr	r7, [r0, #16]
{
    2f66:	460e      	mov	r6, r1
    2f68:	4605      	mov	r5, r0
	return config->uarte_regs;
    2f6a:	6819      	ldr	r1, [r3, #0]
	__asm__ volatile(
    2f6c:	f04f 0320 	mov.w	r3, #32
    2f70:	f3ef 8811 	mrs	r8, BASEPRI
    2f74:	f383 8812 	msr	BASEPRI_MAX, r3
    2f78:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	int key = irq_lock();

	if (data->async->tx_size) {
    2f7c:	68f8      	ldr	r0, [r7, #12]
    2f7e:	68c3      	ldr	r3, [r0, #12]
    2f80:	b143      	cbz	r3, 2f94 <uarte_nrfx_tx+0x38>
	__asm__ volatile(
    2f82:	f388 8811 	msr	BASEPRI, r8
    2f86:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
    2f8a:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
    2f8e:	b002      	add	sp, #8
    2f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    2f94:	f44f 0c80 	mov.w	ip, #4194304	; 0x400000
	data->async->tx_size = len;
    2f98:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
    2f9a:	6086      	str	r6, [r0, #8]
    2f9c:	f8c1 c304 	str.w	ip, [r1, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    2fa0:	f006 4160 	and.w	r1, r6, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    2fa4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    2fa8:	d128      	bne.n	2ffc <uarte_nrfx_tx+0xa0>
		data->async->xfer_len = len;
    2faa:	e9c0 6204 	strd	r6, r2, [r0, #16]
	start_tx_locked(dev, data);
    2fae:	4639      	mov	r1, r7
    2fb0:	4628      	mov	r0, r5
    2fb2:	f003 fcee 	bl	6992 <start_tx_locked>
    2fb6:	f388 8811 	msr	BASEPRI, r8
    2fba:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    2fbe:	7afb      	ldrb	r3, [r7, #11]
    2fc0:	2b01      	cmp	r3, #1
    2fc2:	d119      	bne.n	2ff8 <uarte_nrfx_tx+0x9c>
	    && timeout != SYS_FOREVER_US) {
    2fc4:	1c63      	adds	r3, r4, #1
    2fc6:	d017      	beq.n	2ff8 <uarte_nrfx_tx+0x9c>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    2fc8:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2fcc:	480d      	ldr	r0, [pc, #52]	; (3004 <uarte_nrfx_tx+0xa8>)
    2fce:	68fe      	ldr	r6, [r7, #12]
    2fd0:	4a0d      	ldr	r2, [pc, #52]	; (3008 <uarte_nrfx_tx+0xac>)
    2fd2:	2400      	movs	r4, #0
    2fd4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2fd8:	4621      	mov	r1, r4
    2fda:	2300      	movs	r3, #0
    2fdc:	fbc5 0107 	smlal	r0, r1, r5, r7
    2fe0:	f7fd f88e 	bl	100 <__aeabi_uldivmod>
    2fe4:	3628      	adds	r6, #40	; 0x28
    2fe6:	4602      	mov	r2, r0
    2fe8:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    2fea:	2000      	movs	r0, #0
    2fec:	2100      	movs	r1, #0
    2fee:	e9cd 0100 	strd	r0, r1, [sp]
    2ff2:	4630      	mov	r0, r6
    2ff4:	f002 fe28 	bl	5c48 <z_impl_k_timer_start>
	return 0;
    2ff8:	2000      	movs	r0, #0
    2ffa:	e7c8      	b.n	2f8e <uarte_nrfx_tx+0x32>
		data->async->tx_cache_offset = 0;
    2ffc:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
    2ffe:	f003 fc7d 	bl	68fc <setup_tx_cache.isra.0>
    3002:	e7d4      	b.n	2fae <uarte_nrfx_tx+0x52>
    3004:	000f423f 	.word	0x000f423f
    3008:	000f4240 	.word	0x000f4240

0000300c <uarte_nrfx_configure>:
{
    300c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    300e:	794b      	ldrb	r3, [r1, #5]
    3010:	2b01      	cmp	r3, #1
    3012:	d026      	beq.n	3062 <uarte_nrfx_configure+0x56>
    3014:	2b03      	cmp	r3, #3
    3016:	d121      	bne.n	305c <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3018:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    301a:	798b      	ldrb	r3, [r1, #6]
    301c:	2b03      	cmp	r3, #3
    301e:	d11d      	bne.n	305c <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    3020:	79cc      	ldrb	r4, [r1, #7]
    3022:	b10c      	cbz	r4, 3028 <uarte_nrfx_configure+0x1c>
    3024:	2c01      	cmp	r4, #1
    3026:	d119      	bne.n	305c <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    3028:	790a      	ldrb	r2, [r1, #4]
    302a:	b112      	cbz	r2, 3032 <uarte_nrfx_configure+0x26>
    302c:	2a02      	cmp	r2, #2
    302e:	d115      	bne.n	305c <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3030:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3032:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3034:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3036:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    303a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    303c:	d065      	beq.n	310a <uarte_nrfx_configure+0xfe>
    303e:	d82d      	bhi.n	309c <uarte_nrfx_configure+0x90>
    3040:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3044:	d064      	beq.n	3110 <uarte_nrfx_configure+0x104>
    3046:	d816      	bhi.n	3076 <uarte_nrfx_configure+0x6a>
    3048:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    304c:	d062      	beq.n	3114 <uarte_nrfx_configure+0x108>
    304e:	d80a      	bhi.n	3066 <uarte_nrfx_configure+0x5a>
    3050:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3054:	d061      	beq.n	311a <uarte_nrfx_configure+0x10e>
    3056:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    305a:	d061      	beq.n	3120 <uarte_nrfx_configure+0x114>
    305c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3060:	e052      	b.n	3108 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3062:	2600      	movs	r6, #0
    3064:	e7d9      	b.n	301a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3066:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    306a:	d05c      	beq.n	3126 <uarte_nrfx_configure+0x11a>
    306c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3070:	d1f4      	bne.n	305c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3072:	4b37      	ldr	r3, [pc, #220]	; (3150 <uarte_nrfx_configure+0x144>)
    3074:	e03c      	b.n	30f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3076:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    307a:	d057      	beq.n	312c <uarte_nrfx_configure+0x120>
    307c:	d807      	bhi.n	308e <uarte_nrfx_configure+0x82>
    307e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3082:	d055      	beq.n	3130 <uarte_nrfx_configure+0x124>
    3084:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3088:	d1e8      	bne.n	305c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    308a:	4b32      	ldr	r3, [pc, #200]	; (3154 <uarte_nrfx_configure+0x148>)
    308c:	e030      	b.n	30f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    308e:	f647 2712 	movw	r7, #31250	; 0x7a12
    3092:	42bb      	cmp	r3, r7
    3094:	d1e2      	bne.n	305c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3096:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    309a:	e029      	b.n	30f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    309c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    30a0:	d048      	beq.n	3134 <uarte_nrfx_configure+0x128>
    30a2:	d813      	bhi.n	30cc <uarte_nrfx_configure+0xc0>
    30a4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    30a8:	d047      	beq.n	313a <uarte_nrfx_configure+0x12e>
    30aa:	d809      	bhi.n	30c0 <uarte_nrfx_configure+0xb4>
    30ac:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    30b0:	42bb      	cmp	r3, r7
    30b2:	d044      	beq.n	313e <uarte_nrfx_configure+0x132>
    30b4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    30b8:	d1d0      	bne.n	305c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    30ba:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    30be:	e017      	b.n	30f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    30c0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    30c4:	d1ca      	bne.n	305c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    30c6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    30ca:	e011      	b.n	30f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    30cc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    30d0:	d038      	beq.n	3144 <uarte_nrfx_configure+0x138>
    30d2:	d808      	bhi.n	30e6 <uarte_nrfx_configure+0xda>
    30d4:	4f20      	ldr	r7, [pc, #128]	; (3158 <uarte_nrfx_configure+0x14c>)
    30d6:	42bb      	cmp	r3, r7
    30d8:	d037      	beq.n	314a <uarte_nrfx_configure+0x13e>
    30da:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    30de:	d1bd      	bne.n	305c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    30e0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    30e4:	e004      	b.n	30f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    30e6:	4f1d      	ldr	r7, [pc, #116]	; (315c <uarte_nrfx_configure+0x150>)
    30e8:	42bb      	cmp	r3, r7
    30ea:	d1b7      	bne.n	305c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    30ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    30f0:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    30f2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
	data->uart_config = *cfg;
    30f6:	1d03      	adds	r3, r0, #4
    30f8:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    30fa:	4334      	orrs	r4, r6
    30fc:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    30fe:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3102:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    3106:	2000      	movs	r0, #0
}
    3108:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    310a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    310e:	e7ef      	b.n	30f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3110:	4b13      	ldr	r3, [pc, #76]	; (3160 <uarte_nrfx_configure+0x154>)
    3112:	e7ed      	b.n	30f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3114:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3118:	e7ea      	b.n	30f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    311a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    311e:	e7e7      	b.n	30f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3120:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3124:	e7e4      	b.n	30f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3126:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    312a:	e7e1      	b.n	30f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    312c:	4b0d      	ldr	r3, [pc, #52]	; (3164 <uarte_nrfx_configure+0x158>)
    312e:	e7df      	b.n	30f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3130:	4b0d      	ldr	r3, [pc, #52]	; (3168 <uarte_nrfx_configure+0x15c>)
    3132:	e7dd      	b.n	30f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3134:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3138:	e7da      	b.n	30f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    313a:	4b0c      	ldr	r3, [pc, #48]	; (316c <uarte_nrfx_configure+0x160>)
    313c:	e7d8      	b.n	30f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    313e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3142:	e7d5      	b.n	30f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3144:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3148:	e7d2      	b.n	30f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    314a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    314e:	e7cf      	b.n	30f0 <uarte_nrfx_configure+0xe4>
    3150:	0013b000 	.word	0x0013b000
    3154:	004ea000 	.word	0x004ea000
    3158:	0003d090 	.word	0x0003d090
    315c:	000f4240 	.word	0x000f4240
    3160:	00275000 	.word	0x00275000
    3164:	0075c000 	.word	0x0075c000
    3168:	003af000 	.word	0x003af000
    316c:	013a9000 	.word	0x013a9000

00003170 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    3174:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    3178:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    317a:	f8d9 4000 	ldr.w	r4, [r9]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    317e:	f8d9 800c 	ldr.w	r8, [r9, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3182:	2100      	movs	r1, #0
    3184:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    3188:	4607      	mov	r7, r0
	data->dev = dev;
    318a:	6030      	str	r0, [r6, #0]
	ret = pinctrl_lookup_state(config, id, &state);
    318c:	aa01      	add	r2, sp, #4
    318e:	4640      	mov	r0, r8
    3190:	f003 fd20 	bl	6bd4 <pinctrl_lookup_state>
	if (ret < 0) {
    3194:	1e05      	subs	r5, r0, #0
    3196:	f2c0 8087 	blt.w	32a8 <uarte_instance_init.constprop.0+0x138>
	return pinctrl_apply_state_direct(config, state);
    319a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    319c:	f8d8 2000 	ldr.w	r2, [r8]
    31a0:	7919      	ldrb	r1, [r3, #4]
    31a2:	6818      	ldr	r0, [r3, #0]
    31a4:	f003 fd33 	bl	6c0e <pinctrl_configure_pins>
	if (err < 0) {
    31a8:	1e05      	subs	r5, r0, #0
    31aa:	db7d      	blt.n	32a8 <uarte_instance_init.constprop.0+0x138>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    31ac:	1d31      	adds	r1, r6, #4
    31ae:	4638      	mov	r0, r7
    31b0:	f7ff ff2c 	bl	300c <uarte_nrfx_configure>
	if (err) {
    31b4:	4605      	mov	r5, r0
    31b6:	2800      	cmp	r0, #0
    31b8:	d176      	bne.n	32a8 <uarte_instance_init.constprop.0+0x138>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    31ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    31be:	0799      	lsls	r1, r3, #30
    31c0:	d51a      	bpl.n	31f8 <uarte_instance_init.constprop.0+0x88>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    31c2:	f106 0016 	add.w	r0, r6, #22
    31c6:	f001 fa67 	bl	4698 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    31ca:	4b45      	ldr	r3, [pc, #276]	; (32e0 <uarte_instance_init.constprop.0+0x170>)
    31cc:	4298      	cmp	r0, r3
    31ce:	f040 8083 	bne.w	32d8 <uarte_instance_init.constprop.0+0x168>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    31d2:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    31d4:	00c3      	lsls	r3, r0, #3
    31d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    31da:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    31de:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    31e2:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    31e6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    31ea:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    31ee:	4a3d      	ldr	r2, [pc, #244]	; (32e4 <uarte_instance_init.constprop.0+0x174>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    31f0:	2301      	movs	r3, #1
    31f2:	4083      	lsls	r3, r0
    31f4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		}
	}


#ifdef UARTE_ANY_ASYNC
	if (data->async) {
    31f8:	68f3      	ldr	r3, [r6, #12]
    31fa:	2b00      	cmp	r3, #0
    31fc:	d058      	beq.n	32b0 <uarte_instance_init.constprop.0+0x140>
	return config->uarte_regs;
    31fe:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    3200:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
    3204:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    3206:	f8d8 000c 	ldr.w	r0, [r8, #12]
    p_reg->INTENSET = mask;
    320a:	4937      	ldr	r1, [pc, #220]	; (32e8 <uarte_instance_init.constprop.0+0x178>)
    320c:	2204      	movs	r2, #4
    320e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    3212:	2201      	movs	r2, #1
    3214:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
    3218:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    321c:	2108      	movs	r1, #8
    321e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3222:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    3226:	b1a1      	cbz	r1, 3252 <uarte_instance_init.constprop.0+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3228:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    322a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    322e:	b91a      	cbnz	r2, 3238 <uarte_instance_init.constprop.0+0xc8>
    3230:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    3234:	2a00      	cmp	r2, #0
    3236:	d0f8      	beq.n	322a <uarte_instance_init.constprop.0+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3238:	2200      	movs	r2, #0
    323a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    323e:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    3242:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    3246:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    324a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    324e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    3252:	4926      	ldr	r1, [pc, #152]	; (32ec <uarte_instance_init.constprop.0+0x17c>)
    3254:	2200      	movs	r2, #0
    3256:	3088      	adds	r0, #136	; 0x88
    3258:	f004 f88d 	bl	7376 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    325c:	f8d8 300c 	ldr.w	r3, [r8, #12]
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    3260:	f8d8 000c 	ldr.w	r0, [r8, #12]
	timer->user_data = user_data;
    3264:	f8c3 80bc 	str.w	r8, [r3, #188]	; 0xbc
    3268:	4921      	ldr	r1, [pc, #132]	; (32f0 <uarte_instance_init.constprop.0+0x180>)
    326a:	2200      	movs	r2, #0
    326c:	3028      	adds	r0, #40	; 0x28
    326e:	f004 f882 	bl	7376 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    3272:	f8d8 300c 	ldr.w	r3, [r8, #12]
    3276:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    327a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    327e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3280:	bf5c      	itt	pl
    3282:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3286:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    328a:	06db      	lsls	r3, r3, #27
    328c:	bf44      	itt	mi
    328e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3292:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3296:	3614      	adds	r6, #20
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3298:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    329a:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    329e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32a2:	2301      	movs	r3, #1
    32a4:	60a3      	str	r3, [r4, #8]
    32a6:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    32a8:	4628      	mov	r0, r5
    32aa:	b003      	add	sp, #12
    32ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    32b0:	2308      	movs	r3, #8
    32b2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    32b6:	f899 3008 	ldrb.w	r3, [r9, #8]
    32ba:	2b00      	cmp	r3, #0
    32bc:	d1dd      	bne.n	327a <uarte_instance_init.constprop.0+0x10a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32be:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    32c2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    32c6:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    32ca:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    32ce:	2301      	movs	r3, #1
    32d0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32d4:	6023      	str	r3, [r4, #0]
}
    32d6:	e7d0      	b.n	327a <uarte_instance_init.constprop.0+0x10a>
		return -EIO;
    32d8:	f06f 0504 	mvn.w	r5, #4
    32dc:	e7e4      	b.n	32a8 <uarte_instance_init.constprop.0+0x138>
    32de:	bf00      	nop
    32e0:	0bad0000 	.word	0x0bad0000
    32e4:	4001f000 	.word	0x4001f000
    32e8:	000a0210 	.word	0x000a0210
    32ec:	00006b11 	.word	0x00006b11
    32f0:	00006bcb 	.word	0x00006bcb

000032f4 <uarte_nrfx_poll_out>:
{
    32f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    32f6:	6906      	ldr	r6, [r0, #16]
{
    32f8:	4604      	mov	r4, r0
    32fa:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    32fc:	f003 ff0e 	bl	711c <k_is_in_isr>
    3300:	b910      	cbnz	r0, 3308 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    3302:	4b28      	ldr	r3, [pc, #160]	; (33a4 <uarte_nrfx_poll_out+0xb0>)
	if (isr_mode) {
    3304:	781b      	ldrb	r3, [r3, #0]
    3306:	bb5b      	cbnz	r3, 3360 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
    3308:	f04f 0320 	mov.w	r3, #32
    330c:	f3ef 8111 	mrs	r1, BASEPRI
    3310:	f383 8812 	msr	BASEPRI_MAX, r3
    3314:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3318:	6860      	ldr	r0, [r4, #4]
			key = irq_lock();
    331a:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
    331c:	f003 fb29 	bl	6972 <is_tx_ready.isra.0>
    3320:	b1c8      	cbz	r0, 3356 <uarte_nrfx_poll_out+0x62>
				if (data->async && data->async->tx_size &&
    3322:	68f3      	ldr	r3, [r6, #12]
    3324:	b15b      	cbz	r3, 333e <uarte_nrfx_poll_out+0x4a>
    3326:	68da      	ldr	r2, [r3, #12]
    3328:	b14a      	cbz	r2, 333e <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
    332a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    332e:	2a00      	cmp	r2, #0
    3330:	da05      	bge.n	333e <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
    3332:	6862      	ldr	r2, [r4, #4]
    3334:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
    3336:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    333a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
    333e:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    3340:	2201      	movs	r2, #1
	data->char_out = c;
    3342:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    3346:	4620      	mov	r0, r4
    3348:	f003 f9ca 	bl	66e0 <tx_start>
	__asm__ volatile(
    334c:	f385 8811 	msr	BASEPRI, r5
    3350:	f3bf 8f6f 	isb	sy
}
    3354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3356:	f381 8811 	msr	BASEPRI, r1
    335a:	f3bf 8f6f 	isb	sy
}
    335e:	e7d3      	b.n	3308 <uarte_nrfx_poll_out+0x14>
{
    3360:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3362:	6860      	ldr	r0, [r4, #4]
    3364:	f003 fb05 	bl	6972 <is_tx_ready.isra.0>
    3368:	b948      	cbnz	r0, 337e <uarte_nrfx_poll_out+0x8a>
    336a:	2001      	movs	r0, #1
    336c:	f003 fd07 	bl	6d7e <nrfx_busy_wait>
    3370:	3d01      	subs	r5, #1
    3372:	d1f6      	bne.n	3362 <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
    3374:	2100      	movs	r1, #0
    3376:	2021      	movs	r0, #33	; 0x21
    3378:	f002 fa5c 	bl	5834 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    337c:	e7f0      	b.n	3360 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
    337e:	f04f 0320 	mov.w	r3, #32
    3382:	f3ef 8511 	mrs	r5, BASEPRI
    3386:	f383 8812 	msr	BASEPRI_MAX, r3
    338a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    338e:	6860      	ldr	r0, [r4, #4]
    3390:	f003 faef 	bl	6972 <is_tx_ready.isra.0>
    3394:	2800      	cmp	r0, #0
    3396:	d1d2      	bne.n	333e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    3398:	f385 8811 	msr	BASEPRI, r5
    339c:	f3bf 8f6f 	isb	sy
}
    33a0:	e7e8      	b.n	3374 <uarte_nrfx_poll_out+0x80>
    33a2:	bf00      	nop
    33a4:	200014a9 	.word	0x200014a9

000033a8 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
    33a8:	6843      	ldr	r3, [r0, #4]
{
    33aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    33ae:	681d      	ldr	r5, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    33b0:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
    33b4:	b088      	sub	sp, #32
    33b6:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
    33b8:	b171      	cbz	r1, 33d8 <uarte_nrfx_isr_async+0x30>
	struct uarte_nrfx_data *data = dev->data;
    33ba:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33bc:	2200      	movs	r2, #0
    33be:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    33c2:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    33c6:	68da      	ldr	r2, [r3, #12]
    33c8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    33cc:	3301      	adds	r3, #1
    33ce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    33d2:	b008      	add	sp, #32
    33d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    33d8:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    33dc:	b313      	cbz	r3, 3424 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33de:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    33e2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    33e6:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    33ea:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
    33ee:	2214      	movs	r2, #20
    33f0:	a803      	add	r0, sp, #12
    33f2:	f003 f84c 	bl	648e <memset>
    33f6:	2306      	movs	r3, #6
    33f8:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    33fc:	07f3      	lsls	r3, r6, #31
    33fe:	f100 8100 	bmi.w	3602 <uarte_nrfx_isr_async+0x25a>
    3402:	07b7      	lsls	r7, r6, #30
    3404:	f100 80ff 	bmi.w	3606 <uarte_nrfx_isr_async+0x25e>
    3408:	0770      	lsls	r0, r6, #29
    340a:	f100 80fe 	bmi.w	360a <uarte_nrfx_isr_async+0x262>
    340e:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
    3412:	4620      	mov	r0, r4
    3414:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    3416:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
    341a:	f003 f987 	bl	672c <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    341e:	4620      	mov	r0, r4
    3420:	f003 fa17 	bl	6852 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3424:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    3428:	b37b      	cbz	r3, 348a <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
    342a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    342e:	06d9      	lsls	r1, r3, #27
    3430:	d52b      	bpl.n	348a <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3432:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = dev->data;
    3436:	6927      	ldr	r7, [r4, #16]
    3438:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    343c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
    3440:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
    3442:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
    3444:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    3446:	2301      	movs	r3, #1
    3448:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
    344c:	3088      	adds	r0, #136	; 0x88
    344e:	f003 ff9e 	bl	738e <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
    3452:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    3454:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
    3458:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    345c:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
    345e:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    3462:	1a1b      	subs	r3, r3, r0
    3464:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
    3466:	6f90      	ldr	r0, [r2, #120]	; 0x78
    3468:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    346c:	4408      	add	r0, r1
	if (rx_len > 0) {
    346e:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
    3470:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
    3472:	dd02      	ble.n	347a <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
    3474:	4620      	mov	r0, r4
    3476:	f003 f960 	bl	673a <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
    347a:	68f9      	ldr	r1, [r7, #12]
    347c:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    3480:	2b00      	cmp	r3, #0
    3482:	f040 80c4 	bne.w	360e <uarte_nrfx_isr_async+0x266>
		data->async->is_in_irq = false;
    3486:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    348a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    348e:	b37b      	cbz	r3, 34f0 <uarte_nrfx_isr_async+0x148>
    3490:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    3494:	bb66      	cbnz	r6, 34f0 <uarte_nrfx_isr_async+0x148>
	struct uart_event evt = {
    3496:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
    3498:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    349a:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
    349e:	4631      	mov	r1, r6
    34a0:	a803      	add	r0, sp, #12
    34a2:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    34a6:	f002 fff2 	bl	648e <memset>
    34aa:	2303      	movs	r3, #3
	user_callback(dev, &evt);
    34ac:	a903      	add	r1, sp, #12
    34ae:	4620      	mov	r0, r4
	struct uart_event evt = {
    34b0:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    34b4:	f003 f93a 	bl	672c <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    34b8:	68ff      	ldr	r7, [r7, #12]
    34ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    34bc:	1c5a      	adds	r2, r3, #1
    34be:	d017      	beq.n	34f0 <uarte_nrfx_isr_async+0x148>
		data->async->rx_timeout_left = data->async->rx_timeout;
    34c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
    34c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    34c8:	4889      	ldr	r0, [pc, #548]	; (36f0 <uarte_nrfx_isr_async+0x348>)
    34ca:	4a8a      	ldr	r2, [pc, #552]	; (36f4 <uarte_nrfx_isr_async+0x34c>)
    34cc:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    34d0:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    34d4:	4631      	mov	r1, r6
    34d6:	2300      	movs	r3, #0
    34d8:	fbcc 010e 	smlal	r0, r1, ip, lr
    34dc:	f7fc fe10 	bl	100 <__aeabi_uldivmod>
    34e0:	4602      	mov	r2, r0
    34e2:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    34e4:	e9cd 0100 	strd	r0, r1, [sp]
    34e8:	f107 0088 	add.w	r0, r7, #136	; 0x88
    34ec:	f002 fbac 	bl	5c48 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    34f0:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    34f4:	b333      	cbz	r3, 3544 <uarte_nrfx_isr_async+0x19c>
    34f6:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    34fa:	bb1e      	cbnz	r6, 3544 <uarte_nrfx_isr_async+0x19c>
	struct uarte_nrfx_data *data = dev->data;
    34fc:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34fe:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
    3502:	68f9      	ldr	r1, [r7, #12]
    3504:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	const struct uarte_nrfx_config *config = dev->config;
    3508:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
    350c:	3160      	adds	r1, #96	; 0x60
    350e:	4620      	mov	r0, r4
    3510:	f003 f92c 	bl	676c <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    3514:	68f9      	ldr	r1, [r7, #12]
    3516:	4620      	mov	r0, r4
    3518:	316c      	adds	r1, #108	; 0x6c
    351a:	f003 f927 	bl	676c <rx_buf_release>
	if (data->async->rx_enabled) {
    351e:	68fb      	ldr	r3, [r7, #12]
    3520:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    3524:	2a00      	cmp	r2, #0
    3526:	f000 809f 	beq.w	3668 <uarte_nrfx_isr_async+0x2c0>
		data->async->rx_enabled = false;
    352a:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    352e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3532:	06d8      	lsls	r0, r3, #27
    3534:	d503      	bpl.n	353e <uarte_nrfx_isr_async+0x196>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    3536:	2102      	movs	r1, #2
    3538:	4620      	mov	r0, r4
    353a:	f003 f9f3 	bl	6924 <async_uart_release>
	notify_rx_disable(dev);
    353e:	4620      	mov	r0, r4
    3540:	f003 f92c 	bl	679c <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3544:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    3548:	b1db      	cbz	r3, 3582 <uarte_nrfx_isr_async+0x1da>
    return p_reg->INTENSET & mask;
    354a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    354e:	05d9      	lsls	r1, r3, #23
    3550:	d517      	bpl.n	3582 <uarte_nrfx_isr_async+0x1da>
	return config->uarte_regs;
    3552:	6863      	ldr	r3, [r4, #4]
    3554:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    3556:	f04f 0120 	mov.w	r1, #32
    355a:	f3ef 8211 	mrs	r2, BASEPRI
    355e:	f381 8812 	msr	BASEPRI_MAX, r1
    3562:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3566:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    356a:	b131      	cbz	r1, 357a <uarte_nrfx_isr_async+0x1d2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    356c:	2100      	movs	r1, #0
    356e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    3572:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3576:	2101      	movs	r1, #1
    3578:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    357a:	f382 8811 	msr	BASEPRI, r2
    357e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3582:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    3586:	2b00      	cmp	r3, #0
    3588:	f43f af23 	beq.w	33d2 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
    358c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    3590:	025a      	lsls	r2, r3, #9
    3592:	f57f af1e 	bpl.w	33d2 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
    3596:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
    3598:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    359a:	e9d3 7300 	ldrd	r7, r3, [r3]
    359e:	06db      	lsls	r3, r3, #27
    35a0:	d467      	bmi.n	3672 <uarte_nrfx_isr_async+0x2ca>
	if (!data->async->tx_buf) {
    35a2:	68eb      	ldr	r3, [r5, #12]
    35a4:	689b      	ldr	r3, [r3, #8]
    35a6:	2b00      	cmp	r3, #0
    35a8:	f43f af13 	beq.w	33d2 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
    35ac:	f04f 0320 	mov.w	r3, #32
    35b0:	f3ef 8211 	mrs	r2, BASEPRI
    35b4:	f383 8812 	msr	BASEPRI_MAX, r3
    35b8:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    35bc:	68eb      	ldr	r3, [r5, #12]
    35be:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    35c2:	2900      	cmp	r1, #0
    35c4:	bfac      	ite	ge
    35c6:	f8d3 60c4 	ldrge.w	r6, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
    35ca:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
    35ce:	f382 8811 	msr	BASEPRI, r2
    35d2:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    35d6:	68e8      	ldr	r0, [r5, #12]
    35d8:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
    35dc:	2b00      	cmp	r3, #0
    35de:	d055      	beq.n	368c <uarte_nrfx_isr_async+0x2e4>
	__asm__ volatile(
    35e0:	f04f 0320 	mov.w	r3, #32
    35e4:	f3ef 8611 	mrs	r6, BASEPRI
    35e8:	f383 8812 	msr	BASEPRI_MAX, r3
    35ec:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    35f0:	4629      	mov	r1, r5
    35f2:	4620      	mov	r0, r4
    35f4:	f003 f9cd 	bl	6992 <start_tx_locked>
	__asm__ volatile(
    35f8:	f386 8811 	msr	BASEPRI, r6
    35fc:	f3bf 8f6f 	isb	sy
				return;
    3600:	e6e7      	b.n	33d2 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    3602:	2601      	movs	r6, #1
    3604:	e705      	b.n	3412 <uarte_nrfx_isr_async+0x6a>
    3606:	2602      	movs	r6, #2
    3608:	e703      	b.n	3412 <uarte_nrfx_isr_async+0x6a>
    360a:	2604      	movs	r6, #4
    360c:	e701      	b.n	3412 <uarte_nrfx_isr_async+0x6a>
	rx_buf_release(dev, &data->async->rx_buf);
    360e:	3160      	adds	r1, #96	; 0x60
    3610:	4620      	mov	r0, r4
    3612:	f003 f8ab 	bl	676c <rx_buf_release>
	__asm__ volatile(
    3616:	f04f 0320 	mov.w	r3, #32
    361a:	f3ef 8111 	mrs	r1, BASEPRI
    361e:	f383 8812 	msr	BASEPRI_MAX, r3
    3622:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    3626:	68fb      	ldr	r3, [r7, #12]
    3628:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    362a:	b1d2      	cbz	r2, 3662 <uarte_nrfx_isr_async+0x2ba>
		data->async->rx_buf = data->async->rx_next_buf;
    362c:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    362e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3630:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    3632:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
    3634:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
    3638:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    363a:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    363e:	b90b      	cbnz	r3, 3644 <uarte_nrfx_isr_async+0x29c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3640:	2301      	movs	r3, #1
    3642:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    3644:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    3648:	f023 0320 	bic.w	r3, r3, #32
    364c:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    3650:	f381 8811 	msr	BASEPRI, r1
    3654:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    3658:	68fb      	ldr	r3, [r7, #12]
    365a:	2200      	movs	r2, #0
    365c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    3660:	e713      	b.n	348a <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3662:	2301      	movs	r3, #1
    3664:	6073      	str	r3, [r6, #4]
}
    3666:	e7f3      	b.n	3650 <uarte_nrfx_isr_async+0x2a8>
		(void)rx_flush(dev, NULL, 0);
    3668:	6860      	ldr	r0, [r4, #4]
    366a:	4611      	mov	r1, r2
    366c:	f003 f912 	bl	6894 <rx_flush.isra.0>
    3670:	e75d      	b.n	352e <uarte_nrfx_isr_async+0x186>
    p_reg->INTENCLR = mask;
    3672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    3676:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    367a:	2101      	movs	r1, #1
    367c:	4620      	mov	r0, r4
    367e:	f003 f951 	bl	6924 <async_uart_release>
		if (!data->async->tx_size) {
    3682:	68eb      	ldr	r3, [r5, #12]
    3684:	68db      	ldr	r3, [r3, #12]
    3686:	2b00      	cmp	r3, #0
    3688:	d18b      	bne.n	35a2 <uarte_nrfx_isr_async+0x1fa>
    368a:	e6a2      	b.n	33d2 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
    368c:	6882      	ldr	r2, [r0, #8]
    368e:	6903      	ldr	r3, [r0, #16]
    3690:	429a      	cmp	r2, r3
    3692:	d00b      	beq.n	36ac <uarte_nrfx_isr_async+0x304>
		if (amount == data->async->xfer_len) {
    3694:	6942      	ldr	r2, [r0, #20]
			data->async->tx_cache_offset += amount;
    3696:	6a03      	ldr	r3, [r0, #32]
		if (amount == data->async->xfer_len) {
    3698:	42b2      	cmp	r2, r6
			data->async->tx_cache_offset += amount;
    369a:	4433      	add	r3, r6
		if (amount == data->async->xfer_len) {
    369c:	d125      	bne.n	36ea <uarte_nrfx_isr_async+0x342>
			data->async->tx_cache_offset += amount;
    369e:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
    36a0:	f003 f92c 	bl	68fc <setup_tx_cache.isra.0>
    36a4:	2800      	cmp	r0, #0
    36a6:	d19b      	bne.n	35e0 <uarte_nrfx_isr_async+0x238>
			amount = data->async->tx_cache_offset;
    36a8:	68eb      	ldr	r3, [r5, #12]
    36aa:	6a1e      	ldr	r6, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
    36ac:	68e8      	ldr	r0, [r5, #12]
    36ae:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
    36b0:	f003 fe6d 	bl	738e <z_impl_k_timer_stop>
	struct uart_event evt = {
    36b4:	2214      	movs	r2, #20
    36b6:	2100      	movs	r1, #0
    36b8:	a803      	add	r0, sp, #12
    36ba:	f002 fee8 	bl	648e <memset>
		.data.tx.buf = data->async->tx_buf,
    36be:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
    36c0:	689a      	ldr	r2, [r3, #8]
    36c2:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
    36c6:	68da      	ldr	r2, [r3, #12]
    36c8:	4296      	cmp	r6, r2
		evt.type = UART_TX_ABORTED;
    36ca:	bf1c      	itt	ne
    36cc:	2201      	movne	r2, #1
    36ce:	f88d 200c 	strbne.w	r2, [sp, #12]
    36d2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    36d6:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    36da:	2200      	movs	r2, #0
    36dc:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
    36de:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
    36e0:	a903      	add	r1, sp, #12
    36e2:	4620      	mov	r0, r4
    36e4:	f003 f822 	bl	672c <user_callback>
    36e8:	e673      	b.n	33d2 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
    36ea:	461e      	mov	r6, r3
    36ec:	e7de      	b.n	36ac <uarte_nrfx_isr_async+0x304>
    36ee:	bf00      	nop
    36f0:	000f423f 	.word	0x000f423f
    36f4:	000f4240 	.word	0x000f4240

000036f8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    36f8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    36fa:	2301      	movs	r3, #1
    36fc:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    36fe:	4a11      	ldr	r2, [pc, #68]	; (3744 <compare_int_lock+0x4c>)
    3700:	f3bf 8f5b 	dmb	ish
    3704:	43dc      	mvns	r4, r3
    3706:	e852 1f00 	ldrex	r1, [r2]
    370a:	ea01 0c04 	and.w	ip, r1, r4
    370e:	e842 ce00 	strex	lr, ip, [r2]
    3712:	f1be 0f00 	cmp.w	lr, #0
    3716:	d1f6      	bne.n	3706 <compare_int_lock+0xe>
    3718:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    371c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3720:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3724:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3728:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    372c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3730:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3734:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3738:	420b      	tst	r3, r1
}
    373a:	bf14      	ite	ne
    373c:	2001      	movne	r0, #1
    373e:	2000      	moveq	r0, #0
    3740:	bd10      	pop	{r4, pc}
    3742:	bf00      	nop
    3744:	20000d7c 	.word	0x20000d7c

00003748 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3748:	4919      	ldr	r1, [pc, #100]	; (37b0 <sys_clock_timeout_handler+0x68>)
{
    374a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    374c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    374e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3752:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3754:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3758:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    375c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    375e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3762:	d222      	bcs.n	37aa <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3764:	4b13      	ldr	r3, [pc, #76]	; (37b4 <sys_clock_timeout_handler+0x6c>)
    3766:	681b      	ldr	r3, [r3, #0]
    3768:	0a1a      	lsrs	r2, r3, #8
    376a:	061b      	lsls	r3, r3, #24
    376c:	195e      	adds	r6, r3, r5
    376e:	4b12      	ldr	r3, [pc, #72]	; (37b8 <sys_clock_timeout_handler+0x70>)
    3770:	f142 0700 	adc.w	r7, r2, #0
    3774:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    3778:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    377a:	f002 f9ab 	bl	5ad4 <sys_clock_announce>
    return p_reg->CC[ch];
    377e:	00a3      	lsls	r3, r4, #2
    3780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3784:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3788:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    378c:	42aa      	cmp	r2, r5
    378e:	d10b      	bne.n	37a8 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3790:	b91e      	cbnz	r6, 379a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    3792:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3796:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    379a:	4b08      	ldr	r3, [pc, #32]	; (37bc <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    379c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    37a0:	fa00 f404 	lsl.w	r4, r0, r4
    37a4:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    37a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    37aa:	2600      	movs	r6, #0
    37ac:	e7e5      	b.n	377a <sys_clock_timeout_handler+0x32>
    37ae:	bf00      	nop
    37b0:	20000648 	.word	0x20000648
    37b4:	20000d80 	.word	0x20000d80
    37b8:	20000630 	.word	0x20000630
    37bc:	40011000 	.word	0x40011000

000037c0 <compare_int_unlock>:
	if (key) {
    37c0:	b319      	cbz	r1, 380a <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    37c2:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    37c6:	2301      	movs	r3, #1
    37c8:	4a10      	ldr	r2, [pc, #64]	; (380c <compare_int_unlock+0x4c>)
    37ca:	4083      	lsls	r3, r0
    37cc:	e852 1f00 	ldrex	r1, [r2]
    37d0:	4319      	orrs	r1, r3
    37d2:	e842 1c00 	strex	ip, r1, [r2]
    37d6:	f1bc 0f00 	cmp.w	ip, #0
    37da:	d1f7      	bne.n	37cc <compare_int_unlock+0xc>
    37dc:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    37e0:	4a0b      	ldr	r2, [pc, #44]	; (3810 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    37e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    37e6:	4083      	lsls	r3, r0
    37e8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    37ec:	4b09      	ldr	r3, [pc, #36]	; (3814 <compare_int_unlock+0x54>)
    37ee:	f3bf 8f5b 	dmb	ish
    37f2:	681b      	ldr	r3, [r3, #0]
    37f4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    37f8:	fa23 f000 	lsr.w	r0, r3, r0
    37fc:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    37fe:	bf42      	ittt	mi
    3800:	4b05      	ldrmi	r3, [pc, #20]	; (3818 <compare_int_unlock+0x58>)
    3802:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3806:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    380a:	4770      	bx	lr
    380c:	20000d7c 	.word	0x20000d7c
    3810:	40011000 	.word	0x40011000
    3814:	20000d78 	.word	0x20000d78
    3818:	e000e100 	.word	0xe000e100

0000381c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    381c:	4b0d      	ldr	r3, [pc, #52]	; (3854 <z_nrf_rtc_timer_read+0x38>)
    381e:	6818      	ldr	r0, [r3, #0]
    3820:	0a01      	lsrs	r1, r0, #8
    3822:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3824:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3828:	4b0b      	ldr	r3, [pc, #44]	; (3858 <z_nrf_rtc_timer_read+0x3c>)
    382a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    382e:	1818      	adds	r0, r3, r0
    3830:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3838:	d20a      	bcs.n	3850 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    383a:	4b08      	ldr	r3, [pc, #32]	; (385c <z_nrf_rtc_timer_read+0x40>)
    383c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3840:	4290      	cmp	r0, r2
    3842:	eb71 0303 	sbcs.w	r3, r1, r3
    3846:	d203      	bcs.n	3850 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3848:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    384c:	f141 0100 	adc.w	r1, r1, #0
}
    3850:	4770      	bx	lr
    3852:	bf00      	nop
    3854:	20000d80 	.word	0x20000d80
    3858:	40011000 	.word	0x40011000
    385c:	20000630 	.word	0x20000630

00003860 <compare_set>:
{
    3860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3864:	b085      	sub	sp, #20
    3866:	4616      	mov	r6, r2
    3868:	4698      	mov	r8, r3
    386a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    386c:	f7ff ff44 	bl	36f8 <compare_int_lock>
    3870:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3872:	f7ff ffd3 	bl	381c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3876:	42b0      	cmp	r0, r6
    3878:	eb71 0308 	sbcs.w	r3, r1, r8
    387c:	d278      	bcs.n	3970 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    387e:	4b46      	ldr	r3, [pc, #280]	; (3998 <compare_set+0x138>)
    3880:	1a30      	subs	r0, r6, r0
    3882:	eb68 0101 	sbc.w	r1, r8, r1
    3886:	4298      	cmp	r0, r3
    3888:	f171 0300 	sbcs.w	r3, r1, #0
    388c:	f080 8081 	bcs.w	3992 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    3890:	4b42      	ldr	r3, [pc, #264]	; (399c <compare_set+0x13c>)
    3892:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3896:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    389a:	45d8      	cmp	r8, fp
    389c:	bf08      	it	eq
    389e:	4556      	cmpeq	r6, sl
    38a0:	d051      	beq.n	3946 <compare_set+0xe6>
    38a2:	ea4f 0985 	mov.w	r9, r5, lsl #2
    38a6:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    38aa:	f105 0750 	add.w	r7, r5, #80	; 0x50
    38ae:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    38b2:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    38b4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    38b8:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    38bc:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    38be:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    38c2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    38c6:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    38c8:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    38cc:	4b34      	ldr	r3, [pc, #208]	; (39a0 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    38ce:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    38d2:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    38d4:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    38d8:	1a40      	subs	r0, r0, r1
    38da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    38de:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    38e2:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    38e4:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    38e8:	d107      	bne.n	38fa <compare_set+0x9a>
    38ea:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    38ee:	2013      	movs	r0, #19
    38f0:	f003 fd3d 	bl	736e <z_impl_k_busy_wait>
    38f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    38f8:	4b29      	ldr	r3, [pc, #164]	; (39a0 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    38fa:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    38fe:	eba4 000c 	sub.w	r0, r4, ip
    3902:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3906:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    390a:	bf88      	it	hi
    390c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    390e:	2000      	movs	r0, #0
    3910:	6038      	str	r0, [r7, #0]
    3912:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    3914:	9801      	ldr	r0, [sp, #4]
    3916:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    391a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    391e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3922:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3926:	4281      	cmp	r1, r0
    3928:	d006      	beq.n	3938 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    392a:	1a20      	subs	r0, r4, r0
    392c:	3802      	subs	r0, #2
    392e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3932:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3936:	d819      	bhi.n	396c <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    3938:	1aa4      	subs	r4, r4, r2
    393a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    393e:	eb14 0a06 	adds.w	sl, r4, r6
    3942:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    3946:	4915      	ldr	r1, [pc, #84]	; (399c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    3948:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    394a:	012b      	lsls	r3, r5, #4
    394c:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    3950:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    3954:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    3956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3958:	6053      	str	r3, [r2, #4]
	return ret;
    395a:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    395c:	4628      	mov	r0, r5
    395e:	9900      	ldr	r1, [sp, #0]
    3960:	f7ff ff2e 	bl	37c0 <compare_int_unlock>
}
    3964:	4620      	mov	r0, r4
    3966:	b005      	add	sp, #20
    3968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    396c:	4620      	mov	r0, r4
    396e:	e7b1      	b.n	38d4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    3970:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3972:	4a0c      	ldr	r2, [pc, #48]	; (39a4 <compare_set+0x144>)
    3974:	f3bf 8f5b 	dmb	ish
    3978:	40ab      	lsls	r3, r5
    397a:	e852 1f00 	ldrex	r1, [r2]
    397e:	4319      	orrs	r1, r3
    3980:	e842 1000 	strex	r0, r1, [r2]
    3984:	2800      	cmp	r0, #0
    3986:	d1f8      	bne.n	397a <compare_set+0x11a>
    3988:	f3bf 8f5b 	dmb	ish
    398c:	46b2      	mov	sl, r6
    398e:	46c3      	mov	fp, r8
    3990:	e7d9      	b.n	3946 <compare_set+0xe6>
			return -EINVAL;
    3992:	f06f 0415 	mvn.w	r4, #21
    3996:	e7e1      	b.n	395c <compare_set+0xfc>
    3998:	01000001 	.word	0x01000001
    399c:	20000638 	.word	0x20000638
    39a0:	40011000 	.word	0x40011000
    39a4:	20000d78 	.word	0x20000d78

000039a8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    39a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    39aa:	4b19      	ldr	r3, [pc, #100]	; (3a10 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    39ac:	4d19      	ldr	r5, [pc, #100]	; (3a14 <sys_clock_driver_init+0x6c>)
    39ae:	2400      	movs	r4, #0
    39b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    39b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    39b8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    39bc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    39c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    39c4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    39c8:	4b13      	ldr	r3, [pc, #76]	; (3a18 <sys_clock_driver_init+0x70>)
    39ca:	2602      	movs	r6, #2
    39cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    39d0:	2101      	movs	r1, #1
    39d2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    39d6:	2011      	movs	r0, #17
    39d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    39dc:	4622      	mov	r2, r4
    39de:	f7fe fb11 	bl	2004 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    39e2:	2011      	movs	r0, #17
    39e4:	f7fe faf0 	bl	1fc8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    39e8:	4a0c      	ldr	r2, [pc, #48]	; (3a1c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    39ea:	2301      	movs	r3, #1
    39ec:	60ab      	str	r3, [r5, #8]
    39ee:	602b      	str	r3, [r5, #0]
    39f0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    39f2:	4b0b      	ldr	r3, [pc, #44]	; (3a20 <sys_clock_driver_init+0x78>)
    39f4:	4a0b      	ldr	r2, [pc, #44]	; (3a24 <sys_clock_driver_init+0x7c>)
    39f6:	9300      	str	r3, [sp, #0]
    39f8:	9401      	str	r4, [sp, #4]
    39fa:	2300      	movs	r3, #0
    39fc:	4620      	mov	r0, r4
    39fe:	f7ff ff2f 	bl	3860 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3a02:	4630      	mov	r0, r6
    3a04:	f7fe ffd8 	bl	29b8 <z_nrf_clock_control_lf_on>

	return 0;
}
    3a08:	4620      	mov	r0, r4
    3a0a:	b002      	add	sp, #8
    3a0c:	bd70      	pop	{r4, r5, r6, pc}
    3a0e:	bf00      	nop
    3a10:	20000638 	.word	0x20000638
    3a14:	40011000 	.word	0x40011000
    3a18:	e000e100 	.word	0xe000e100
    3a1c:	20000d7c 	.word	0x20000d7c
    3a20:	00003749 	.word	0x00003749
    3a24:	007fffff 	.word	0x007fffff

00003a28 <rtc_nrf_isr>:
{
    3a28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3a2c:	4c35      	ldr	r4, [pc, #212]	; (3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>)
    3a2e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3a32:	079a      	lsls	r2, r3, #30
    3a34:	d50b      	bpl.n	3a4e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3a36:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3a3a:	b143      	cbz	r3, 3a4e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    3a3c:	4a32      	ldr	r2, [pc, #200]	; (3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3a3e:	2300      	movs	r3, #0
    3a40:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3a44:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3a48:	6813      	ldr	r3, [r2, #0]
    3a4a:	3301      	adds	r3, #1
    3a4c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3a4e:	f04f 0320 	mov.w	r3, #32
    3a52:	f3ef 8211 	mrs	r2, BASEPRI
    3a56:	f383 8812 	msr	BASEPRI_MAX, r3
    3a5a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3a5e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3a62:	03db      	lsls	r3, r3, #15
    3a64:	d512      	bpl.n	3a8c <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3a66:	f3bf 8f5b 	dmb	ish
    3a6a:	4b28      	ldr	r3, [pc, #160]	; (3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>)
    3a6c:	e853 1f00 	ldrex	r1, [r3]
    3a70:	f021 0001 	bic.w	r0, r1, #1
    3a74:	e843 0600 	strex	r6, r0, [r3]
    3a78:	2e00      	cmp	r6, #0
    3a7a:	d1f7      	bne.n	3a6c <rtc_nrf_isr+0x44>
    3a7c:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3a80:	2900      	cmp	r1, #0
    3a82:	d136      	bne.n	3af2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3a84:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    3a88:	2b00      	cmp	r3, #0
    3a8a:	d132      	bne.n	3af2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5a>
{
    3a8c:	2300      	movs	r3, #0
	__asm__ volatile(
    3a8e:	f382 8811 	msr	BASEPRI, r2
    3a92:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3a96:	b34b      	cbz	r3, 3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
		curr_time = z_nrf_rtc_timer_read();
    3a98:	f7ff fec0 	bl	381c <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3a9c:	f04f 0320 	mov.w	r3, #32
    3aa0:	f3ef 8c11 	mrs	ip, BASEPRI
    3aa4:	f383 8812 	msr	BASEPRI_MAX, r3
    3aa8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3aac:	4b18      	ldr	r3, [pc, #96]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3aae:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3ab2:	42b0      	cmp	r0, r6
    3ab4:	eb71 0207 	sbcs.w	r2, r1, r7
    3ab8:	f04f 0200 	mov.w	r2, #0
    3abc:	d320      	bcc.n	3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3abe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3ac2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    3ac6:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3aca:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3ace:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3ad4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3ad8:	f38c 8811 	msr	BASEPRI, ip
    3adc:	f3bf 8f6f 	isb	sy
		if (handler) {
    3ae0:	b121      	cbz	r1, 3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
			handler(chan, expire_time, user_context);
    3ae2:	9500      	str	r5, [sp, #0]
    3ae4:	4632      	mov	r2, r6
    3ae6:	463b      	mov	r3, r7
    3ae8:	2000      	movs	r0, #0
    3aea:	4788      	blx	r1
}
    3aec:	b003      	add	sp, #12
    3aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3af2:	2300      	movs	r3, #0
    3af4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    3af8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3afc:	2301      	movs	r3, #1
}
    3afe:	e7c6      	b.n	3a8e <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3b00:	4611      	mov	r1, r2
    3b02:	e7e9      	b.n	3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    3b04:	40011000 	.word	0x40011000
    3b08:	20000d80 	.word	0x20000d80
    3b0c:	20000d78 	.word	0x20000d78
    3b10:	20000638 	.word	0x20000638

00003b14 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3b14:	1c43      	adds	r3, r0, #1
{
    3b16:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3b18:	d021      	beq.n	3b5e <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3b1a:	2801      	cmp	r0, #1
    3b1c:	dd21      	ble.n	3b62 <sys_clock_set_timeout+0x4e>
    3b1e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3b22:	da20      	bge.n	3b66 <sys_clock_set_timeout+0x52>
    3b24:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3b26:	f7ff fe79 	bl	381c <z_nrf_rtc_timer_read>
    3b2a:	4b10      	ldr	r3, [pc, #64]	; (3b6c <sys_clock_set_timeout+0x58>)
    3b2c:	e9d3 1300 	ldrd	r1, r3, [r3]
    3b30:	1a40      	subs	r0, r0, r1
		ticks = 0;
    3b32:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3b36:	bf28      	it	cs
    3b38:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3b3a:	3001      	adds	r0, #1
    3b3c:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    3b3e:	480c      	ldr	r0, [pc, #48]	; (3b70 <sys_clock_set_timeout+0x5c>)
    3b40:	4282      	cmp	r2, r0
    3b42:	bf28      	it	cs
    3b44:	4602      	movcs	r2, r0
    3b46:	1852      	adds	r2, r2, r1
    3b48:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3b4c:	4909      	ldr	r1, [pc, #36]	; (3b74 <sys_clock_set_timeout+0x60>)
    3b4e:	9001      	str	r0, [sp, #4]
    3b50:	9100      	str	r1, [sp, #0]
    3b52:	f143 0300 	adc.w	r3, r3, #0
    3b56:	f7ff fe83 	bl	3860 <compare_set>
}
    3b5a:	b002      	add	sp, #8
    3b5c:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3b5e:	4804      	ldr	r0, [pc, #16]	; (3b70 <sys_clock_set_timeout+0x5c>)
    3b60:	e7e0      	b.n	3b24 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3b62:	2400      	movs	r4, #0
    3b64:	e7df      	b.n	3b26 <sys_clock_set_timeout+0x12>
    3b66:	4c02      	ldr	r4, [pc, #8]	; (3b70 <sys_clock_set_timeout+0x5c>)
    3b68:	e7dd      	b.n	3b26 <sys_clock_set_timeout+0x12>
    3b6a:	bf00      	nop
    3b6c:	20000648 	.word	0x20000648
    3b70:	007fffff 	.word	0x007fffff
    3b74:	00003749 	.word	0x00003749

00003b78 <sys_clock_elapsed>:
{
    3b78:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3b7a:	f7ff fe4f 	bl	381c <z_nrf_rtc_timer_read>
    3b7e:	4b02      	ldr	r3, [pc, #8]	; (3b88 <sys_clock_elapsed+0x10>)
    3b80:	681b      	ldr	r3, [r3, #0]
}
    3b82:	1ac0      	subs	r0, r0, r3
    3b84:	bd08      	pop	{r3, pc}
    3b86:	bf00      	nop
    3b88:	20000648 	.word	0x20000648

00003b8c <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    3b8c:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3b90:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    3b92:	2801      	cmp	r0, #1
    3b94:	4b04      	ldr	r3, [pc, #16]	; (3ba8 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3b96:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    3b9a:	bf18      	it	ne
    3b9c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3ba0:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    3ba2:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    3ba6:	4770      	bx	lr
    3ba8:	50000300 	.word	0x50000300

00003bac <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    3bac:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3bb0:	2b00      	cmp	r3, #0
{
    3bb2:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3bb4:	bf07      	ittee	eq
    3bb6:	4614      	moveq	r4, r2
    3bb8:	460d      	moveq	r5, r1
    3bba:	2401      	movne	r4, #1
    3bbc:	2500      	movne	r5, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    3bbe:	f3c0 1281 	ubfx	r2, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    3bc2:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
    3bc6:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    3bca:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3bce:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
        case 1: return NRF_P1;
    3bd2:	4b06      	ldr	r3, [pc, #24]	; (3bec <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3bd4:	ea42 0205 	orr.w	r2, r2, r5
        case 1: return NRF_P1;
    3bd8:	bf08      	it	eq
    3bda:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3bde:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3be2:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    3be6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    3bea:	bd30      	pop	{r4, r5, pc}
    3bec:	50000300 	.word	0x50000300

00003bf0 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    3bf0:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3bf4:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    3bf6:	2801      	cmp	r0, #1
    3bf8:	4b04      	ldr	r3, [pc, #16]	; (3c0c <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3bfa:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    3bfe:	bf18      	it	ne
    3c00:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3c04:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    3c06:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    3c0a:	4770      	bx	lr
    3c0c:	50000300 	.word	0x50000300

00003c10 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3c10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3c14:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3c18:	2a08      	cmp	r2, #8
    3c1a:	d106      	bne.n	3c2a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3c1c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    3c20:	2b05      	cmp	r3, #5
    3c22:	d802      	bhi.n	3c2a <nrf52_errata_103+0x1a>
    3c24:	4a02      	ldr	r2, [pc, #8]	; (3c30 <nrf52_errata_103+0x20>)
    3c26:	5cd0      	ldrb	r0, [r2, r3]
    3c28:	4770      	bx	lr
        return false;
    3c2a:	2000      	movs	r0, #0
}
    3c2c:	4770      	bx	lr
    3c2e:	bf00      	nop
    3c30:	00007b80 	.word	0x00007b80

00003c34 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3c34:	4a02      	ldr	r2, [pc, #8]	; (3c40 <nvmc_wait+0xc>)
    3c36:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3c3a:	2b00      	cmp	r3, #0
    3c3c:	d0fb      	beq.n	3c36 <nvmc_wait+0x2>
}
    3c3e:	4770      	bx	lr
    3c40:	4001e000 	.word	0x4001e000

00003c44 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3c44:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    3c46:	f003 f890 	bl	6d6a <nrf52_errata_136>
    3c4a:	b140      	cbz	r0, 3c5e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    3c4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3c50:	2200      	movs	r2, #0
    3c52:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3c56:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3c5a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3c5e:	f003 f884 	bl	6d6a <nrf52_errata_136>
    3c62:	2800      	cmp	r0, #0
    3c64:	d046      	beq.n	3cf4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3c6a:	4b60      	ldr	r3, [pc, #384]	; (3dec <SystemInit+0x1a8>)
    3c6c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3c70:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3c74:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3c78:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3c7c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3c80:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3c84:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3c88:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3c8c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3c90:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3c94:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3c98:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3c9c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3ca0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3ca4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3ca8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3cac:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3cb0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3cb4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3cb8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3cbc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3cc0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3cc4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3cc8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3ccc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3cd0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3cd4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3cd8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3cdc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3ce0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3ce4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3ce8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3cec:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3cf0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    3cf4:	f7ff ff8c 	bl	3c10 <nrf52_errata_103>
    3cf8:	b118      	cbz	r0, 3d02 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    3cfa:	4b3d      	ldr	r3, [pc, #244]	; (3df0 <SystemInit+0x1ac>)
    3cfc:	4a3d      	ldr	r2, [pc, #244]	; (3df4 <SystemInit+0x1b0>)
    3cfe:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    3d02:	f7ff ff85 	bl	3c10 <nrf52_errata_103>
    3d06:	b118      	cbz	r0, 3d10 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    3d08:	4b3b      	ldr	r3, [pc, #236]	; (3df8 <SystemInit+0x1b4>)
    3d0a:	22fb      	movs	r2, #251	; 0xfb
    3d0c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    3d10:	f7ff ff7e 	bl	3c10 <nrf52_errata_103>
    3d14:	b170      	cbz	r0, 3d34 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    3d16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3d1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3d1e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    3d22:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    3d26:	f022 020f 	bic.w	r2, r2, #15
    3d2a:	f003 030f 	and.w	r3, r3, #15
    3d2e:	4313      	orrs	r3, r2
    3d30:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    3d34:	f7ff ff6c 	bl	3c10 <nrf52_errata_103>
    3d38:	b120      	cbz	r0, 3d44 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    3d3a:	4b30      	ldr	r3, [pc, #192]	; (3dfc <SystemInit+0x1b8>)
    3d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
    3d40:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3d44:	f003 f811 	bl	6d6a <nrf52_errata_136>
    3d48:	b148      	cbz	r0, 3d5e <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3d4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d4e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3d52:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3d54:	bf44      	itt	mi
    3d56:	f06f 0201 	mvnmi.w	r2, #1
    3d5a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3d5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3d62:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3d66:	2a08      	cmp	r2, #8
    3d68:	d10e      	bne.n	3d88 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3d6a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    3d6e:	2b05      	cmp	r3, #5
    3d70:	d802      	bhi.n	3d78 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    3d72:	4a23      	ldr	r2, [pc, #140]	; (3e00 <SystemInit+0x1bc>)
    3d74:	5cd3      	ldrb	r3, [r2, r3]
    3d76:	b13b      	cbz	r3, 3d88 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    3d78:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3d7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    3d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d84:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3d88:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3d8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3d90:	2a00      	cmp	r2, #0
    3d92:	db03      	blt.n	3d9c <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3d94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3d98:	2b00      	cmp	r3, #0
    3d9a:	da22      	bge.n	3de2 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3d9c:	4919      	ldr	r1, [pc, #100]	; (3e04 <SystemInit+0x1c0>)
    3d9e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3da0:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3da4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3da8:	2412      	movs	r4, #18
    nvmc_wait();
    3daa:	f7ff ff43 	bl	3c34 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3dae:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    3db2:	f7ff ff3f 	bl	3c34 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3db6:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    3dba:	f7ff ff3b 	bl	3c34 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3dbe:	2300      	movs	r3, #0
    3dc0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3dc4:	f7ff ff36 	bl	3c34 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    3dc8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3dcc:	490e      	ldr	r1, [pc, #56]	; (3e08 <SystemInit+0x1c4>)
    3dce:	4b0f      	ldr	r3, [pc, #60]	; (3e0c <SystemInit+0x1c8>)
    3dd0:	68ca      	ldr	r2, [r1, #12]
    3dd2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3dd6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3dd8:	60cb      	str	r3, [r1, #12]
    3dda:	f3bf 8f4f 	dsb	sy
    __NOP();
    3dde:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3de0:	e7fd      	b.n	3dde <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3de2:	4b0b      	ldr	r3, [pc, #44]	; (3e10 <SystemInit+0x1cc>)
    3de4:	4a0b      	ldr	r2, [pc, #44]	; (3e14 <SystemInit+0x1d0>)
    3de6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    3de8:	bd10      	pop	{r4, pc}
    3dea:	bf00      	nop
    3dec:	4000c000 	.word	0x4000c000
    3df0:	40005000 	.word	0x40005000
    3df4:	00038148 	.word	0x00038148
    3df8:	4000f000 	.word	0x4000f000
    3dfc:	40029000 	.word	0x40029000
    3e00:	00007b7a 	.word	0x00007b7a
    3e04:	4001e000 	.word	0x4001e000
    3e08:	e000ed00 	.word	0xe000ed00
    3e0c:	05fa0004 	.word	0x05fa0004
    3e10:	200000a8 	.word	0x200000a8
    3e14:	03d09000 	.word	0x03d09000

00003e18 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3e18:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3e1a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3e1c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3e1e:	fab2 f382 	clz	r3, r2
    3e22:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    3e26:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    3e28:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    3e2a:	d014      	beq.n	3e56 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3e2c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3e30:	fa05 f303 	lsl.w	r3, r5, r3
    3e34:	ea22 0303 	bic.w	r3, r2, r3
    3e38:	e850 6f00 	ldrex	r6, [r0]
    3e3c:	4296      	cmp	r6, r2
    3e3e:	d104      	bne.n	3e4a <nrfx_flag32_alloc+0x32>
    3e40:	e840 3c00 	strex	ip, r3, [r0]
    3e44:	f1bc 0f00 	cmp.w	ip, #0
    3e48:	d1f6      	bne.n	3e38 <nrfx_flag32_alloc+0x20>
    3e4a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3e4e:	d1e5      	bne.n	3e1c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3e50:	4802      	ldr	r0, [pc, #8]	; (3e5c <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    3e52:	700c      	strb	r4, [r1, #0]
}
    3e54:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3e56:	4802      	ldr	r0, [pc, #8]	; (3e60 <nrfx_flag32_alloc+0x48>)
    3e58:	e7fc      	b.n	3e54 <nrfx_flag32_alloc+0x3c>
    3e5a:	bf00      	nop
    3e5c:	0bad0000 	.word	0x0bad0000
    3e60:	0bad0002 	.word	0x0bad0002

00003e64 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3e64:	6803      	ldr	r3, [r0, #0]
    3e66:	40cb      	lsrs	r3, r1
    3e68:	07db      	lsls	r3, r3, #31
{
    3e6a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3e6c:	d415      	bmi.n	3e9a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3e6e:	2301      	movs	r3, #1
    3e70:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    3e74:	6803      	ldr	r3, [r0, #0]
    3e76:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    3e7a:	ea41 0203 	orr.w	r2, r1, r3
    3e7e:	e850 4f00 	ldrex	r4, [r0]
    3e82:	429c      	cmp	r4, r3
    3e84:	d104      	bne.n	3e90 <nrfx_flag32_free+0x2c>
    3e86:	e840 2c00 	strex	ip, r2, [r0]
    3e8a:	f1bc 0f00 	cmp.w	ip, #0
    3e8e:	d1f6      	bne.n	3e7e <nrfx_flag32_free+0x1a>
    3e90:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3e94:	d1ee      	bne.n	3e74 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3e96:	4802      	ldr	r0, [pc, #8]	; (3ea0 <nrfx_flag32_free+0x3c>)
}
    3e98:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3e9a:	4802      	ldr	r0, [pc, #8]	; (3ea4 <nrfx_flag32_free+0x40>)
    3e9c:	e7fc      	b.n	3e98 <nrfx_flag32_free+0x34>
    3e9e:	bf00      	nop
    3ea0:	0bad0000 	.word	0x0bad0000
    3ea4:	0bad0004 	.word	0x0bad0004

00003ea8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    3ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    3eaa:	4604      	mov	r4, r0
    3eac:	b118      	cbz	r0, 3eb6 <clock_stop+0xe>
    3eae:	2801      	cmp	r0, #1
    3eb0:	d029      	beq.n	3f06 <clock_stop+0x5e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3eb2:	b003      	add	sp, #12
    3eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    3eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3eba:	2202      	movs	r2, #2
    3ebc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ec0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    3ec4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ec8:	2201      	movs	r2, #1
    3eca:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3ecc:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3ece:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3ed0:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3ed4:	bf14      	ite	ne
    3ed6:	2500      	movne	r5, #0
    3ed8:	f10d 0507 	addeq.w	r5, sp, #7
    3edc:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3ee0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    3ee4:	b1d4      	cbz	r4, 3f1c <clock_stop+0x74>
    3ee6:	2c01      	cmp	r4, #1
    3ee8:	d1e3      	bne.n	3eb2 <clock_stop+0xa>
            if (p_clk_src != NULL)
    3eea:	b125      	cbz	r5, 3ef6 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3eec:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3ef0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3ef4:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3ef6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3efa:	03db      	lsls	r3, r3, #15
    3efc:	d418      	bmi.n	3f30 <clock_stop+0x88>
            m_clock_cb.hfclk_started = false;
    3efe:	4b13      	ldr	r3, [pc, #76]	; (3f4c <clock_stop+0xa4>)
    3f00:	2200      	movs	r2, #0
    3f02:	715a      	strb	r2, [r3, #5]
    3f04:	e7d5      	b.n	3eb2 <clock_stop+0xa>
    p_reg->INTENCLR = mask;
    3f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f0a:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3f0c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f10:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3f14:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f18:	6058      	str	r0, [r3, #4]
}
    3f1a:	e7d7      	b.n	3ecc <clock_stop+0x24>
            if (p_clk_src != NULL)
    3f1c:	b125      	cbz	r5, 3f28 <clock_stop+0x80>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3f1e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3f22:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3f26:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3f28:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    3f2c:	03da      	lsls	r2, r3, #15
    3f2e:	d5c0      	bpl.n	3eb2 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3f30:	b92d      	cbnz	r5, 3f3e <clock_stop+0x96>
    3f32:	2001      	movs	r0, #1
    3f34:	f002 ff23 	bl	6d7e <nrfx_busy_wait>
    3f38:	3f01      	subs	r7, #1
    3f3a:	d1d3      	bne.n	3ee4 <clock_stop+0x3c>
    3f3c:	e003      	b.n	3f46 <clock_stop+0x9e>
    3f3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3f42:	2b01      	cmp	r3, #1
    3f44:	d0f5      	beq.n	3f32 <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    3f46:	2c01      	cmp	r4, #1
    3f48:	d0d9      	beq.n	3efe <clock_stop+0x56>
    3f4a:	e7b2      	b.n	3eb2 <clock_stop+0xa>
    3f4c:	20000d84 	.word	0x20000d84

00003f50 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3f50:	4b04      	ldr	r3, [pc, #16]	; (3f64 <nrfx_clock_init+0x14>)
    3f52:	791a      	ldrb	r2, [r3, #4]
    3f54:	b922      	cbnz	r2, 3f60 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3f56:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    3f58:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3f5a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3f5c:	4802      	ldr	r0, [pc, #8]	; (3f68 <nrfx_clock_init+0x18>)
    3f5e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3f60:	4802      	ldr	r0, [pc, #8]	; (3f6c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3f62:	4770      	bx	lr
    3f64:	20000d84 	.word	0x20000d84
    3f68:	0bad0000 	.word	0x0bad0000
    3f6c:	0bad000c 	.word	0x0bad000c

00003f70 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3f70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3f74:	b510      	push	{r4, lr}
    3f76:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3f7a:	b16a      	cbz	r2, 3f98 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f7c:	2200      	movs	r2, #0
    3f7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3f82:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    3f86:	2201      	movs	r2, #1
    3f88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3f8c:	4b11      	ldr	r3, [pc, #68]	; (3fd4 <nrfx_power_clock_irq_handler+0x64>)
    3f8e:	7958      	ldrb	r0, [r3, #5]
    3f90:	b910      	cbnz	r0, 3f98 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    3f92:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3f94:	681b      	ldr	r3, [r3, #0]
    3f96:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f9c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3fa0:	b172      	cbz	r2, 3fc0 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3fa2:	2200      	movs	r2, #0
    3fa4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3fa8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3fac:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3fb0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3fb4:	0792      	lsls	r2, r2, #30
    3fb6:	d104      	bne.n	3fc2 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3fb8:	2201      	movs	r2, #1
    3fba:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fbe:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3fc0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3fc2:	2202      	movs	r2, #2
    3fc4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3fc8:	4b02      	ldr	r3, [pc, #8]	; (3fd4 <nrfx_power_clock_irq_handler+0x64>)
}
    3fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3fce:	681b      	ldr	r3, [r3, #0]
    3fd0:	2001      	movs	r0, #1
    3fd2:	4718      	bx	r3
    3fd4:	20000d84 	.word	0x20000d84

00003fd8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    3fd8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    3fda:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    3fde:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    3fe0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    3fe2:	6002      	str	r2, [r0, #0]
}
    3fe4:	4802      	ldr	r0, [pc, #8]	; (3ff0 <nrf_gpio_pin_port_decode+0x18>)
    3fe6:	bf18      	it	ne
    3fe8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    3fec:	4770      	bx	lr
    3fee:	bf00      	nop
    3ff0:	50000300 	.word	0x50000300

00003ff4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3ff4:	4b03      	ldr	r3, [pc, #12]	; (4004 <pin_in_use_by_te+0x10>)
    3ff6:	3008      	adds	r0, #8
    3ff8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3ffc:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4000:	4770      	bx	lr
    4002:	bf00      	nop
    4004:	200000ac 	.word	0x200000ac

00004008 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4008:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    400a:	f100 0308 	add.w	r3, r0, #8
    400e:	4c0c      	ldr	r4, [pc, #48]	; (4040 <call_handler+0x38>)
    4010:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4014:	05da      	lsls	r2, r3, #23
{
    4016:	4605      	mov	r5, r0
    4018:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    401a:	d507      	bpl.n	402c <call_handler+0x24>
    401c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4020:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4024:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4028:	6852      	ldr	r2, [r2, #4]
    402a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    402c:	68a3      	ldr	r3, [r4, #8]
    402e:	b12b      	cbz	r3, 403c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4030:	68e2      	ldr	r2, [r4, #12]
    4032:	4631      	mov	r1, r6
    4034:	4628      	mov	r0, r5
    }
}
    4036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    403a:	4718      	bx	r3
}
    403c:	bd70      	pop	{r4, r5, r6, pc}
    403e:	bf00      	nop
    4040:	200000ac 	.word	0x200000ac

00004044 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4044:	4a12      	ldr	r2, [pc, #72]	; (4090 <release_handler+0x4c>)
    4046:	3008      	adds	r0, #8
{
    4048:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    404a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    404e:	05d9      	lsls	r1, r3, #23
    4050:	d51b      	bpl.n	408a <release_handler+0x46>
    4052:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4056:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    405a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    405e:	f102 0410 	add.w	r4, r2, #16
    4062:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4064:	f834 3b02 	ldrh.w	r3, [r4], #2
    4068:	f413 7f80 	tst.w	r3, #256	; 0x100
    406c:	d003      	beq.n	4076 <release_handler+0x32>
    406e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4072:	4299      	cmp	r1, r3
    4074:	d009      	beq.n	408a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4076:	3001      	adds	r0, #1
    4078:	2830      	cmp	r0, #48	; 0x30
    407a:	d1f3      	bne.n	4064 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    407c:	2300      	movs	r3, #0
    407e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4082:	4804      	ldr	r0, [pc, #16]	; (4094 <release_handler+0x50>)
}
    4084:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4086:	f7ff beed 	b.w	3e64 <nrfx_flag32_free>
}
    408a:	bc10      	pop	{r4}
    408c:	4770      	bx	lr
    408e:	bf00      	nop
    4090:	200000ac 	.word	0x200000ac
    4094:	20000120 	.word	0x20000120

00004098 <pin_handler_trigger_uninit>:
{
    4098:	b538      	push	{r3, r4, r5, lr}
    409a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    409c:	f7ff ffaa 	bl	3ff4 <pin_in_use_by_te>
    40a0:	4c09      	ldr	r4, [pc, #36]	; (40c8 <pin_handler_trigger_uninit+0x30>)
    40a2:	f102 0508 	add.w	r5, r2, #8
    40a6:	b140      	cbz	r0, 40ba <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    40a8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    40ac:	4907      	ldr	r1, [pc, #28]	; (40cc <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    40ae:	0b5b      	lsrs	r3, r3, #13
    40b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    40b4:	2000      	movs	r0, #0
    40b6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    40ba:	4610      	mov	r0, r2
    40bc:	f7ff ffc2 	bl	4044 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    40c0:	2300      	movs	r3, #0
    40c2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    40c6:	bd38      	pop	{r3, r4, r5, pc}
    40c8:	200000ac 	.word	0x200000ac
    40cc:	40006000 	.word	0x40006000

000040d0 <nrfx_gpiote_input_configure>:
{
    40d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    40d4:	4604      	mov	r4, r0
    40d6:	4617      	mov	r7, r2
    40d8:	461d      	mov	r5, r3
    if (p_input_config)
    40da:	b321      	cbz	r1, 4126 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    40dc:	4e4e      	ldr	r6, [pc, #312]	; (4218 <nrfx_gpiote_input_configure+0x148>)
    40de:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    40e2:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    40e6:	079b      	lsls	r3, r3, #30
    40e8:	d506      	bpl.n	40f8 <nrfx_gpiote_input_configure+0x28>
    40ea:	f7ff ff83 	bl	3ff4 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    40ee:	b118      	cbz	r0, 40f8 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    40f0:	484a      	ldr	r0, [pc, #296]	; (421c <nrfx_gpiote_input_configure+0x14c>)
}
    40f2:	b004      	add	sp, #16
    40f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    40f8:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    40fa:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    40fe:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    4102:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4106:	f10d 020f 	add.w	r2, sp, #15
    410a:	460b      	mov	r3, r1
    410c:	4620      	mov	r0, r4
    410e:	f10d 010e 	add.w	r1, sp, #14
    4112:	f002 fe82 	bl	6e1a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4116:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    411a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    411e:	f043 0301 	orr.w	r3, r3, #1
    4122:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    4126:	b197      	cbz	r7, 414e <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4128:	4b3b      	ldr	r3, [pc, #236]	; (4218 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    412a:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    412c:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    412e:	f104 0008 	add.w	r0, r4, #8
    4132:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    4136:	078f      	lsls	r7, r1, #30
    4138:	d50c      	bpl.n	4154 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    413a:	2a00      	cmp	r2, #0
    413c:	d1d8      	bne.n	40f0 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    413e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    4142:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4146:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    414a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    414e:	bbcd      	cbnz	r5, 41c4 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    4150:	4833      	ldr	r0, [pc, #204]	; (4220 <nrfx_gpiote_input_configure+0x150>)
    4152:	e7ce      	b.n	40f2 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4154:	f021 0120 	bic.w	r1, r1, #32
    4158:	04c9      	lsls	r1, r1, #19
    415a:	0cc9      	lsrs	r1, r1, #19
    415c:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    4160:	2a00      	cmp	r2, #0
    4162:	d0ec      	beq.n	413e <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    4164:	2e03      	cmp	r6, #3
    4166:	d8c3      	bhi.n	40f0 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4168:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    416a:	b92e      	cbnz	r6, 4178 <nrfx_gpiote_input_configure+0xa8>
    416c:	4a2d      	ldr	r2, [pc, #180]	; (4224 <nrfx_gpiote_input_configure+0x154>)
    416e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    4172:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4176:	e7e2      	b.n	413e <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4178:	00ba      	lsls	r2, r7, #2
    417a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    417e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4182:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    4186:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    418a:	f02c 0c03 	bic.w	ip, ip, #3
    418e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4192:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4196:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    419a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    419e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    41a2:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    41a6:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    41aa:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    41ae:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    41b2:	ea4c 0c0e 	orr.w	ip, ip, lr
    41b6:	f041 0120 	orr.w	r1, r1, #32
    41ba:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    41be:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    41c2:	e7bc      	b.n	413e <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    41c4:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    41c8:	4620      	mov	r0, r4
    41ca:	f7ff ff3b 	bl	4044 <release_handler>
    if (!handler)
    41ce:	2e00      	cmp	r6, #0
    41d0:	d0be      	beq.n	4150 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    41d2:	4d11      	ldr	r5, [pc, #68]	; (4218 <nrfx_gpiote_input_configure+0x148>)
    41d4:	682b      	ldr	r3, [r5, #0]
    41d6:	429e      	cmp	r6, r3
    41d8:	d104      	bne.n	41e4 <nrfx_gpiote_input_configure+0x114>
    41da:	686b      	ldr	r3, [r5, #4]
    41dc:	429f      	cmp	r7, r3
    41de:	d101      	bne.n	41e4 <nrfx_gpiote_input_configure+0x114>
    41e0:	2200      	movs	r2, #0
    41e2:	e00a      	b.n	41fa <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    41e4:	4810      	ldr	r0, [pc, #64]	; (4228 <nrfx_gpiote_input_configure+0x158>)
    41e6:	f10d 010f 	add.w	r1, sp, #15
    41ea:	f7ff fe15 	bl	3e18 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    41ee:	4b0c      	ldr	r3, [pc, #48]	; (4220 <nrfx_gpiote_input_configure+0x150>)
    41f0:	4298      	cmp	r0, r3
    41f2:	f47f af7e 	bne.w	40f2 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    41f6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    41fa:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    41fe:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4202:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4204:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4206:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    420a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    420e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4212:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4216:	e79b      	b.n	4150 <nrfx_gpiote_input_configure+0x80>
    4218:	200000ac 	.word	0x200000ac
    421c:	0bad0004 	.word	0x0bad0004
    4220:	0bad0000 	.word	0x0bad0000
    4224:	40006000 	.word	0x40006000
    4228:	20000120 	.word	0x20000120

0000422c <nrfx_gpiote_output_configure>:
{
    422c:	b5f0      	push	{r4, r5, r6, r7, lr}
    422e:	4604      	mov	r4, r0
    4230:	b085      	sub	sp, #20
    4232:	4615      	mov	r5, r2
    if (p_config)
    4234:	b319      	cbz	r1, 427e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4236:	4e33      	ldr	r6, [pc, #204]	; (4304 <nrfx_gpiote_output_configure+0xd8>)
    4238:	f100 0708 	add.w	r7, r0, #8
    423c:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4240:	0793      	lsls	r3, r2, #30
    4242:	d403      	bmi.n	424c <nrfx_gpiote_output_configure+0x20>
    4244:	f7ff fed6 	bl	3ff4 <pin_in_use_by_te>
    4248:	2800      	cmp	r0, #0
    424a:	d158      	bne.n	42fe <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    424c:	f012 0f1c 	tst.w	r2, #28
    4250:	d002      	beq.n	4258 <nrfx_gpiote_output_configure+0x2c>
    4252:	784b      	ldrb	r3, [r1, #1]
    4254:	2b01      	cmp	r3, #1
    4256:	d052      	beq.n	42fe <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4258:	2301      	movs	r3, #1
    425a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    425e:	2300      	movs	r3, #0
    4260:	e9cd 1300 	strd	r1, r3, [sp]
    4264:	1c4a      	adds	r2, r1, #1
    4266:	1c8b      	adds	r3, r1, #2
    4268:	4620      	mov	r0, r4
    426a:	f10d 010f 	add.w	r1, sp, #15
    426e:	f002 fdd4 	bl	6e1a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4272:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4276:	f043 0303 	orr.w	r3, r3, #3
    427a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    427e:	b915      	cbnz	r5, 4286 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    4280:	4821      	ldr	r0, [pc, #132]	; (4308 <nrfx_gpiote_output_configure+0xdc>)
}
    4282:	b005      	add	sp, #20
    4284:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4286:	4e1f      	ldr	r6, [pc, #124]	; (4304 <nrfx_gpiote_output_configure+0xd8>)
    4288:	f104 0708 	add.w	r7, r4, #8
    428c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4290:	0783      	lsls	r3, r0, #30
    4292:	d534      	bpl.n	42fe <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    4294:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4298:	4661      	mov	r1, ip
    429a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    429c:	f020 0020 	bic.w	r0, r0, #32
    42a0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    42a4:	04c0      	lsls	r0, r0, #19
    42a6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    42aa:	0cc0      	lsrs	r0, r0, #19
    42ac:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    42b0:	2300      	movs	r3, #0
    42b2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    42b6:	786a      	ldrb	r2, [r5, #1]
    42b8:	2a00      	cmp	r2, #0
    42ba:	d0e1      	beq.n	4280 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    42bc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    42c0:	78ad      	ldrb	r5, [r5, #2]
    42c2:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    42c6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    42ca:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    42ce:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    42d2:	0223      	lsls	r3, r4, #8
    42d4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    42d8:	0412      	lsls	r2, r2, #16
    42da:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    42de:	ea43 030e 	orr.w	r3, r3, lr
    42e2:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    42e4:	052a      	lsls	r2, r5, #20
    42e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    42ea:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    42ee:	4313      	orrs	r3, r2
    42f0:	f040 0020 	orr.w	r0, r0, #32
    42f4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    42f8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    42fc:	e7c0      	b.n	4280 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    42fe:	4803      	ldr	r0, [pc, #12]	; (430c <nrfx_gpiote_output_configure+0xe0>)
    4300:	e7bf      	b.n	4282 <nrfx_gpiote_output_configure+0x56>
    4302:	bf00      	nop
    4304:	200000ac 	.word	0x200000ac
    4308:	0bad0000 	.word	0x0bad0000
    430c:	0bad0004 	.word	0x0bad0004

00004310 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4310:	4b01      	ldr	r3, [pc, #4]	; (4318 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4312:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4316:	4770      	bx	lr
    4318:	200000ac 	.word	0x200000ac

0000431c <nrfx_gpiote_channel_get>:
{
    431c:	b508      	push	{r3, lr}
    431e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4320:	f7ff fe68 	bl	3ff4 <pin_in_use_by_te>
    4324:	b138      	cbz	r0, 4336 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4326:	4b05      	ldr	r3, [pc, #20]	; (433c <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    4328:	4805      	ldr	r0, [pc, #20]	; (4340 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    432a:	3208      	adds	r2, #8
    432c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    4330:	0b5b      	lsrs	r3, r3, #13
    4332:	700b      	strb	r3, [r1, #0]
}
    4334:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4336:	4803      	ldr	r0, [pc, #12]	; (4344 <nrfx_gpiote_channel_get+0x28>)
    4338:	e7fc      	b.n	4334 <nrfx_gpiote_channel_get+0x18>
    433a:	bf00      	nop
    433c:	200000ac 	.word	0x200000ac
    4340:	0bad0000 	.word	0x0bad0000
    4344:	0bad0004 	.word	0x0bad0004

00004348 <nrfx_gpiote_init>:
{
    4348:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    434a:	4c0f      	ldr	r4, [pc, #60]	; (4388 <nrfx_gpiote_init+0x40>)
    434c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4350:	b9bd      	cbnz	r5, 4382 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4352:	2260      	movs	r2, #96	; 0x60
    4354:	4629      	mov	r1, r5
    4356:	f104 0010 	add.w	r0, r4, #16
    435a:	f002 f898 	bl	648e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    435e:	2006      	movs	r0, #6
    4360:	f7fd fe32 	bl	1fc8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4364:	4b09      	ldr	r3, [pc, #36]	; (438c <nrfx_gpiote_init+0x44>)
    return err_code;
    4366:	480a      	ldr	r0, [pc, #40]	; (4390 <nrfx_gpiote_init+0x48>)
    4368:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    436c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4370:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4374:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4378:	2301      	movs	r3, #1
    437a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    437e:	6763      	str	r3, [r4, #116]	; 0x74
}
    4380:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4382:	4804      	ldr	r0, [pc, #16]	; (4394 <nrfx_gpiote_init+0x4c>)
    4384:	e7fc      	b.n	4380 <nrfx_gpiote_init+0x38>
    4386:	bf00      	nop
    4388:	200000ac 	.word	0x200000ac
    438c:	40006000 	.word	0x40006000
    4390:	0bad0000 	.word	0x0bad0000
    4394:	0bad0005 	.word	0x0bad0005

00004398 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4398:	4b03      	ldr	r3, [pc, #12]	; (43a8 <nrfx_gpiote_is_init+0x10>)
    439a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    439e:	3800      	subs	r0, #0
    43a0:	bf18      	it	ne
    43a2:	2001      	movne	r0, #1
    43a4:	4770      	bx	lr
    43a6:	bf00      	nop
    43a8:	200000ac 	.word	0x200000ac

000043ac <nrfx_gpiote_channel_free>:
{
    43ac:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    43ae:	4801      	ldr	r0, [pc, #4]	; (43b4 <nrfx_gpiote_channel_free+0x8>)
    43b0:	f7ff bd58 	b.w	3e64 <nrfx_flag32_free>
    43b4:	2000011c 	.word	0x2000011c

000043b8 <nrfx_gpiote_channel_alloc>:
{
    43b8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    43ba:	4801      	ldr	r0, [pc, #4]	; (43c0 <nrfx_gpiote_channel_alloc+0x8>)
    43bc:	f7ff bd2c 	b.w	3e18 <nrfx_flag32_alloc>
    43c0:	2000011c 	.word	0x2000011c

000043c4 <nrfx_gpiote_trigger_enable>:
{
    43c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    43c6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    43c8:	f7ff fe14 	bl	3ff4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    43cc:	f104 0208 	add.w	r2, r4, #8
    43d0:	4b1e      	ldr	r3, [pc, #120]	; (444c <nrfx_gpiote_trigger_enable+0x88>)
    43d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    43d6:	b1e8      	cbz	r0, 4414 <nrfx_gpiote_trigger_enable+0x50>
    43d8:	f013 0502 	ands.w	r5, r3, #2
    43dc:	d11a      	bne.n	4414 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    43de:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    43e0:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    43e2:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    43e6:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    43ea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    43ee:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    43f2:	6005      	str	r5, [r0, #0]
    43f4:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    43f6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    43fa:	f040 0001 	orr.w	r0, r0, #1
    43fe:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4402:	b129      	cbz	r1, 4410 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4404:	2201      	movs	r2, #1
    4406:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    440a:	4a11      	ldr	r2, [pc, #68]	; (4450 <nrfx_gpiote_trigger_enable+0x8c>)
    440c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4410:	b003      	add	sp, #12
    4412:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4414:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4418:	2b04      	cmp	r3, #4
    441a:	d012      	beq.n	4442 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    441c:	2b05      	cmp	r3, #5
    441e:	d012      	beq.n	4446 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4420:	a801      	add	r0, sp, #4
    4422:	9401      	str	r4, [sp, #4]
    4424:	f7ff fdd8 	bl	3fd8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4428:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    442a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    442e:	40d9      	lsrs	r1, r3
    4430:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4434:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4436:	4620      	mov	r0, r4
}
    4438:	b003      	add	sp, #12
    443a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    443e:	f002 bd33 	b.w	6ea8 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4442:	2103      	movs	r1, #3
    4444:	e7f7      	b.n	4436 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4446:	2102      	movs	r1, #2
    4448:	e7f5      	b.n	4436 <nrfx_gpiote_trigger_enable+0x72>
    444a:	bf00      	nop
    444c:	200000ac 	.word	0x200000ac
    4450:	40006000 	.word	0x40006000

00004454 <nrfx_gpiote_trigger_disable>:
{
    4454:	b508      	push	{r3, lr}
    4456:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4458:	f7ff fdcc 	bl	3ff4 <pin_in_use_by_te>
    445c:	b1c0      	cbz	r0, 4490 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    445e:	f102 0108 	add.w	r1, r2, #8
    4462:	4b0e      	ldr	r3, [pc, #56]	; (449c <nrfx_gpiote_trigger_disable+0x48>)
    4464:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4468:	0799      	lsls	r1, r3, #30
    446a:	d411      	bmi.n	4490 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    446c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    446e:	2201      	movs	r2, #1
    4470:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4472:	009b      	lsls	r3, r3, #2
    4474:	490a      	ldr	r1, [pc, #40]	; (44a0 <nrfx_gpiote_trigger_disable+0x4c>)
    4476:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    447a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    447e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4482:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4486:	f022 0203 	bic.w	r2, r2, #3
    448a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    448e:	bd08      	pop	{r3, pc}
    4490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4494:	2100      	movs	r1, #0
    4496:	4610      	mov	r0, r2
    4498:	f002 bd06 	b.w	6ea8 <nrf_gpio_cfg_sense_set>
    449c:	200000ac 	.word	0x200000ac
    44a0:	40006000 	.word	0x40006000

000044a4 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    44a4:	4b0e      	ldr	r3, [pc, #56]	; (44e0 <nrfx_gpiote_pin_uninit+0x3c>)
    44a6:	f100 0208 	add.w	r2, r0, #8
{
    44aa:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    44ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    44b0:	07db      	lsls	r3, r3, #31
{
    44b2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    44b4:	d511      	bpl.n	44da <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    44b6:	f7ff ffcd 	bl	4454 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    44ba:	4620      	mov	r0, r4
    44bc:	f7ff fdec 	bl	4098 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    44c0:	a801      	add	r0, sp, #4
    44c2:	9401      	str	r4, [sp, #4]
    44c4:	f7ff fd88 	bl	3fd8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    44c8:	9b01      	ldr	r3, [sp, #4]
    44ca:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    44ce:	2202      	movs	r2, #2
    44d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    44d4:	4803      	ldr	r0, [pc, #12]	; (44e4 <nrfx_gpiote_pin_uninit+0x40>)
}
    44d6:	b002      	add	sp, #8
    44d8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    44da:	4803      	ldr	r0, [pc, #12]	; (44e8 <nrfx_gpiote_pin_uninit+0x44>)
    44dc:	e7fb      	b.n	44d6 <nrfx_gpiote_pin_uninit+0x32>
    44de:	bf00      	nop
    44e0:	200000ac 	.word	0x200000ac
    44e4:	0bad0000 	.word	0x0bad0000
    44e8:	0bad0004 	.word	0x0bad0004

000044ec <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    44ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44f0:	4b64      	ldr	r3, [pc, #400]	; (4684 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    44f2:	4865      	ldr	r0, [pc, #404]	; (4688 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    44f4:	4965      	ldr	r1, [pc, #404]	; (468c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    44f6:	2600      	movs	r6, #0
{
    44f8:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    44fa:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    44fc:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    44fe:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4500:	b135      	cbz	r5, 4510 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4502:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    4506:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4508:	bf1e      	ittt	ne
    450a:	601c      	strne	r4, [r3, #0]
    450c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    450e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4510:	3304      	adds	r3, #4
    4512:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4514:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4518:	d1f1      	bne.n	44fe <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    451a:	f8df 816c 	ldr.w	r8, [pc, #364]	; 4688 <nrfx_gpiote_irq_handler+0x19c>
    451e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4522:	2b00      	cmp	r3, #0
    4524:	f000 8091 	beq.w	464a <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    4528:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    452c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4530:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4532:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4536:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    453a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    453c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4540:	2700      	movs	r7, #0
            while (latch[i])
    4542:	f10d 0910 	add.w	r9, sp, #16
    4546:	017b      	lsls	r3, r7, #5
    4548:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    454a:	f04f 0a01 	mov.w	sl, #1
    454e:	e049      	b.n	45e4 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    4550:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4552:	4a4f      	ldr	r2, [pc, #316]	; (4690 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    4554:	fa94 f4a4 	rbit	r4, r4
    4558:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    455c:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    455e:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4562:	08e0      	lsrs	r0, r4, #3
    4564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4568:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    456a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    456e:	fa0a fc02 	lsl.w	ip, sl, r2
    4572:	f819 2000 	ldrb.w	r2, [r9, r0]
    4576:	ea22 020c 	bic.w	r2, r2, ip
    457a:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    457e:	a803      	add	r0, sp, #12
    4580:	f3c3 0582 	ubfx	r5, r3, #2, #3
    4584:	0899      	lsrs	r1, r3, #2
    4586:	f7ff fd27 	bl	3fd8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    458a:	9a03      	ldr	r2, [sp, #12]
    458c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    4590:	074b      	lsls	r3, r1, #29
    4592:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4596:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4598:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    459c:	d529      	bpl.n	45f2 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    459e:	4620      	mov	r0, r4
    45a0:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    45a2:	b2d5      	uxtb	r5, r2
    45a4:	f7ff fd30 	bl	4008 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    45a8:	a803      	add	r0, sp, #12
    45aa:	9403      	str	r4, [sp, #12]
    45ac:	f7ff fd14 	bl	3fd8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    45b0:	9b03      	ldr	r3, [sp, #12]
    45b2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    45b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    45ba:	f3c3 4301 	ubfx	r3, r3, #16, #2
    45be:	429d      	cmp	r5, r3
    45c0:	d107      	bne.n	45d2 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    45c2:	2100      	movs	r1, #0
    45c4:	4620      	mov	r0, r4
    45c6:	f002 fc6f 	bl	6ea8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    45ca:	4629      	mov	r1, r5
    45cc:	4620      	mov	r0, r4
    45ce:	f002 fc6b 	bl	6ea8 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    45d2:	a803      	add	r0, sp, #12
    45d4:	9403      	str	r4, [sp, #12]
    45d6:	f7ff fcff 	bl	3fd8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    45da:	9b03      	ldr	r3, [sp, #12]
    45dc:	fa0a f303 	lsl.w	r3, sl, r3
    45e0:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    45e4:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    45e8:	2c00      	cmp	r4, #0
    45ea:	d1b1      	bne.n	4550 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    45ec:	b9cf      	cbnz	r7, 4622 <nrfx_gpiote_irq_handler+0x136>
    45ee:	2701      	movs	r7, #1
    45f0:	e7a9      	b.n	4546 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    45f2:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    45f4:	bf0c      	ite	eq
    45f6:	2103      	moveq	r1, #3
    45f8:	2102      	movne	r1, #2
    45fa:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    45fc:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    45fe:	f002 fc53 	bl	6ea8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4602:	2d03      	cmp	r5, #3
    4604:	d004      	beq.n	4610 <nrfx_gpiote_irq_handler+0x124>
    4606:	9a01      	ldr	r2, [sp, #4]
    4608:	2a02      	cmp	r2, #2
    460a:	d106      	bne.n	461a <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    460c:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    460e:	d1e0      	bne.n	45d2 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    4610:	4659      	mov	r1, fp
    4612:	4620      	mov	r0, r4
    4614:	f7ff fcf8 	bl	4008 <call_handler>
    4618:	e7db      	b.n	45d2 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    461a:	2a03      	cmp	r2, #3
    461c:	d1d9      	bne.n	45d2 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    461e:	2d02      	cmp	r5, #2
    4620:	e7f5      	b.n	460e <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4622:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    4626:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    462a:	491a      	ldr	r1, [pc, #104]	; (4694 <nrfx_gpiote_irq_handler+0x1a8>)
    462c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4630:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4634:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4636:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    463a:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    463e:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4640:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    4644:	4313      	orrs	r3, r2
    4646:	f47f af7b 	bne.w	4540 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    464a:	2401      	movs	r4, #1
    while (mask)
    464c:	b916      	cbnz	r6, 4654 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    464e:	b007      	add	sp, #28
    4650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    4654:	fa96 f3a6 	rbit	r3, r6
    4658:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    465c:	fa04 f203 	lsl.w	r2, r4, r3
    4660:	009b      	lsls	r3, r3, #2
    4662:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4666:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    466a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    466e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4672:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4676:	f3c0 2005 	ubfx	r0, r0, #8, #6
    467a:	f3c1 4101 	ubfx	r1, r1, #16, #2
    467e:	f7ff fcc3 	bl	4008 <call_handler>
    4682:	e7e3      	b.n	464c <nrfx_gpiote_irq_handler+0x160>
    4684:	40006100 	.word	0x40006100
    4688:	40006000 	.word	0x40006000
    468c:	40006120 	.word	0x40006120
    4690:	200000ac 	.word	0x200000ac
    4694:	50000300 	.word	0x50000300

00004698 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4698:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    469a:	4801      	ldr	r0, [pc, #4]	; (46a0 <nrfx_ppi_channel_alloc+0x8>)
    469c:	f7ff bbbc 	b.w	3e18 <nrfx_flag32_alloc>
    46a0:	20000128 	.word	0x20000128

000046a4 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    46a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    46a6:	4b30      	ldr	r3, [pc, #192]	; (4768 <twi_tx_start_transfer+0xc4>)
    46a8:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE void nrf_twi_event_clear(NRF_TWI_Type  * p_reg,
                                           nrf_twi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46aa:	2300      	movs	r3, #0
    46ac:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    46b0:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    46b4:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    46b8:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    46bc:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    46c0:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    46c4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    46c8:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    46cc:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    46d0:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    46d2:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46d6:	2301      	movs	r3, #1
    46d8:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    46da:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
    46de:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    46e0:	429a      	cmp	r2, r3
    46e2:	bf18      	it	ne
    46e4:	6083      	strne	r3, [r0, #8]
{
    46e6:	4604      	mov	r4, r0
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
    46e8:	f002 fbed 	bl	6ec6 <twi_send_byte>

    if (p_cb->handler)
    46ec:	682b      	ldr	r3, [r5, #0]
    46ee:	b183      	cbz	r3, 4712 <twi_tx_start_transfer+0x6e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    46f0:	f240 2386 	movw	r3, #646	; 0x286
    46f4:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    46f6:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    46f8:	481c      	ldr	r0, [pc, #112]	; (476c <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
    46fa:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    46fe:	b003      	add	sp, #12
    4700:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
    4702:	4629      	mov	r1, r5
    4704:	4620      	mov	r0, r4
    4706:	f002 fbfb 	bl	6f00 <twi_transfer>
        while ((hw_timeout > 0) &&
    470a:	b128      	cbz	r0, 4718 <twi_tx_start_transfer+0x74>
            hw_timeout--;
    470c:	9b01      	ldr	r3, [sp, #4]
    470e:	3b01      	subs	r3, #1
    4710:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    4712:	9b01      	ldr	r3, [sp, #4]
    4714:	2b00      	cmp	r3, #0
    4716:	dcf4      	bgt.n	4702 <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
    4718:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    471c:	b95b      	cbnz	r3, 4736 <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    471e:	4813      	ldr	r0, [pc, #76]	; (476c <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
    4720:	9b01      	ldr	r3, [sp, #4]
    4722:	2b00      	cmp	r3, #0
    4724:	dceb      	bgt.n	46fe <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    4726:	2300      	movs	r3, #0
    4728:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    472c:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    472e:	4810      	ldr	r0, [pc, #64]	; (4770 <twi_tx_start_transfer+0xcc>)
    4730:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    4734:	e7e3      	b.n	46fe <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
    4736:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    473a:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    473e:	b18b      	cbz	r3, 4764 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    4740:	4a0c      	ldr	r2, [pc, #48]	; (4774 <twi_tx_start_transfer+0xd0>)
    4742:	480b      	ldr	r0, [pc, #44]	; (4770 <twi_tx_start_transfer+0xcc>)
    4744:	f013 0f01 	tst.w	r3, #1
    4748:	bf18      	it	ne
    474a:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    474c:	f013 0f02 	tst.w	r3, #2
    4750:	f102 0201 	add.w	r2, r2, #1
    4754:	bf18      	it	ne
    4756:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    4758:	f013 0f04 	tst.w	r3, #4
    475c:	4b06      	ldr	r3, [pc, #24]	; (4778 <twi_tx_start_transfer+0xd4>)
    475e:	bf18      	it	ne
    4760:	4618      	movne	r0, r3
    4762:	e7dd      	b.n	4720 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
    4764:	4802      	ldr	r0, [pc, #8]	; (4770 <twi_tx_start_transfer+0xcc>)
    4766:	e7db      	b.n	4720 <twi_tx_start_transfer+0x7c>
    4768:	000186a0 	.word	0x000186a0
    476c:	0bad0000 	.word	0x0bad0000
    4770:	0bad0001 	.word	0x0bad0001
    4774:	0bae0000 	.word	0x0bae0000
    4778:	0bae0002 	.word	0x0bae0002

0000477c <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    477c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    477e:	4b34      	ldr	r3, [pc, #208]	; (4850 <twi_rx_start_transfer+0xd4>)
    4780:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4782:	2300      	movs	r3, #0
    4784:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    4788:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    478c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    4790:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    4794:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    4798:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    479c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    47a0:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    47a4:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    47a6:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    47aa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    47ac:	2b01      	cmp	r3, #1
{
    47ae:	4604      	mov	r4, r0
    47b0:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    47b2:	d117      	bne.n	47e4 <twi_rx_start_transfer+0x68>
    47b4:	6a0b      	ldr	r3, [r1, #32]
    47b6:	065b      	lsls	r3, r3, #25
    47b8:	d414      	bmi.n	47e4 <twi_rx_start_transfer+0x68>
    p_reg->SHORTS = mask;
    47ba:	2302      	movs	r3, #2
    47bc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    47c0:	2301      	movs	r3, #1
    47c2:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    47c4:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    47c8:	2a02      	cmp	r2, #2
    47ca:	bf18      	it	ne
    47cc:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    47ce:	682b      	ldr	r3, [r5, #0]
    47d0:	b193      	cbz	r3, 47f8 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    47d2:	f240 2386 	movw	r3, #646	; 0x286
    47d6:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    47d8:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    47da:	481e      	ldr	r0, [pc, #120]	; (4854 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
    47dc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    47e0:	b003      	add	sp, #12
    47e2:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
    47e4:	2301      	movs	r3, #1
    47e6:	e7e9      	b.n	47bc <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
    47e8:	4629      	mov	r1, r5
    47ea:	4620      	mov	r0, r4
    47ec:	f002 fb88 	bl	6f00 <twi_transfer>
        while ((hw_timeout > 0) &&
    47f0:	b128      	cbz	r0, 47fe <twi_rx_start_transfer+0x82>
               hw_timeout--;
    47f2:	9b01      	ldr	r3, [sp, #4]
    47f4:	3b01      	subs	r3, #1
    47f6:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    47f8:	9b01      	ldr	r3, [sp, #4]
    47fa:	2b00      	cmp	r3, #0
    47fc:	dcf4      	bgt.n	47e8 <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
    47fe:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    4802:	b95b      	cbnz	r3, 481c <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    4804:	4813      	ldr	r0, [pc, #76]	; (4854 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
    4806:	9b01      	ldr	r3, [sp, #4]
    4808:	2b00      	cmp	r3, #0
    480a:	dce9      	bgt.n	47e0 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    480c:	2300      	movs	r3, #0
    480e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    4812:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    4814:	4810      	ldr	r0, [pc, #64]	; (4858 <twi_rx_start_transfer+0xdc>)
    4816:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    481a:	e7e1      	b.n	47e0 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    481c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4820:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    4824:	b18b      	cbz	r3, 484a <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    4826:	4a0d      	ldr	r2, [pc, #52]	; (485c <twi_rx_start_transfer+0xe0>)
    4828:	480b      	ldr	r0, [pc, #44]	; (4858 <twi_rx_start_transfer+0xdc>)
    482a:	f013 0f01 	tst.w	r3, #1
    482e:	bf18      	it	ne
    4830:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    4832:	f013 0f02 	tst.w	r3, #2
    4836:	f102 0201 	add.w	r2, r2, #1
    483a:	bf18      	it	ne
    483c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    483e:	f013 0f04 	tst.w	r3, #4
    4842:	4b07      	ldr	r3, [pc, #28]	; (4860 <twi_rx_start_transfer+0xe4>)
    4844:	bf18      	it	ne
    4846:	4618      	movne	r0, r3
    4848:	e7dd      	b.n	4806 <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
    484a:	4803      	ldr	r0, [pc, #12]	; (4858 <twi_rx_start_transfer+0xdc>)
    484c:	e7db      	b.n	4806 <twi_rx_start_transfer+0x8a>
    484e:	bf00      	nop
    4850:	000186a0 	.word	0x000186a0
    4854:	0bad0000 	.word	0x0bad0000
    4858:	0bad0001 	.word	0x0bad0001
    485c:	0bae0000 	.word	0x0bae0000
    4860:	0bae0002 	.word	0x0bae0002

00004864 <nrfx_twi_init>:
{
    4864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4866:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4868:	4d29      	ldr	r5, [pc, #164]	; (4910 <nrfx_twi_init+0xac>)
    486a:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    486e:	fb0c fc07 	mul.w	ip, ip, r7
    4872:	eb05 040c 	add.w	r4, r5, ip
    4876:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    487a:	2e00      	cmp	r6, #0
    487c:	d146      	bne.n	490c <nrfx_twi_init+0xa8>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    487e:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
    4880:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    4882:	7b4b      	ldrb	r3, [r1, #13]
    4884:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    4888:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
    488a:	60a6      	str	r6, [r4, #8]
    p_cb->handler         = event_handler;
    488c:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    4890:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
    4894:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
    4898:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    489c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
    48a0:	b9e3      	cbnz	r3, 48dc <nrfx_twi_init+0x78>
        TWI_PIN_INIT(p_config->scl);
    48a2:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
    48a4:	4b1b      	ldr	r3, [pc, #108]	; (4914 <nrfx_twi_init+0xb0>)
    *p_pin = pin_number & 0x1F;
    48a6:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    48aa:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    48ac:	2c01      	cmp	r4, #1
    48ae:	bf18      	it	ne
    48b0:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    48b4:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 1: return NRF_P1;
    48b8:	bf08      	it	eq
    48ba:	469e      	moveq	lr, r3
    reg->PIN_CNF[pin_number] = cnf;
    48bc:	f240 6c0c 	movw	ip, #1548	; 0x60c
    48c0:	f84e c024 	str.w	ip, [lr, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
    48c4:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    48c6:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    48ca:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    48cc:	2c01      	cmp	r4, #1
    48ce:	bf18      	it	ne
    48d0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    48d4:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
    48d8:	f843 c024 	str.w	ip, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    48dc:	7bcb      	ldrb	r3, [r1, #15]
    48de:	b92b      	cbnz	r3, 48ec <nrfx_twi_init+0x88>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    48e0:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    48e4:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    48e8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    48ec:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    48ee:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    48f2:	b11a      	cbz	r2, 48fc <nrfx_twi_init+0x98>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    48f4:	f340 3007 	sbfx	r0, r0, #12, #8
    48f8:	f7fd fb66 	bl	1fc8 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    48fc:	233c      	movs	r3, #60	; 0x3c
    48fe:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    4902:	4805      	ldr	r0, [pc, #20]	; (4918 <nrfx_twi_init+0xb4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4904:	2301      	movs	r3, #1
    4906:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    490a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    490c:	4803      	ldr	r0, [pc, #12]	; (491c <nrfx_twi_init+0xb8>)
    490e:	e7fc      	b.n	490a <nrfx_twi_init+0xa6>
    4910:	20000d8c 	.word	0x20000d8c
    4914:	50000300 	.word	0x50000300
    4918:	0bad0000 	.word	0x0bad0000
    491c:	0bad0005 	.word	0x0bad0005

00004920 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    4920:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4922:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    4924:	2105      	movs	r1, #5
    4926:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    492a:	4b04      	ldr	r3, [pc, #16]	; (493c <nrfx_twi_enable+0x1c>)
    492c:	213c      	movs	r1, #60	; 0x3c
    492e:	fb01 3302 	mla	r3, r1, r2, r3
    4932:	2202      	movs	r2, #2
    4934:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    4938:	4770      	bx	lr
    493a:	bf00      	nop
    493c:	20000d8c 	.word	0x20000d8c

00004940 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    4940:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
    4942:	4b0c      	ldr	r3, [pc, #48]	; (4974 <nrfx_twi_disable+0x34>)
{
    4944:	b510      	push	{r4, lr}
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4946:	7904      	ldrb	r4, [r0, #4]
    4948:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    494c:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4950:	4b09      	ldr	r3, [pc, #36]	; (4978 <nrfx_twi_disable+0x38>)
    4952:	f021 0103 	bic.w	r1, r1, #3
    4956:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    495a:	2100      	movs	r1, #0
    495c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    4960:	223c      	movs	r2, #60	; 0x3c
    4962:	fb02 3304 	mla	r3, r2, r4, r3
    4966:	2201      	movs	r2, #1
    4968:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    p_cb->busy = false;
    496c:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
    4970:	bd10      	pop	{r4, pc}
    4972:	bf00      	nop
    4974:	00044286 	.word	0x00044286
    4978:	20000d8c 	.word	0x20000d8c

0000497c <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    497c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4980:	4f31      	ldr	r7, [pc, #196]	; (4a48 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4982:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    4984:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4988:	233c      	movs	r3, #60	; 0x3c
    498a:	fb03 7304 	mla	r3, r3, r4, r7
{
    498e:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4990:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    4994:	2b01      	cmp	r3, #1
{
    4996:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4998:	d104      	bne.n	49a4 <nrfx_twi_xfer+0x28>
    499a:	780b      	ldrb	r3, [r1, #0]
    499c:	2b01      	cmp	r3, #1
    499e:	d106      	bne.n	49ae <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
    49a0:	482a      	ldr	r0, [pc, #168]	; (4a4c <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    49a2:	e011      	b.n	49c8 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    49a4:	2b02      	cmp	r3, #2
    49a6:	d102      	bne.n	49ae <nrfx_twi_xfer+0x32>
    49a8:	780b      	ldrb	r3, [r1, #0]
    49aa:	2b01      	cmp	r3, #1
    49ac:	d1f8      	bne.n	49a0 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
    49ae:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    49b0:	4b27      	ldr	r3, [pc, #156]	; (4a50 <nrfx_twi_xfer+0xd4>)
    49b2:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    49b6:	fb06 7604 	mla	r6, r6, r4, r7
    49ba:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    49be:	b12b      	cbz	r3, 49cc <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    49c0:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    49c2:	4824      	ldr	r0, [pc, #144]	; (4a54 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
    49c4:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    49c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    49cc:	f08c 0304 	eor.w	r3, ip, #4
    49d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    49d4:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    49d8:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    49dc:	46a8      	mov	r8, r5
    49de:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    49e2:	f106 0e0c 	add.w	lr, r6, #12
    49e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    49ea:	f8d8 3000 	ldr.w	r3, [r8]
    49ee:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    49f2:	686b      	ldr	r3, [r5, #4]
    49f4:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    49f6:	68eb      	ldr	r3, [r5, #12]
    49f8:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    49fa:	786b      	ldrb	r3, [r5, #1]
    49fc:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    4a00:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4a02:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    4a06:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4a08:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    4a0c:	d017      	beq.n	4a3e <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    4a0e:	b99b      	cbnz	r3, 4a38 <nrfx_twi_xfer+0xbc>
    4a10:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    4a14:	233c      	movs	r3, #60	; 0x3c
    4a16:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    4a1a:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    4a1c:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    4a20:	4648      	mov	r0, r9
    4a22:	f7ff fe3f 	bl	46a4 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    4a26:	233c      	movs	r3, #60	; 0x3c
    4a28:	435c      	muls	r4, r3
    4a2a:	193a      	adds	r2, r7, r4
    4a2c:	593b      	ldr	r3, [r7, r4]
    4a2e:	2b00      	cmp	r3, #0
    4a30:	d1ca      	bne.n	49c8 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
    4a32:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    4a36:	e7c7      	b.n	49c8 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    4a38:	f04f 0c01 	mov.w	ip, #1
    4a3c:	e7ea      	b.n	4a14 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    4a3e:	4651      	mov	r1, sl
    4a40:	4648      	mov	r0, r9
    4a42:	f7ff fe9b 	bl	477c <twi_rx_start_transfer>
    4a46:	e7ee      	b.n	4a26 <nrfx_twi_xfer+0xaa>
    4a48:	20000d8c 	.word	0x20000d8c
    4a4c:	0bad0005 	.word	0x0bad0005
    4a50:	00044286 	.word	0x00044286
    4a54:	0bad000b 	.word	0x0bad000b

00004a58 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    4a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    4a5a:	4c2b      	ldr	r4, [pc, #172]	; (4b08 <nrfx_twi_0_irq_handler+0xb0>)
    4a5c:	482b      	ldr	r0, [pc, #172]	; (4b0c <nrfx_twi_0_irq_handler+0xb4>)
{
    4a5e:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    4a60:	4621      	mov	r1, r4
    4a62:	f002 fa4d 	bl	6f00 <twi_transfer>
    4a66:	2800      	cmp	r0, #0
    4a68:	d140      	bne.n	4aec <nrfx_twi_0_irq_handler+0x94>
    if (!p_cb->error &&
    4a6a:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    4a6e:	f8d4 c020 	ldr.w	ip, [r4, #32]
    if (!p_cb->error &&
    4a72:	b9ff      	cbnz	r7, 4ab4 <nrfx_twi_0_irq_handler+0x5c>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    4a74:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
    4a76:	1e9a      	subs	r2, r3, #2
    4a78:	2a01      	cmp	r2, #1
    4a7a:	d81b      	bhi.n	4ab4 <nrfx_twi_0_irq_handler+0x5c>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    4a7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4a7e:	69a2      	ldr	r2, [r4, #24]
    4a80:	4291      	cmp	r1, r2
    4a82:	d117      	bne.n	4ab4 <nrfx_twi_0_irq_handler+0x5c>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    4a84:	69e2      	ldr	r2, [r4, #28]
    4a86:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    4a88:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    4a8c:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
    4a8e:	481f      	ldr	r0, [pc, #124]	; (4b0c <nrfx_twi_0_irq_handler+0xb4>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    4a90:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    4a92:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    4a94:	f884 c02c 	strb.w	ip, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    4a98:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
    4a9c:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    4a9e:	d104      	bne.n	4aaa <nrfx_twi_0_irq_handler+0x52>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    4aa0:	b007      	add	sp, #28
    4aa2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    4aa6:	f7ff bdfd 	b.w	46a4 <twi_tx_start_transfer>
}
    4aaa:	b007      	add	sp, #28
    4aac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    4ab0:	f7ff be64 	b.w	477c <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    4ab4:	4e16      	ldr	r6, [pc, #88]	; (4b10 <nrfx_twi_0_irq_handler+0xb8>)
    4ab6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    4ab8:	ad01      	add	r5, sp, #4
    4aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4abc:	6833      	ldr	r3, [r6, #0]
    4abe:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    4ac0:	b1ff      	cbz	r7, 4b02 <nrfx_twi_0_irq_handler+0xaa>
    uint32_t error_source = p_reg->ERRORSRC;
    4ac2:	4a12      	ldr	r2, [pc, #72]	; (4b0c <nrfx_twi_0_irq_handler+0xb4>)
    4ac4:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4ac8:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    4acc:	0799      	lsls	r1, r3, #30
    4ace:	d50f      	bpl.n	4af0 <nrfx_twi_0_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    4ad0:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
    4ad2:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    4ad6:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    4ad8:	f01c 0f04 	tst.w	ip, #4
        p_cb->busy = false;
    4adc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    4ae0:	d000      	beq.n	4ae4 <nrfx_twi_0_irq_handler+0x8c>
    4ae2:	b11f      	cbz	r7, 4aec <nrfx_twi_0_irq_handler+0x94>
            p_cb->handler(&event, p_cb->p_context);
    4ae4:	e9d4 3100 	ldrd	r3, r1, [r4]
    4ae8:	4668      	mov	r0, sp
    4aea:	4798      	blx	r3
}
    4aec:	b007      	add	sp, #28
    4aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    4af0:	075a      	lsls	r2, r3, #29
    4af2:	d501      	bpl.n	4af8 <nrfx_twi_0_irq_handler+0xa0>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    4af4:	2302      	movs	r3, #2
    4af6:	e7ec      	b.n	4ad2 <nrfx_twi_0_irq_handler+0x7a>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    4af8:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
    4afa:	bf4c      	ite	mi
    4afc:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    4afe:	2304      	movpl	r3, #4
    4b00:	e7e7      	b.n	4ad2 <nrfx_twi_0_irq_handler+0x7a>
            event.type = NRFX_TWI_EVT_DONE;
    4b02:	f88d 7000 	strb.w	r7, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
    4b06:	e7e6      	b.n	4ad6 <nrfx_twi_0_irq_handler+0x7e>
    4b08:	20000d8c 	.word	0x20000d8c
    4b0c:	40003000 	.word	0x40003000
    4b10:	20000d98 	.word	0x20000d98

00004b14 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4b14:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4b16:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4b1a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    4b1c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    4b1e:	6002      	str	r2, [r0, #0]
}
    4b20:	4802      	ldr	r0, [pc, #8]	; (4b2c <nrf_gpio_pin_port_decode+0x18>)
    4b22:	bf18      	it	ne
    4b24:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    4b28:	4770      	bx	lr
    4b2a:	bf00      	nop
    4b2c:	50000300 	.word	0x50000300

00004b30 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    4b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4b32:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    4b34:	f002 fa70 	bl	7018 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    4b38:	4608      	mov	r0, r1
    4b3a:	f002 fa6d 	bl	7018 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4b3e:	a801      	add	r0, sp, #4
    4b40:	9601      	str	r6, [sp, #4]
    4b42:	f7ff ffe7 	bl	4b14 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4b46:	9b01      	ldr	r3, [sp, #4]
    4b48:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    4b4c:	460c      	mov	r4, r1
    4b4e:	f240 610d 	movw	r1, #1549	; 0x60d
    4b52:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4b56:	a801      	add	r0, sp, #4
    4b58:	9401      	str	r4, [sp, #4]
    4b5a:	f7ff ffdb 	bl	4b14 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4b5e:	9b01      	ldr	r3, [sp, #4]
    4b60:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    4b64:	2509      	movs	r5, #9
    4b66:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    4b6a:	2004      	movs	r0, #4
    4b6c:	f002 f907 	bl	6d7e <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4b70:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4b72:	a801      	add	r0, sp, #4
    4b74:	9401      	str	r4, [sp, #4]
    4b76:	f7ff ffcd 	bl	4b14 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4b7a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    4b7c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4b80:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    4b82:	07db      	lsls	r3, r3, #31
    4b84:	d415      	bmi.n	4bb2 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4b86:	a801      	add	r0, sp, #4
    4b88:	9601      	str	r6, [sp, #4]
    4b8a:	f7ff ffc3 	bl	4b14 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4b8e:	9b01      	ldr	r3, [sp, #4]
    4b90:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    4b94:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    4b98:	2004      	movs	r0, #4
    4b9a:	f002 f8f0 	bl	6d7e <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    4b9e:	4630      	mov	r0, r6
    4ba0:	f002 fa3a 	bl	7018 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    4ba4:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    4ba6:	2004      	movs	r0, #4
    4ba8:	f002 f8e9 	bl	6d7e <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    4bac:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    4bb0:	d1df      	bne.n	4b72 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4bb2:	a801      	add	r0, sp, #4
    4bb4:	9401      	str	r4, [sp, #4]
    4bb6:	f7ff ffad 	bl	4b14 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4bba:	9a01      	ldr	r2, [sp, #4]
    4bbc:	2301      	movs	r3, #1
    4bbe:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    4bc0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    4bc4:	2004      	movs	r0, #4
    4bc6:	f002 f8da 	bl	6d7e <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    4bca:	4620      	mov	r0, r4
    4bcc:	f002 fa24 	bl	7018 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    4bd0:	2004      	movs	r0, #4
    4bd2:	f002 f8d4 	bl	6d7e <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4bd6:	a801      	add	r0, sp, #4
    4bd8:	9401      	str	r4, [sp, #4]
    4bda:	f7ff ff9b 	bl	4b14 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4bde:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    4be0:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    4be4:	4803      	ldr	r0, [pc, #12]	; (4bf4 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4be6:	40d3      	lsrs	r3, r2
    4be8:	f003 0301 	and.w	r3, r3, #1
    4bec:	1ac0      	subs	r0, r0, r3
    4bee:	b003      	add	sp, #12
    4bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bf2:	bf00      	nop
    4bf4:	0bad0001 	.word	0x0bad0001

00004bf8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4bf8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4bfa:	4c14      	ldr	r4, [pc, #80]	; (4c4c <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4bfc:	4a14      	ldr	r2, [pc, #80]	; (4c50 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4bfe:	4915      	ldr	r1, [pc, #84]	; (4c54 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4c00:	2303      	movs	r3, #3
    4c02:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4c04:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4c06:	4b14      	ldr	r3, [pc, #80]	; (4c58 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    4c08:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4c0a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4c10:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4c12:	2300      	movs	r3, #0
    4c14:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4c16:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4c18:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    4c1a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4c1c:	4a0f      	ldr	r2, [pc, #60]	; (4c5c <_DoInit+0x64>)
    4c1e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    4c20:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4c22:	2210      	movs	r2, #16
    4c24:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4c26:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4c28:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4c2a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4c2c:	f001 fc0a 	bl	6444 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4c30:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4c34:	490a      	ldr	r1, [pc, #40]	; (4c60 <_DoInit+0x68>)
    4c36:	4620      	mov	r0, r4
    4c38:	f001 fc04 	bl	6444 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4c3c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4c40:	2320      	movs	r3, #32
    4c42:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4c44:	f3bf 8f5f 	dmb	sy
}
    4c48:	bd10      	pop	{r4, pc}
    4c4a:	bf00      	nop
    4c4c:	20000dc8 	.word	0x20000dc8
    4c50:	00007b86 	.word	0x00007b86
    4c54:	00007b8f 	.word	0x00007b8f
    4c58:	200010a9 	.word	0x200010a9
    4c5c:	20001099 	.word	0x20001099
    4c60:	00007b93 	.word	0x00007b93

00004c64 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4c64:	4b0e      	ldr	r3, [pc, #56]	; (4ca0 <z_sys_init_run_level+0x3c>)
{
    4c66:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4c68:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4c6c:	3001      	adds	r0, #1
    4c6e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4c72:	42a6      	cmp	r6, r4
    4c74:	d800      	bhi.n	4c78 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4c76:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4c78:	e9d4 3500 	ldrd	r3, r5, [r4]
    4c7c:	4628      	mov	r0, r5
    4c7e:	4798      	blx	r3
		if (dev != NULL) {
    4c80:	b165      	cbz	r5, 4c9c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    4c82:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4c84:	b130      	cbz	r0, 4c94 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4c86:	2800      	cmp	r0, #0
    4c88:	bfb8      	it	lt
    4c8a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4c8c:	28ff      	cmp	r0, #255	; 0xff
    4c8e:	bfa8      	it	ge
    4c90:	20ff      	movge	r0, #255	; 0xff
    4c92:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4c94:	785a      	ldrb	r2, [r3, #1]
    4c96:	f042 0201 	orr.w	r2, r2, #1
    4c9a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4c9c:	3408      	adds	r4, #8
    4c9e:	e7e8      	b.n	4c72 <z_sys_init_run_level+0xe>
    4ca0:	00007854 	.word	0x00007854

00004ca4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4ca4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4ca6:	4b0a      	ldr	r3, [pc, #40]	; (4cd0 <bg_thread_main+0x2c>)
    4ca8:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4caa:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4cac:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4cae:	f7ff ffd9 	bl	4c64 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4cb2:	f001 f81b 	bl	5cec <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4cb6:	2003      	movs	r0, #3
    4cb8:	f7ff ffd4 	bl	4c64 <z_sys_init_run_level>

	z_init_static_threads();
    4cbc:	f000 f968 	bl	4f90 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    4cc0:	f7fb feae 	bl	a20 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4cc4:	4a03      	ldr	r2, [pc, #12]	; (4cd4 <bg_thread_main+0x30>)
    4cc6:	7b13      	ldrb	r3, [r2, #12]
    4cc8:	f023 0301 	bic.w	r3, r3, #1
    4ccc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4cce:	bd08      	pop	{r3, pc}
    4cd0:	200014a9 	.word	0x200014a9
    4cd4:	200006d0 	.word	0x200006d0

00004cd8 <z_bss_zero>:
{
    4cd8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4cda:	4803      	ldr	r0, [pc, #12]	; (4ce8 <z_bss_zero+0x10>)
    4cdc:	4a03      	ldr	r2, [pc, #12]	; (4cec <z_bss_zero+0x14>)
    4cde:	2100      	movs	r1, #0
    4ce0:	1a12      	subs	r2, r2, r0
    4ce2:	f002 f9d3 	bl	708c <z_early_memset>
}
    4ce6:	bd08      	pop	{r3, pc}
    4ce8:	20000200 	.word	0x20000200
    4cec:	200014ac 	.word	0x200014ac

00004cf0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    4cf0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    4cf2:	2300      	movs	r3, #0
{
    4cf4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    4cf6:	2201      	movs	r2, #1
    4cf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    4cfc:	4e13      	ldr	r6, [pc, #76]	; (4d4c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4cfe:	4d14      	ldr	r5, [pc, #80]	; (4d50 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    4d00:	9301      	str	r3, [sp, #4]
    4d02:	220f      	movs	r2, #15
    4d04:	e9cd 3202 	strd	r3, r2, [sp, #8]
    4d08:	4912      	ldr	r1, [pc, #72]	; (4d54 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4d0a:	2318      	movs	r3, #24
    4d0c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    4d10:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    4d14:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    4d16:	f44f 70b0 	mov.w	r0, #352	; 0x160
    4d1a:	fb00 1104 	mla	r1, r0, r4, r1
    4d1e:	4b0e      	ldr	r3, [pc, #56]	; (4d58 <z_init_cpu+0x68>)
    4d20:	9500      	str	r5, [sp, #0]
    4d22:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4d26:	4630      	mov	r0, r6
    4d28:	f000 f8d4 	bl	4ed4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4d2c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4d2e:	480b      	ldr	r0, [pc, #44]	; (4d5c <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    4d30:	752c      	strb	r4, [r5, #20]
    4d32:	f023 0304 	bic.w	r3, r3, #4
    4d36:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4d38:	f44f 6302 	mov.w	r3, #2080	; 0x820
    4d3c:	fb03 0404 	mla	r4, r3, r4, r0
    4d40:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4d42:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    4d44:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    4d46:	b006      	add	sp, #24
    4d48:	bd70      	pop	{r4, r5, r6, pc}
    4d4a:	bf00      	nop
    4d4c:	20000650 	.word	0x20000650
    4d50:	20000e70 	.word	0x20000e70
    4d54:	20002d80 	.word	0x20002d80
    4d58:	00005049 	.word	0x00005049
    4d5c:	20002ee0 	.word	0x20002ee0

00004d60 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4d60:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4d62:	4b2d      	ldr	r3, [pc, #180]	; (4e18 <z_cstart+0xb8>)
    4d64:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4d66:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4d6a:	4d2c      	ldr	r5, [pc, #176]	; (4e1c <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    4d6c:	4e2c      	ldr	r6, [pc, #176]	; (4e20 <z_cstart+0xc0>)
    4d6e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4d70:	4f2c      	ldr	r7, [pc, #176]	; (4e24 <z_cstart+0xc4>)
    4d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4d76:	2400      	movs	r4, #0
    4d78:	616b      	str	r3, [r5, #20]
    4d7a:	23e0      	movs	r3, #224	; 0xe0
    4d7c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4d80:	77ec      	strb	r4, [r5, #31]
    4d82:	762c      	strb	r4, [r5, #24]
    4d84:	766c      	strb	r4, [r5, #25]
    4d86:	76ac      	strb	r4, [r5, #26]
    4d88:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4d8c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4d8e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4d92:	626b      	str	r3, [r5, #36]	; 0x24
    4d94:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4d98:	f7fd fb24 	bl	23e4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4d9c:	f7fd f8f6 	bl	1f8c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4da4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4da6:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4da8:	f7fd fc72 	bl	2690 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4dac:	f7fd fbda 	bl	2564 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4db0:	f240 1301 	movw	r3, #257	; 0x101
    4db4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4db8:	ab06      	add	r3, sp, #24
    4dba:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4dbc:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    4dc0:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4dc2:	f002 f93d 	bl	7040 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4dc6:	4620      	mov	r0, r4
    4dc8:	f7ff ff4c 	bl	4c64 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4dcc:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4dce:	4d16      	ldr	r5, [pc, #88]	; (4e28 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4dd0:	f7ff ff48 	bl	4c64 <z_sys_init_run_level>
	z_sched_init();
    4dd4:	f000 fc9a 	bl	570c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4dd8:	4b14      	ldr	r3, [pc, #80]	; (4e2c <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    4dda:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4ddc:	9305      	str	r3, [sp, #20]
    4dde:	2301      	movs	r3, #1
    4de0:	4913      	ldr	r1, [pc, #76]	; (4e30 <z_cstart+0xd0>)
    4de2:	9400      	str	r4, [sp, #0]
    4de4:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4dec:	463b      	mov	r3, r7
    4dee:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4df2:	4628      	mov	r0, r5
    4df4:	f000 f86e 	bl	4ed4 <z_setup_new_thread>
    4df8:	7b6a      	ldrb	r2, [r5, #13]
    4dfa:	4606      	mov	r6, r0
    4dfc:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    4e00:	4628      	mov	r0, r5
    4e02:	736a      	strb	r2, [r5, #13]
    4e04:	f002 f9e4 	bl	71d0 <z_ready_thread>
	z_init_cpu(0);
    4e08:	4620      	mov	r0, r4
    4e0a:	f7ff ff71 	bl	4cf0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4e0e:	463a      	mov	r2, r7
    4e10:	4631      	mov	r1, r6
    4e12:	4628      	mov	r0, r5
    4e14:	f7fd f9b4 	bl	2180 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4e18:	20003700 	.word	0x20003700
    4e1c:	e000ed00 	.word	0xe000ed00
    4e20:	20000e70 	.word	0x20000e70
    4e24:	00004ca5 	.word	0x00004ca5
    4e28:	200006d0 	.word	0x200006d0
    4e2c:	00007b9a 	.word	0x00007b9a
    4e30:	20002960 	.word	0x20002960

00004e34 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    4e34:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4e36:	4b0e      	ldr	r3, [pc, #56]	; (4e70 <init_mem_slab_module+0x3c>)
    4e38:	4c0e      	ldr	r4, [pc, #56]	; (4e74 <init_mem_slab_module+0x40>)
    4e3a:	42a3      	cmp	r3, r4
    4e3c:	d301      	bcc.n	4e42 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4e3e:	2000      	movs	r0, #0
	return rc;
}
    4e40:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4e42:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    4e46:	ea41 0200 	orr.w	r2, r1, r0
    4e4a:	f012 0203 	ands.w	r2, r2, #3
    4e4e:	d10b      	bne.n	4e68 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    4e50:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    4e52:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4e54:	42aa      	cmp	r2, r5
    4e56:	d101      	bne.n	4e5c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4e58:	331c      	adds	r3, #28
    4e5a:	e7ee      	b.n	4e3a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    4e5c:	695e      	ldr	r6, [r3, #20]
    4e5e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4e60:	3201      	adds	r2, #1
		slab->free_list = p;
    4e62:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    4e64:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    4e66:	e7f5      	b.n	4e54 <init_mem_slab_module+0x20>
	return rc;
    4e68:	f06f 0015 	mvn.w	r0, #21
    4e6c:	e7e8      	b.n	4e40 <init_mem_slab_module+0xc>
    4e6e:	bf00      	nop
    4e70:	200001ac 	.word	0x200001ac
    4e74:	200001ac 	.word	0x200001ac

00004e78 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4e7a:	460c      	mov	r4, r1
	__asm__ volatile(
    4e7c:	f04f 0520 	mov.w	r5, #32
    4e80:	f3ef 8111 	mrs	r1, BASEPRI
    4e84:	f385 8812 	msr	BASEPRI_MAX, r5
    4e88:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4e8c:	6945      	ldr	r5, [r0, #20]
    4e8e:	b15d      	cbz	r5, 4ea8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    4e90:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    4e92:	682b      	ldr	r3, [r5, #0]
    4e94:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    4e96:	6983      	ldr	r3, [r0, #24]
    4e98:	3301      	adds	r3, #1
    4e9a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4e9c:	2000      	movs	r0, #0
	__asm__ volatile(
    4e9e:	f381 8811 	msr	BASEPRI, r1
    4ea2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4ea6:	e011      	b.n	4ecc <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4ea8:	ea52 0c03 	orrs.w	ip, r2, r3
    4eac:	d103      	bne.n	4eb6 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    4eae:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    4eb0:	f06f 000b 	mvn.w	r0, #11
    4eb4:	e7f3      	b.n	4e9e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4eb6:	e9cd 2300 	strd	r2, r3, [sp]
    4eba:	4602      	mov	r2, r0
    4ebc:	3008      	adds	r0, #8
    4ebe:	f000 fb7b 	bl	55b8 <z_pend_curr>
		if (result == 0) {
    4ec2:	b918      	cbnz	r0, 4ecc <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    4ec4:	4b02      	ldr	r3, [pc, #8]	; (4ed0 <k_mem_slab_alloc+0x58>)
    4ec6:	689b      	ldr	r3, [r3, #8]
    4ec8:	695b      	ldr	r3, [r3, #20]
    4eca:	6023      	str	r3, [r4, #0]
}
    4ecc:	b003      	add	sp, #12
    4ece:	bd30      	pop	{r4, r5, pc}
    4ed0:	20000e70 	.word	0x20000e70

00004ed4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4ed4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4ed8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4eda:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4edc:	2604      	movs	r6, #4
    4ede:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4ee0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4ee2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4ee4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    4ee8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4eea:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    4eec:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4ef0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    4ef2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4ef4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    4ef8:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4efa:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    4efe:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    4f02:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    4f04:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    4f06:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4f08:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f0c:	9202      	str	r2, [sp, #8]
    4f0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4f10:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    4f12:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4f16:	9200      	str	r2, [sp, #0]
    4f18:	4642      	mov	r2, r8
{
    4f1a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f1c:	f7fd f8fe 	bl	211c <arch_new_thread>
	if (!_current) {
    4f20:	4b04      	ldr	r3, [pc, #16]	; (4f34 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    4f22:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    4f24:	689b      	ldr	r3, [r3, #8]
    4f26:	b103      	cbz	r3, 4f2a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    4f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    4f2a:	6723      	str	r3, [r4, #112]	; 0x70
}
    4f2c:	4640      	mov	r0, r8
    4f2e:	b004      	add	sp, #16
    4f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f34:	20000e70 	.word	0x20000e70

00004f38 <z_impl_k_thread_create>:
{
    4f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f3a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4f3c:	2700      	movs	r7, #0
    4f3e:	9705      	str	r7, [sp, #20]
    4f40:	9f10      	ldr	r7, [sp, #64]	; 0x40
    4f42:	9704      	str	r7, [sp, #16]
    4f44:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    4f46:	9703      	str	r7, [sp, #12]
    4f48:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    4f4a:	9702      	str	r7, [sp, #8]
{
    4f4c:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4f50:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4f52:	9701      	str	r7, [sp, #4]
    4f54:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    4f56:	9700      	str	r7, [sp, #0]
{
    4f58:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4f5a:	f7ff ffbb 	bl	4ed4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    4f5e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    4f62:	bf08      	it	eq
    4f64:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    4f68:	d005      	beq.n	4f76 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4f6a:	ea55 0306 	orrs.w	r3, r5, r6
    4f6e:	d105      	bne.n	4f7c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    4f70:	4620      	mov	r0, r4
    4f72:	f000 fac5 	bl	5500 <z_sched_start>
}
    4f76:	4620      	mov	r0, r4
    4f78:	b007      	add	sp, #28
    4f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4f7c:	4903      	ldr	r1, [pc, #12]	; (4f8c <z_impl_k_thread_create+0x54>)
    4f7e:	4632      	mov	r2, r6
    4f80:	462b      	mov	r3, r5
    4f82:	f104 0018 	add.w	r0, r4, #24
    4f86:	f000 fd2b 	bl	59e0 <z_add_timeout>
    4f8a:	e7f4      	b.n	4f76 <z_impl_k_thread_create+0x3e>
    4f8c:	000071f1 	.word	0x000071f1

00004f90 <z_init_static_threads>:
{
    4f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4f94:	4c29      	ldr	r4, [pc, #164]	; (503c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    4f96:	4d2a      	ldr	r5, [pc, #168]	; (5040 <z_init_static_threads+0xb0>)
{
    4f98:	b087      	sub	sp, #28
    4f9a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    4f9c:	42ae      	cmp	r6, r5
    4f9e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    4fa2:	d30f      	bcc.n	4fc4 <z_init_static_threads+0x34>
	k_sched_lock();
    4fa4:	f000 f9c6 	bl	5334 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4fa8:	4c24      	ldr	r4, [pc, #144]	; (503c <z_init_static_threads+0xac>)
    4faa:	f8df 9098 	ldr.w	r9, [pc, #152]	; 5044 <z_init_static_threads+0xb4>
    4fae:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4fb2:	f240 37e7 	movw	r7, #999	; 0x3e7
    4fb6:	42ac      	cmp	r4, r5
    4fb8:	d320      	bcc.n	4ffc <z_init_static_threads+0x6c>
}
    4fba:	b007      	add	sp, #28
    4fbc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    4fc0:	f000 bb88 	b.w	56d4 <k_sched_unlock>
		z_setup_new_thread(
    4fc4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4fc8:	9305      	str	r3, [sp, #20]
    4fca:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4fce:	9304      	str	r3, [sp, #16]
    4fd0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4fd4:	9303      	str	r3, [sp, #12]
    4fd6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4fda:	9302      	str	r3, [sp, #8]
    4fdc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4fe0:	9301      	str	r3, [sp, #4]
    4fe2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4fe6:	9300      	str	r3, [sp, #0]
    4fe8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4fec:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4ff0:	f7ff ff70 	bl	4ed4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4ff4:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4ff8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4ffa:	e7ce      	b.n	4f9a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4ffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4ffe:	1c5a      	adds	r2, r3, #1
    5000:	d00d      	beq.n	501e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    5002:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5006:	2100      	movs	r1, #0
    5008:	4638      	mov	r0, r7
    500a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    500e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    5012:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5016:	d104      	bne.n	5022 <z_init_static_threads+0x92>
	z_sched_start(thread);
    5018:	4640      	mov	r0, r8
    501a:	f000 fa71 	bl	5500 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    501e:	3430      	adds	r4, #48	; 0x30
    5020:	e7c9      	b.n	4fb6 <z_init_static_threads+0x26>
    5022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5026:	2300      	movs	r3, #0
    5028:	f7fb f86a 	bl	100 <__aeabi_uldivmod>
    502c:	4602      	mov	r2, r0
    502e:	460b      	mov	r3, r1
    5030:	f108 0018 	add.w	r0, r8, #24
    5034:	4649      	mov	r1, r9
    5036:	f000 fcd3 	bl	59e0 <z_add_timeout>
    503a:	e7f0      	b.n	501e <z_init_static_threads+0x8e>
    503c:	200001ac 	.word	0x200001ac
    5040:	200001ac 	.word	0x200001ac
    5044:	000071f1 	.word	0x000071f1

00005048 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    5048:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    504a:	4c0b      	ldr	r4, [pc, #44]	; (5078 <idle+0x30>)
	return !z_sys_post_kernel;
    504c:	4d0b      	ldr	r5, [pc, #44]	; (507c <idle+0x34>)
	__asm__ volatile(
    504e:	f04f 0220 	mov.w	r2, #32
    5052:	f3ef 8311 	mrs	r3, BASEPRI
    5056:	f382 8812 	msr	BASEPRI_MAX, r2
    505a:	f3bf 8f6f 	isb	sy
    505e:	f002 f956 	bl	730e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5062:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    5064:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5066:	b913      	cbnz	r3, 506e <idle+0x26>
	arch_cpu_idle();
    5068:	f7fc ff96 	bl	1f98 <arch_cpu_idle>
}
    506c:	e7ef      	b.n	504e <idle+0x6>
    506e:	f7fc fde9 	bl	1c44 <pm_system_suspend>
    5072:	2800      	cmp	r0, #0
    5074:	d1eb      	bne.n	504e <idle+0x6>
    5076:	e7f7      	b.n	5068 <idle+0x20>
    5078:	20000e70 	.word	0x20000e70
    507c:	200014a9 	.word	0x200014a9

00005080 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5080:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5084:	4604      	mov	r4, r0
    5086:	4617      	mov	r7, r2
    5088:	461e      	mov	r6, r3
    508a:	f04f 0320 	mov.w	r3, #32
    508e:	f3ef 8811 	mrs	r8, BASEPRI
    5092:	f383 8812 	msr	BASEPRI_MAX, r3
    5096:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    509a:	68c3      	ldr	r3, [r0, #12]
    509c:	4a32      	ldr	r2, [pc, #200]	; (5168 <z_impl_k_mutex_lock+0xe8>)
    509e:	b16b      	cbz	r3, 50bc <z_impl_k_mutex_lock+0x3c>
    50a0:	6880      	ldr	r0, [r0, #8]
    50a2:	6891      	ldr	r1, [r2, #8]
    50a4:	4288      	cmp	r0, r1
    50a6:	d019      	beq.n	50dc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    50a8:	ea57 0306 	orrs.w	r3, r7, r6
    50ac:	d118      	bne.n	50e0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    50ae:	f388 8811 	msr	BASEPRI, r8
    50b2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    50b6:	f06f 000f 	mvn.w	r0, #15
    50ba:	e00c      	b.n	50d6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    50bc:	6891      	ldr	r1, [r2, #8]
    50be:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    50c2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    50c4:	3301      	adds	r3, #1
    50c6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    50c8:	6893      	ldr	r3, [r2, #8]
    50ca:	60a3      	str	r3, [r4, #8]
    50cc:	f388 8811 	msr	BASEPRI, r8
    50d0:	f3bf 8f6f 	isb	sy
		return 0;
    50d4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    50d6:	b002      	add	sp, #8
    50d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    50dc:	6921      	ldr	r1, [r4, #16]
    50de:	e7f0      	b.n	50c2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    50e0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    50e4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    50e8:	4299      	cmp	r1, r3
    50ea:	bfa8      	it	ge
    50ec:	4619      	movge	r1, r3
    50ee:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    50f2:	4291      	cmp	r1, r2
    50f4:	bfb8      	it	lt
    50f6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    50f8:	428b      	cmp	r3, r1
    50fa:	dd2e      	ble.n	515a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    50fc:	f002 f81b 	bl	7136 <adjust_owner_prio.isra.0>
    5100:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5102:	e9cd 7600 	strd	r7, r6, [sp]
    5106:	4819      	ldr	r0, [pc, #100]	; (516c <z_impl_k_mutex_lock+0xec>)
    5108:	4622      	mov	r2, r4
    510a:	4641      	mov	r1, r8
    510c:	f000 fa54 	bl	55b8 <z_pend_curr>
	if (got_mutex == 0) {
    5110:	2800      	cmp	r0, #0
    5112:	d0e0      	beq.n	50d6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    5114:	f04f 0320 	mov.w	r3, #32
    5118:	f3ef 8611 	mrs	r6, BASEPRI
    511c:	f383 8812 	msr	BASEPRI_MAX, r3
    5120:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5124:	6823      	ldr	r3, [r4, #0]
    5126:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5128:	429c      	cmp	r4, r3
    512a:	d00a      	beq.n	5142 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    512c:	b14b      	cbz	r3, 5142 <z_impl_k_mutex_lock+0xc2>
    512e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5132:	4299      	cmp	r1, r3
    5134:	bfa8      	it	ge
    5136:	4619      	movge	r1, r3
    5138:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    513c:	4299      	cmp	r1, r3
    513e:	bfb8      	it	lt
    5140:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5142:	68a0      	ldr	r0, [r4, #8]
    5144:	f001 fff7 	bl	7136 <adjust_owner_prio.isra.0>
    5148:	b900      	cbnz	r0, 514c <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    514a:	b145      	cbz	r5, 515e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    514c:	4807      	ldr	r0, [pc, #28]	; (516c <z_impl_k_mutex_lock+0xec>)
    514e:	4631      	mov	r1, r6
    5150:	f000 f8de 	bl	5310 <z_reschedule>
	return -EAGAIN;
    5154:	f06f 000a 	mvn.w	r0, #10
    5158:	e7bd      	b.n	50d6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    515a:	2500      	movs	r5, #0
    515c:	e7d1      	b.n	5102 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    515e:	f386 8811 	msr	BASEPRI, r6
    5162:	f3bf 8f6f 	isb	sy
    5166:	e7f5      	b.n	5154 <z_impl_k_mutex_lock+0xd4>
    5168:	20000e70 	.word	0x20000e70
    516c:	200014aa 	.word	0x200014aa

00005170 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5170:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5172:	6883      	ldr	r3, [r0, #8]
{
    5174:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    5176:	2b00      	cmp	r3, #0
    5178:	d032      	beq.n	51e0 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    517a:	4a1c      	ldr	r2, [pc, #112]	; (51ec <z_impl_k_mutex_unlock+0x7c>)
    517c:	6892      	ldr	r2, [r2, #8]
    517e:	4293      	cmp	r3, r2
    5180:	d131      	bne.n	51e6 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5182:	7bda      	ldrb	r2, [r3, #15]
    5184:	3a01      	subs	r2, #1
    5186:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5188:	68c3      	ldr	r3, [r0, #12]
    518a:	2b01      	cmp	r3, #1
    518c:	d905      	bls.n	519a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    518e:	3b01      	subs	r3, #1
    5190:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5192:	f000 fa9f 	bl	56d4 <k_sched_unlock>

	return 0;
    5196:	2000      	movs	r0, #0
}
    5198:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    519a:	f04f 0320 	mov.w	r3, #32
    519e:	f3ef 8511 	mrs	r5, BASEPRI
    51a2:	f383 8812 	msr	BASEPRI_MAX, r3
    51a6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    51aa:	6901      	ldr	r1, [r0, #16]
    51ac:	6880      	ldr	r0, [r0, #8]
    51ae:	f001 ffc2 	bl	7136 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    51b2:	4620      	mov	r0, r4
    51b4:	f002 f87d 	bl	72b2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    51b8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    51ba:	b158      	cbz	r0, 51d4 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    51bc:	f990 200e 	ldrsb.w	r2, [r0, #14]
    51c0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    51c2:	2200      	movs	r2, #0
    51c4:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    51c6:	f002 f803 	bl	71d0 <z_ready_thread>
		z_reschedule(&lock, key);
    51ca:	4809      	ldr	r0, [pc, #36]	; (51f0 <z_impl_k_mutex_unlock+0x80>)
    51cc:	4629      	mov	r1, r5
    51ce:	f000 f89f 	bl	5310 <z_reschedule>
    51d2:	e7de      	b.n	5192 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    51d4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    51d6:	f385 8811 	msr	BASEPRI, r5
    51da:	f3bf 8f6f 	isb	sy
    51de:	e7d8      	b.n	5192 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    51e0:	f06f 0015 	mvn.w	r0, #21
    51e4:	e7d8      	b.n	5198 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    51e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    51ea:	e7d5      	b.n	5198 <z_impl_k_mutex_unlock+0x28>
    51ec:	20000e70 	.word	0x20000e70
    51f0:	200014aa 	.word	0x200014aa

000051f4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    51f4:	b538      	push	{r3, r4, r5, lr}
    51f6:	4604      	mov	r4, r0
	__asm__ volatile(
    51f8:	f04f 0320 	mov.w	r3, #32
    51fc:	f3ef 8511 	mrs	r5, BASEPRI
    5200:	f383 8812 	msr	BASEPRI_MAX, r3
    5204:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5208:	f002 f853 	bl	72b2 <z_unpend_first_thread>

	if (thread != NULL) {
    520c:	b148      	cbz	r0, 5222 <z_impl_k_sem_give+0x2e>
    520e:	2200      	movs	r2, #0
    5210:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5212:	f001 ffdd 	bl	71d0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5216:	4629      	mov	r1, r5
    5218:	4805      	ldr	r0, [pc, #20]	; (5230 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    521a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    521e:	f000 b877 	b.w	5310 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5222:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5226:	429a      	cmp	r2, r3
    5228:	bf18      	it	ne
    522a:	3301      	addne	r3, #1
    522c:	60a3      	str	r3, [r4, #8]
}
    522e:	e7f2      	b.n	5216 <z_impl_k_sem_give+0x22>
    5230:	200014aa 	.word	0x200014aa

00005234 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5234:	b513      	push	{r0, r1, r4, lr}
    5236:	f04f 0420 	mov.w	r4, #32
    523a:	f3ef 8111 	mrs	r1, BASEPRI
    523e:	f384 8812 	msr	BASEPRI_MAX, r4
    5242:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5246:	6884      	ldr	r4, [r0, #8]
    5248:	b144      	cbz	r4, 525c <z_impl_k_sem_take+0x28>
		sem->count--;
    524a:	3c01      	subs	r4, #1
    524c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    524e:	f381 8811 	msr	BASEPRI, r1
    5252:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5256:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5258:	b002      	add	sp, #8
    525a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    525c:	ea52 0403 	orrs.w	r4, r2, r3
    5260:	d106      	bne.n	5270 <z_impl_k_sem_take+0x3c>
    5262:	f381 8811 	msr	BASEPRI, r1
    5266:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    526a:	f06f 000f 	mvn.w	r0, #15
    526e:	e7f3      	b.n	5258 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5270:	e9cd 2300 	strd	r2, r3, [sp]
    5274:	4602      	mov	r2, r0
    5276:	4802      	ldr	r0, [pc, #8]	; (5280 <z_impl_k_sem_take+0x4c>)
    5278:	f000 f99e 	bl	55b8 <z_pend_curr>
	return ret;
    527c:	e7ec      	b.n	5258 <z_impl_k_sem_take+0x24>
    527e:	bf00      	nop
    5280:	200014aa 	.word	0x200014aa

00005284 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5284:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5286:	4d07      	ldr	r5, [pc, #28]	; (52a4 <z_reset_time_slice+0x20>)
    5288:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    528a:	b154      	cbz	r4, 52a2 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    528c:	f7fe fc74 	bl	3b78 <sys_clock_elapsed>
    5290:	4b05      	ldr	r3, [pc, #20]	; (52a8 <z_reset_time_slice+0x24>)
    5292:	4404      	add	r4, r0
    5294:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5296:	6828      	ldr	r0, [r5, #0]
    5298:	2100      	movs	r1, #0
	}
}
    529a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    529e:	f002 b846 	b.w	732e <z_set_timeout_expiry>
}
    52a2:	bd38      	pop	{r3, r4, r5, pc}
    52a4:	20000ea0 	.word	0x20000ea0
    52a8:	20000e70 	.word	0x20000e70

000052ac <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    52ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52ae:	4604      	mov	r4, r0
    52b0:	460d      	mov	r5, r1
	__asm__ volatile(
    52b2:	f04f 0320 	mov.w	r3, #32
    52b6:	f3ef 8711 	mrs	r7, BASEPRI
    52ba:	f383 8812 	msr	BASEPRI_MAX, r3
    52be:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    52c2:	4e10      	ldr	r6, [pc, #64]	; (5304 <k_sched_time_slice_set+0x58>)
    52c4:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    52c6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    52ca:	f240 30e7 	movw	r0, #999	; 0x3e7
    52ce:	6131      	str	r1, [r6, #16]
    52d0:	2300      	movs	r3, #0
    52d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    52d6:	fbe4 010c 	umlal	r0, r1, r4, ip
    52da:	f7fa ff11 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    52de:	2c00      	cmp	r4, #0
    52e0:	4b09      	ldr	r3, [pc, #36]	; (5308 <k_sched_time_slice_set+0x5c>)
    52e2:	dc0a      	bgt.n	52fa <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    52e4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    52e6:	4b09      	ldr	r3, [pc, #36]	; (530c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    52e8:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    52ea:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    52ec:	f7ff ffca 	bl	5284 <z_reset_time_slice>
	__asm__ volatile(
    52f0:	f387 8811 	msr	BASEPRI, r7
    52f4:	f3bf 8f6f 	isb	sy
	}
}
    52f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    52fa:	2802      	cmp	r0, #2
    52fc:	bfb8      	it	lt
    52fe:	2002      	movlt	r0, #2
    5300:	e7f0      	b.n	52e4 <k_sched_time_slice_set+0x38>
    5302:	bf00      	nop
    5304:	20000e70 	.word	0x20000e70
    5308:	20000ea0 	.word	0x20000ea0
    530c:	20000e9c 	.word	0x20000e9c

00005310 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5310:	b949      	cbnz	r1, 5326 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5312:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    5316:	b930      	cbnz	r0, 5326 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    5318:	4b05      	ldr	r3, [pc, #20]	; (5330 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    531a:	69da      	ldr	r2, [r3, #28]
    531c:	689b      	ldr	r3, [r3, #8]
    531e:	429a      	cmp	r2, r3
    5320:	d001      	beq.n	5326 <z_reschedule+0x16>
	ret = arch_swap(key);
    5322:	f7fc bea7 	b.w	2074 <arch_swap>
    5326:	f381 8811 	msr	BASEPRI, r1
    532a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    532e:	4770      	bx	lr
    5330:	20000e70 	.word	0x20000e70

00005334 <k_sched_lock>:
	__asm__ volatile(
    5334:	f04f 0320 	mov.w	r3, #32
    5338:	f3ef 8111 	mrs	r1, BASEPRI
    533c:	f383 8812 	msr	BASEPRI_MAX, r3
    5340:	f3bf 8f6f 	isb	sy
    5344:	4b04      	ldr	r3, [pc, #16]	; (5358 <k_sched_lock+0x24>)
    5346:	689a      	ldr	r2, [r3, #8]
    5348:	7bd3      	ldrb	r3, [r2, #15]
    534a:	3b01      	subs	r3, #1
    534c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    534e:	f381 8811 	msr	BASEPRI, r1
    5352:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5356:	4770      	bx	lr
    5358:	20000e70 	.word	0x20000e70

0000535c <update_cache>:
{
    535c:	b538      	push	{r3, r4, r5, lr}
    535e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5360:	480c      	ldr	r0, [pc, #48]	; (5394 <update_cache+0x38>)
    5362:	4d0d      	ldr	r5, [pc, #52]	; (5398 <update_cache+0x3c>)
    5364:	f001 ff2e 	bl	71c4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5368:	4604      	mov	r4, r0
    536a:	b900      	cbnz	r0, 536e <update_cache+0x12>
    536c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    536e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5370:	b94a      	cbnz	r2, 5386 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    5372:	7b5a      	ldrb	r2, [r3, #13]
    5374:	06d2      	lsls	r2, r2, #27
    5376:	d106      	bne.n	5386 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5378:	69a2      	ldr	r2, [r4, #24]
    537a:	b922      	cbnz	r2, 5386 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    537c:	89da      	ldrh	r2, [r3, #14]
    537e:	2a7f      	cmp	r2, #127	; 0x7f
    5380:	d901      	bls.n	5386 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    5382:	61eb      	str	r3, [r5, #28]
}
    5384:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5386:	429c      	cmp	r4, r3
    5388:	d002      	beq.n	5390 <update_cache+0x34>
			z_reset_time_slice(thread);
    538a:	4620      	mov	r0, r4
    538c:	f7ff ff7a 	bl	5284 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5390:	61ec      	str	r4, [r5, #28]
}
    5392:	e7f7      	b.n	5384 <update_cache+0x28>
    5394:	20000e90 	.word	0x20000e90
    5398:	20000e70 	.word	0x20000e70

0000539c <move_thread_to_end_of_prio_q>:
{
    539c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    539e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    53a2:	7b43      	ldrb	r3, [r0, #13]
    53a4:	2a00      	cmp	r2, #0
{
    53a6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    53a8:	da04      	bge.n	53b4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    53aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    53ae:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    53b0:	f001 fed0 	bl	7154 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    53b4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    53b6:	4a15      	ldr	r2, [pc, #84]	; (540c <move_thread_to_end_of_prio_q+0x70>)
    53b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    53bc:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    53be:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53c2:	f102 0520 	add.w	r5, r2, #32
    53c6:	42ab      	cmp	r3, r5
    53c8:	d01b      	beq.n	5402 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    53ca:	b1d3      	cbz	r3, 5402 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    53cc:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    53d0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    53d4:	4286      	cmp	r6, r0
    53d6:	d00f      	beq.n	53f8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    53d8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    53da:	2800      	cmp	r0, #0
    53dc:	dd0c      	ble.n	53f8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    53de:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    53e0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    53e4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    53e6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    53e8:	6890      	ldr	r0, [r2, #8]
    53ea:	1a43      	subs	r3, r0, r1
    53ec:	4258      	negs	r0, r3
}
    53ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    53f2:	4158      	adcs	r0, r3
    53f4:	f7ff bfb2 	b.w	535c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    53f8:	42a3      	cmp	r3, r4
    53fa:	d002      	beq.n	5402 <move_thread_to_end_of_prio_q+0x66>
    53fc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    53fe:	2b00      	cmp	r3, #0
    5400:	d1e6      	bne.n	53d0 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    5402:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    5406:	6021      	str	r1, [r4, #0]
	list->tail = node;
    5408:	6251      	str	r1, [r2, #36]	; 0x24
}
    540a:	e7ed      	b.n	53e8 <move_thread_to_end_of_prio_q+0x4c>
    540c:	20000e70 	.word	0x20000e70

00005410 <z_time_slice>:
{
    5410:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5412:	f04f 0320 	mov.w	r3, #32
    5416:	f3ef 8511 	mrs	r5, BASEPRI
    541a:	f383 8812 	msr	BASEPRI_MAX, r3
    541e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    5422:	4b17      	ldr	r3, [pc, #92]	; (5480 <z_time_slice+0x70>)
    5424:	4a17      	ldr	r2, [pc, #92]	; (5484 <z_time_slice+0x74>)
    5426:	689c      	ldr	r4, [r3, #8]
    5428:	6811      	ldr	r1, [r2, #0]
    542a:	428c      	cmp	r4, r1
    542c:	d107      	bne.n	543e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    542e:	4620      	mov	r0, r4
    5430:	f7ff ff28 	bl	5284 <z_reset_time_slice>
	__asm__ volatile(
    5434:	f385 8811 	msr	BASEPRI, r5
    5438:	f3bf 8f6f 	isb	sy
}
    543c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    543e:	2100      	movs	r1, #0
    5440:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    5442:	4a11      	ldr	r2, [pc, #68]	; (5488 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    5444:	6812      	ldr	r2, [r2, #0]
    5446:	b1c2      	cbz	r2, 547a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5448:	89e2      	ldrh	r2, [r4, #14]
    544a:	2a7f      	cmp	r2, #127	; 0x7f
    544c:	d815      	bhi.n	547a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    544e:	7b62      	ldrb	r2, [r4, #13]
    5450:	06d2      	lsls	r2, r2, #27
    5452:	d112      	bne.n	547a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5454:	4a0d      	ldr	r2, [pc, #52]	; (548c <z_time_slice+0x7c>)
    5456:	f994 100e 	ldrsb.w	r1, [r4, #14]
    545a:	6812      	ldr	r2, [r2, #0]
    545c:	4291      	cmp	r1, r2
    545e:	db0c      	blt.n	547a <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    5460:	4a0b      	ldr	r2, [pc, #44]	; (5490 <z_time_slice+0x80>)
    5462:	4294      	cmp	r4, r2
    5464:	d009      	beq.n	547a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    5466:	691a      	ldr	r2, [r3, #16]
    5468:	4282      	cmp	r2, r0
    546a:	dc03      	bgt.n	5474 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    546c:	4620      	mov	r0, r4
    546e:	f7ff ff95 	bl	539c <move_thread_to_end_of_prio_q>
    5472:	e7dc      	b.n	542e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    5474:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    5476:	611a      	str	r2, [r3, #16]
    5478:	e7dc      	b.n	5434 <z_time_slice+0x24>
    547a:	2200      	movs	r2, #0
    547c:	e7fb      	b.n	5476 <z_time_slice+0x66>
    547e:	bf00      	nop
    5480:	20000e70 	.word	0x20000e70
    5484:	20000e98 	.word	0x20000e98
    5488:	20000ea0 	.word	0x20000ea0
    548c:	20000e9c 	.word	0x20000e9c
    5490:	20000650 	.word	0x20000650

00005494 <ready_thread>:
{
    5494:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5496:	f990 200d 	ldrsb.w	r2, [r0, #13]
    549a:	7b43      	ldrb	r3, [r0, #13]
    549c:	2a00      	cmp	r2, #0
    549e:	db2a      	blt.n	54f6 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    54a0:	06da      	lsls	r2, r3, #27
    54a2:	d128      	bne.n	54f6 <ready_thread+0x62>
    54a4:	6982      	ldr	r2, [r0, #24]
    54a6:	bb32      	cbnz	r2, 54f6 <ready_thread+0x62>
	return list->head == list;
    54a8:	4a14      	ldr	r2, [pc, #80]	; (54fc <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    54aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    54ae:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    54b0:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    54b4:	f102 0520 	add.w	r5, r2, #32
    54b8:	42ab      	cmp	r3, r5
    54ba:	d017      	beq.n	54ec <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    54bc:	b1b3      	cbz	r3, 54ec <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    54be:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    54c2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    54c6:	428e      	cmp	r6, r1
    54c8:	d00b      	beq.n	54e2 <ready_thread+0x4e>
		return b2 - b1;
    54ca:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    54cc:	2900      	cmp	r1, #0
    54ce:	dd08      	ble.n	54e2 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    54d0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    54d2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    54d6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    54d8:	6058      	str	r0, [r3, #4]
}
    54da:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    54dc:	2000      	movs	r0, #0
    54de:	f7ff bf3d 	b.w	535c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    54e2:	42a3      	cmp	r3, r4
    54e4:	d002      	beq.n	54ec <ready_thread+0x58>
    54e6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    54e8:	2b00      	cmp	r3, #0
    54ea:	d1ea      	bne.n	54c2 <ready_thread+0x2e>
	node->prev = tail;
    54ec:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    54f0:	6020      	str	r0, [r4, #0]
	list->tail = node;
    54f2:	6250      	str	r0, [r2, #36]	; 0x24
}
    54f4:	e7f1      	b.n	54da <ready_thread+0x46>
}
    54f6:	bc70      	pop	{r4, r5, r6}
    54f8:	4770      	bx	lr
    54fa:	bf00      	nop
    54fc:	20000e70 	.word	0x20000e70

00005500 <z_sched_start>:
{
    5500:	b510      	push	{r4, lr}
	__asm__ volatile(
    5502:	f04f 0220 	mov.w	r2, #32
    5506:	f3ef 8411 	mrs	r4, BASEPRI
    550a:	f382 8812 	msr	BASEPRI_MAX, r2
    550e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5512:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    5514:	0751      	lsls	r1, r2, #29
    5516:	d404      	bmi.n	5522 <z_sched_start+0x22>
	__asm__ volatile(
    5518:	f384 8811 	msr	BASEPRI, r4
    551c:	f3bf 8f6f 	isb	sy
}
    5520:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5522:	f022 0204 	bic.w	r2, r2, #4
    5526:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    5528:	f7ff ffb4 	bl	5494 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    552c:	4621      	mov	r1, r4
    552e:	4802      	ldr	r0, [pc, #8]	; (5538 <z_sched_start+0x38>)
}
    5530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    5534:	f7ff beec 	b.w	5310 <z_reschedule>
    5538:	200014aa 	.word	0x200014aa

0000553c <unready_thread>:
{
    553c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    553e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5542:	7b43      	ldrb	r3, [r0, #13]
    5544:	2a00      	cmp	r2, #0
{
    5546:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5548:	da04      	bge.n	5554 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    554a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    554e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5550:	f001 fe00 	bl	7154 <sys_dlist_remove>
	update_cache(thread == _current);
    5554:	4b04      	ldr	r3, [pc, #16]	; (5568 <unready_thread+0x2c>)
    5556:	6898      	ldr	r0, [r3, #8]
    5558:	1a43      	subs	r3, r0, r1
    555a:	4258      	negs	r0, r3
    555c:	4158      	adcs	r0, r3
}
    555e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5562:	f7ff befb 	b.w	535c <update_cache>
    5566:	bf00      	nop
    5568:	20000e70 	.word	0x20000e70

0000556c <pend>:
{
    556c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5570:	4606      	mov	r6, r0
    5572:	4615      	mov	r5, r2
    5574:	461c      	mov	r4, r3
	__asm__ volatile(
    5576:	f04f 0320 	mov.w	r3, #32
    557a:	f3ef 8711 	mrs	r7, BASEPRI
    557e:	f383 8812 	msr	BASEPRI_MAX, r3
    5582:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    5586:	f001 fe55 	bl	7234 <add_to_waitq_locked>
	__asm__ volatile(
    558a:	f387 8811 	msr	BASEPRI, r7
    558e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5592:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    5596:	bf08      	it	eq
    5598:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    559c:	d008      	beq.n	55b0 <pend+0x44>
    559e:	462a      	mov	r2, r5
    55a0:	4623      	mov	r3, r4
    55a2:	f106 0018 	add.w	r0, r6, #24
    55a6:	4903      	ldr	r1, [pc, #12]	; (55b4 <pend+0x48>)
}
    55a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    55ac:	f000 ba18 	b.w	59e0 <z_add_timeout>
    55b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55b4:	000071f1 	.word	0x000071f1

000055b8 <z_pend_curr>:
{
    55b8:	b510      	push	{r4, lr}
	pending_current = _current;
    55ba:	4b07      	ldr	r3, [pc, #28]	; (55d8 <z_pend_curr+0x20>)
    55bc:	6898      	ldr	r0, [r3, #8]
    55be:	4b07      	ldr	r3, [pc, #28]	; (55dc <z_pend_curr+0x24>)
{
    55c0:	460c      	mov	r4, r1
	pending_current = _current;
    55c2:	6018      	str	r0, [r3, #0]
{
    55c4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    55c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    55ca:	f7ff ffcf 	bl	556c <pend>
    55ce:	4620      	mov	r0, r4
}
    55d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    55d4:	f7fc bd4e 	b.w	2074 <arch_swap>
    55d8:	20000e70 	.word	0x20000e70
    55dc:	20000e98 	.word	0x20000e98

000055e0 <z_set_prio>:
{
    55e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55e2:	4604      	mov	r4, r0
	__asm__ volatile(
    55e4:	f04f 0320 	mov.w	r3, #32
    55e8:	f3ef 8611 	mrs	r6, BASEPRI
    55ec:	f383 8812 	msr	BASEPRI_MAX, r3
    55f0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    55f4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    55f6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    55f8:	b249      	sxtb	r1, r1
    55fa:	d133      	bne.n	5664 <z_set_prio+0x84>
		if (need_sched) {
    55fc:	6982      	ldr	r2, [r0, #24]
    55fe:	bb8a      	cbnz	r2, 5664 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5604:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5606:	f001 fda5 	bl	7154 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    560a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    560c:	4a17      	ldr	r2, [pc, #92]	; (566c <z_set_prio+0x8c>)
				thread->base.prio = prio;
    560e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5610:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5614:	7343      	strb	r3, [r0, #13]
    5616:	4610      	mov	r0, r2
    5618:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    561c:	4283      	cmp	r3, r0
    561e:	d01b      	beq.n	5658 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5620:	b1d3      	cbz	r3, 5658 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    5622:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    5624:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    5628:	42a9      	cmp	r1, r5
    562a:	d010      	beq.n	564e <z_set_prio+0x6e>
		return b2 - b1;
    562c:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    562e:	2d00      	cmp	r5, #0
    5630:	dd0d      	ble.n	564e <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    5632:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5634:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5638:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    563a:	605c      	str	r4, [r3, #4]
			update_cache(1);
    563c:	2001      	movs	r0, #1
    563e:	f7ff fe8d 	bl	535c <update_cache>
    5642:	2001      	movs	r0, #1
	__asm__ volatile(
    5644:	f386 8811 	msr	BASEPRI, r6
    5648:	f3bf 8f6f 	isb	sy
}
    564c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    564e:	42bb      	cmp	r3, r7
    5650:	d002      	beq.n	5658 <z_set_prio+0x78>
    5652:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5654:	2b00      	cmp	r3, #0
    5656:	d1e5      	bne.n	5624 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    5658:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    565a:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    565e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5660:	6254      	str	r4, [r2, #36]	; 0x24
}
    5662:	e7eb      	b.n	563c <z_set_prio+0x5c>
			thread->base.prio = prio;
    5664:	73a1      	strb	r1, [r4, #14]
    5666:	2000      	movs	r0, #0
    5668:	e7ec      	b.n	5644 <z_set_prio+0x64>
    566a:	bf00      	nop
    566c:	20000e70 	.word	0x20000e70

00005670 <z_impl_k_thread_suspend>:
{
    5670:	b570      	push	{r4, r5, r6, lr}
    5672:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5674:	3018      	adds	r0, #24
    5676:	f001 fe34 	bl	72e2 <z_abort_timeout>
	__asm__ volatile(
    567a:	f04f 0320 	mov.w	r3, #32
    567e:	f3ef 8611 	mrs	r6, BASEPRI
    5682:	f383 8812 	msr	BASEPRI_MAX, r3
    5686:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    568a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    568e:	7b63      	ldrb	r3, [r4, #13]
    5690:	2a00      	cmp	r2, #0
    5692:	da05      	bge.n	56a0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5698:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    569a:	4620      	mov	r0, r4
    569c:	f001 fd5a 	bl	7154 <sys_dlist_remove>
		update_cache(thread == _current);
    56a0:	4d0b      	ldr	r5, [pc, #44]	; (56d0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    56a2:	7b63      	ldrb	r3, [r4, #13]
    56a4:	68a8      	ldr	r0, [r5, #8]
    56a6:	f043 0310 	orr.w	r3, r3, #16
    56aa:	7363      	strb	r3, [r4, #13]
    56ac:	1b03      	subs	r3, r0, r4
    56ae:	4258      	negs	r0, r3
    56b0:	4158      	adcs	r0, r3
    56b2:	f7ff fe53 	bl	535c <update_cache>
	__asm__ volatile(
    56b6:	f386 8811 	msr	BASEPRI, r6
    56ba:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    56be:	68ab      	ldr	r3, [r5, #8]
    56c0:	42a3      	cmp	r3, r4
    56c2:	d103      	bne.n	56cc <z_impl_k_thread_suspend+0x5c>
}
    56c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    56c8:	f001 bd72 	b.w	71b0 <z_reschedule_unlocked>
}
    56cc:	bd70      	pop	{r4, r5, r6, pc}
    56ce:	bf00      	nop
    56d0:	20000e70 	.word	0x20000e70

000056d4 <k_sched_unlock>:
{
    56d4:	b510      	push	{r4, lr}
	__asm__ volatile(
    56d6:	f04f 0320 	mov.w	r3, #32
    56da:	f3ef 8411 	mrs	r4, BASEPRI
    56de:	f383 8812 	msr	BASEPRI_MAX, r3
    56e2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    56e6:	4b08      	ldr	r3, [pc, #32]	; (5708 <k_sched_unlock+0x34>)
    56e8:	689a      	ldr	r2, [r3, #8]
    56ea:	7bd3      	ldrb	r3, [r2, #15]
    56ec:	3301      	adds	r3, #1
    56ee:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    56f0:	2000      	movs	r0, #0
    56f2:	f7ff fe33 	bl	535c <update_cache>
	__asm__ volatile(
    56f6:	f384 8811 	msr	BASEPRI, r4
    56fa:	f3bf 8f6f 	isb	sy
}
    56fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5702:	f001 bd55 	b.w	71b0 <z_reschedule_unlocked>
    5706:	bf00      	nop
    5708:	20000e70 	.word	0x20000e70

0000570c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    570c:	4b04      	ldr	r3, [pc, #16]	; (5720 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    570e:	2100      	movs	r1, #0
    5710:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5714:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5718:	4608      	mov	r0, r1
    571a:	f7ff bdc7 	b.w	52ac <k_sched_time_slice_set>
    571e:	bf00      	nop
    5720:	20000e70 	.word	0x20000e70

00005724 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    5724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5726:	f04f 0320 	mov.w	r3, #32
    572a:	f3ef 8511 	mrs	r5, BASEPRI
    572e:	f383 8812 	msr	BASEPRI_MAX, r3
    5732:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5736:	491a      	ldr	r1, [pc, #104]	; (57a0 <z_impl_k_yield+0x7c>)
    5738:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    573a:	7b43      	ldrb	r3, [r0, #13]
    573c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5740:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5742:	f001 fd07 	bl	7154 <sys_dlist_remove>
	}
	queue_thread(_current);
    5746:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5748:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    574a:	4608      	mov	r0, r1
    574c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5750:	735a      	strb	r2, [r3, #13]
    5752:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5756:	4282      	cmp	r2, r0
    5758:	d01c      	beq.n	5794 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    575a:	b1da      	cbz	r2, 5794 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    575c:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    575e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    5762:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    5766:	42a6      	cmp	r6, r4
    5768:	d00f      	beq.n	578a <z_impl_k_yield+0x66>
		return b2 - b1;
    576a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    576c:	2c00      	cmp	r4, #0
    576e:	dd0c      	ble.n	578a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    5770:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5772:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5776:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5778:	6053      	str	r3, [r2, #4]
	update_cache(1);
    577a:	2001      	movs	r0, #1
    577c:	f7ff fdee 	bl	535c <update_cache>
    5780:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5782:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5786:	f7fc bc75 	b.w	2074 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    578a:	42ba      	cmp	r2, r7
    578c:	d002      	beq.n	5794 <z_impl_k_yield+0x70>
    578e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5790:	2a00      	cmp	r2, #0
    5792:	d1e6      	bne.n	5762 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    5794:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    5796:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    579a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    579c:	624b      	str	r3, [r1, #36]	; 0x24
}
    579e:	e7ec      	b.n	577a <z_impl_k_yield+0x56>
    57a0:	20000e70 	.word	0x20000e70

000057a4 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    57a4:	ea50 0301 	orrs.w	r3, r0, r1
{
    57a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57ac:	4605      	mov	r5, r0
    57ae:	460e      	mov	r6, r1
	if (ticks == 0) {
    57b0:	d103      	bne.n	57ba <z_tick_sleep+0x16>
	z_impl_k_yield();
    57b2:	f7ff ffb7 	bl	5724 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    57b6:	2000      	movs	r0, #0
    57b8:	e033      	b.n	5822 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    57ba:	f06f 0401 	mvn.w	r4, #1
    57be:	1a24      	subs	r4, r4, r0
    57c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    57c4:	eb63 0301 	sbc.w	r3, r3, r1
    57c8:	2c01      	cmp	r4, #1
    57ca:	f173 0300 	sbcs.w	r3, r3, #0
    57ce:	da02      	bge.n	57d6 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    57d0:	f001 fdc7 	bl	7362 <sys_clock_tick_get_32>
    57d4:	1944      	adds	r4, r0, r5
    57d6:	f04f 0320 	mov.w	r3, #32
    57da:	f3ef 8811 	mrs	r8, BASEPRI
    57de:	f383 8812 	msr	BASEPRI_MAX, r3
    57e2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    57e6:	4f10      	ldr	r7, [pc, #64]	; (5828 <z_tick_sleep+0x84>)
    57e8:	4b10      	ldr	r3, [pc, #64]	; (582c <z_tick_sleep+0x88>)
    57ea:	68b8      	ldr	r0, [r7, #8]
    57ec:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    57ee:	f7ff fea5 	bl	553c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    57f2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    57f4:	490e      	ldr	r1, [pc, #56]	; (5830 <z_tick_sleep+0x8c>)
    57f6:	462a      	mov	r2, r5
    57f8:	4633      	mov	r3, r6
    57fa:	3018      	adds	r0, #24
    57fc:	f000 f8f0 	bl	59e0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5800:	68ba      	ldr	r2, [r7, #8]
    5802:	7b53      	ldrb	r3, [r2, #13]
    5804:	f043 0310 	orr.w	r3, r3, #16
    5808:	7353      	strb	r3, [r2, #13]
    580a:	4640      	mov	r0, r8
    580c:	f7fc fc32 	bl	2074 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5810:	f001 fda7 	bl	7362 <sys_clock_tick_get_32>
    5814:	1a20      	subs	r0, r4, r0
    5816:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    581a:	2801      	cmp	r0, #1
    581c:	f173 0300 	sbcs.w	r3, r3, #0
    5820:	dbc9      	blt.n	57b6 <z_tick_sleep+0x12>
}
    5822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5826:	bf00      	nop
    5828:	20000e70 	.word	0x20000e70
    582c:	20000e98 	.word	0x20000e98
    5830:	000071f1 	.word	0x000071f1

00005834 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5834:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    5838:	bf08      	it	eq
    583a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    583e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5840:	d106      	bne.n	5850 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    5842:	4b08      	ldr	r3, [pc, #32]	; (5864 <z_impl_k_sleep+0x30>)
    5844:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5846:	f7ff ff13 	bl	5670 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    584a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    584e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    5850:	f7ff ffa8 	bl	57a4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    5854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5858:	fb80 0303 	smull	r0, r3, r0, r3
    585c:	0bc0      	lsrs	r0, r0, #15
    585e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5862:	e7f4      	b.n	584e <z_impl_k_sleep+0x1a>
    5864:	20000e70 	.word	0x20000e70

00005868 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5868:	4b01      	ldr	r3, [pc, #4]	; (5870 <z_impl_z_current_get+0x8>)
    586a:	6898      	ldr	r0, [r3, #8]
    586c:	4770      	bx	lr
    586e:	bf00      	nop
    5870:	20000e70 	.word	0x20000e70

00005874 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5878:	4604      	mov	r4, r0
    587a:	f04f 0320 	mov.w	r3, #32
    587e:	f3ef 8611 	mrs	r6, BASEPRI
    5882:	f383 8812 	msr	BASEPRI_MAX, r3
    5886:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    588a:	7b43      	ldrb	r3, [r0, #13]
    588c:	071a      	lsls	r2, r3, #28
    588e:	d505      	bpl.n	589c <z_thread_abort+0x28>
	__asm__ volatile(
    5890:	f386 8811 	msr	BASEPRI, r6
    5894:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    589c:	f023 0220 	bic.w	r2, r3, #32
    58a0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    58a4:	09d2      	lsrs	r2, r2, #7
    58a6:	d120      	bne.n	58ea <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    58a8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    58aa:	68a3      	ldr	r3, [r4, #8]
    58ac:	b113      	cbz	r3, 58b4 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    58ae:	4620      	mov	r0, r4
    58b0:	f001 fc58 	bl	7164 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    58b4:	f104 0018 	add.w	r0, r4, #24
    58b8:	f001 fd13 	bl	72e2 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    58bc:	f104 0758 	add.w	r7, r4, #88	; 0x58
    58c0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    58c4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    58c6:	42bd      	cmp	r5, r7
    58c8:	d000      	beq.n	58cc <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    58ca:	b9b5      	cbnz	r5, 58fa <z_thread_abort+0x86>
		update_cache(1);
    58cc:	2001      	movs	r0, #1
    58ce:	f7ff fd45 	bl	535c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    58d2:	4b10      	ldr	r3, [pc, #64]	; (5914 <z_thread_abort+0xa0>)
    58d4:	689b      	ldr	r3, [r3, #8]
    58d6:	42a3      	cmp	r3, r4
    58d8:	d1da      	bne.n	5890 <z_thread_abort+0x1c>
    58da:	f3ef 8305 	mrs	r3, IPSR
    58de:	2b00      	cmp	r3, #0
    58e0:	d1d6      	bne.n	5890 <z_thread_abort+0x1c>
    58e2:	4630      	mov	r0, r6
    58e4:	f7fc fbc6 	bl	2074 <arch_swap>
	return ret;
    58e8:	e7d2      	b.n	5890 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    58ea:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    58ee:	f043 0308 	orr.w	r3, r3, #8
    58f2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    58f4:	f001 fc2e 	bl	7154 <sys_dlist_remove>
}
    58f8:	e7d7      	b.n	58aa <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    58fa:	4628      	mov	r0, r5
    58fc:	f001 fc32 	bl	7164 <unpend_thread_no_timeout>
    5900:	f105 0018 	add.w	r0, r5, #24
    5904:	f001 fced 	bl	72e2 <z_abort_timeout>
    5908:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    590c:	4628      	mov	r0, r5
    590e:	f7ff fdc1 	bl	5494 <ready_thread>
    5912:	e7d7      	b.n	58c4 <z_thread_abort+0x50>
    5914:	20000e70 	.word	0x20000e70

00005918 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    5918:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    591a:	4806      	ldr	r0, [pc, #24]	; (5934 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    591c:	4a06      	ldr	r2, [pc, #24]	; (5938 <z_data_copy+0x20>)
    591e:	4907      	ldr	r1, [pc, #28]	; (593c <z_data_copy+0x24>)
    5920:	1a12      	subs	r2, r2, r0
    5922:	f001 fbb5 	bl	7090 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5926:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    592a:	4a05      	ldr	r2, [pc, #20]	; (5940 <z_data_copy+0x28>)
    592c:	4905      	ldr	r1, [pc, #20]	; (5944 <z_data_copy+0x2c>)
    592e:	4806      	ldr	r0, [pc, #24]	; (5948 <z_data_copy+0x30>)
    5930:	f001 bbae 	b.w	7090 <z_early_memcpy>
    5934:	20000000 	.word	0x20000000
    5938:	200001fc 	.word	0x200001fc
    593c:	00007bd4 	.word	0x00007bd4
    5940:	00000000 	.word	0x00000000
    5944:	00007bd4 	.word	0x00007bd4
    5948:	20000000 	.word	0x20000000

0000594c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    594c:	4b03      	ldr	r3, [pc, #12]	; (595c <elapsed+0x10>)
    594e:	681b      	ldr	r3, [r3, #0]
    5950:	b90b      	cbnz	r3, 5956 <elapsed+0xa>
    5952:	f7fe b911 	b.w	3b78 <sys_clock_elapsed>
}
    5956:	2000      	movs	r0, #0
    5958:	4770      	bx	lr
    595a:	bf00      	nop
    595c:	20000ea4 	.word	0x20000ea4

00005960 <next_timeout>:
	return list->head == list;
    5960:	4b10      	ldr	r3, [pc, #64]	; (59a4 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    5962:	b510      	push	{r4, lr}
    5964:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5966:	429c      	cmp	r4, r3
    5968:	bf08      	it	eq
    596a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    596c:	f7ff ffee 	bl	594c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    5970:	b1a4      	cbz	r4, 599c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5972:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    5976:	1a1b      	subs	r3, r3, r0
    5978:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    597c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5980:	f170 0200 	sbcs.w	r2, r0, #0
    5984:	da0a      	bge.n	599c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    5986:	2800      	cmp	r0, #0
    5988:	bfac      	ite	ge
    598a:	4618      	movge	r0, r3
    598c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    598e:	4b06      	ldr	r3, [pc, #24]	; (59a8 <next_timeout+0x48>)
    5990:	691b      	ldr	r3, [r3, #16]
    5992:	b113      	cbz	r3, 599a <next_timeout+0x3a>
    5994:	4298      	cmp	r0, r3
    5996:	bfa8      	it	ge
    5998:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    599a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    599c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    59a0:	e7f5      	b.n	598e <next_timeout+0x2e>
    59a2:	bf00      	nop
    59a4:	2000012c 	.word	0x2000012c
    59a8:	20000e70 	.word	0x20000e70

000059ac <remove_timeout>:
{
    59ac:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    59ae:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    59b0:	b168      	cbz	r0, 59ce <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    59b2:	4a0a      	ldr	r2, [pc, #40]	; (59dc <remove_timeout+0x30>)
    59b4:	6852      	ldr	r2, [r2, #4]
    59b6:	4290      	cmp	r0, r2
    59b8:	d009      	beq.n	59ce <remove_timeout+0x22>
	if (next(t) != NULL) {
    59ba:	b143      	cbz	r3, 59ce <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    59bc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    59c0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    59c4:	1912      	adds	r2, r2, r4
    59c6:	eb41 0105 	adc.w	r1, r1, r5
    59ca:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    59ce:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    59d0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    59d2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    59d4:	2300      	movs	r3, #0
	node->prev = NULL;
    59d6:	e9c0 3300 	strd	r3, r3, [r0]
}
    59da:	bd30      	pop	{r4, r5, pc}
    59dc:	2000012c 	.word	0x2000012c

000059e0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    59e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    59e4:	bf08      	it	eq
    59e6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    59ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59ec:	4604      	mov	r4, r0
    59ee:	461f      	mov	r7, r3
    59f0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    59f2:	d067      	beq.n	5ac4 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    59f4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    59f6:	f04f 0320 	mov.w	r3, #32
    59fa:	f3ef 8611 	mrs	r6, BASEPRI
    59fe:	f383 8812 	msr	BASEPRI_MAX, r3
    5a02:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5a06:	f06f 0201 	mvn.w	r2, #1
    5a0a:	1b53      	subs	r3, r2, r5
    5a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    5a10:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5a14:	2b00      	cmp	r3, #0
    5a16:	db1b      	blt.n	5a50 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5a18:	4b2b      	ldr	r3, [pc, #172]	; (5ac8 <z_add_timeout+0xe8>)
    5a1a:	e9d3 1300 	ldrd	r1, r3, [r3]
    5a1e:	1a52      	subs	r2, r2, r1
    5a20:	eb6c 0303 	sbc.w	r3, ip, r3
    5a24:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    5a26:	eb63 0307 	sbc.w	r3, r3, r7
    5a2a:	2d01      	cmp	r5, #1
    5a2c:	f173 0200 	sbcs.w	r2, r3, #0
    5a30:	bfbc      	itt	lt
    5a32:	2501      	movlt	r5, #1
    5a34:	2300      	movlt	r3, #0
    5a36:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    5a3a:	4824      	ldr	r0, [pc, #144]	; (5acc <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    5a3c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5a40:	4283      	cmp	r3, r0
    5a42:	d118      	bne.n	5a76 <z_add_timeout+0x96>
	node->prev = tail;
    5a44:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    5a48:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    5a4c:	6044      	str	r4, [r0, #4]
}
    5a4e:	e026      	b.n	5a9e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5a50:	f7ff ff7c 	bl	594c <elapsed>
    5a54:	3501      	adds	r5, #1
    5a56:	f147 0700 	adc.w	r7, r7, #0
    5a5a:	182d      	adds	r5, r5, r0
    5a5c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    5a60:	e9c4 5704 	strd	r5, r7, [r4, #16]
    5a64:	e7e9      	b.n	5a3a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5a66:	1a52      	subs	r2, r2, r1
    5a68:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    5a6c:	459c      	cmp	ip, r3
    5a6e:	e9c4 2504 	strd	r2, r5, [r4, #16]
    5a72:	d0e7      	beq.n	5a44 <z_add_timeout+0x64>
    5a74:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5a76:	2b00      	cmp	r3, #0
    5a78:	d0e4      	beq.n	5a44 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    5a7a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    5a7e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    5a82:	428a      	cmp	r2, r1
    5a84:	eb75 0e07 	sbcs.w	lr, r5, r7
    5a88:	daed      	bge.n	5a66 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    5a8a:	1a8a      	subs	r2, r1, r2
    5a8c:	eb67 0505 	sbc.w	r5, r7, r5
    5a90:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    5a94:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5a96:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5a9a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5a9c:	605c      	str	r4, [r3, #4]
	return list->head == list;
    5a9e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5aa0:	4283      	cmp	r3, r0
    5aa2:	d00b      	beq.n	5abc <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5aa4:	429c      	cmp	r4, r3
    5aa6:	d109      	bne.n	5abc <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5aa8:	f7ff ff5a 	bl	5960 <next_timeout>

			if (next_time == 0 ||
    5aac:	b118      	cbz	r0, 5ab6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    5aae:	4b08      	ldr	r3, [pc, #32]	; (5ad0 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    5ab0:	691b      	ldr	r3, [r3, #16]
    5ab2:	4283      	cmp	r3, r0
    5ab4:	d002      	beq.n	5abc <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    5ab6:	2100      	movs	r1, #0
    5ab8:	f7fe f82c 	bl	3b14 <sys_clock_set_timeout>
	__asm__ volatile(
    5abc:	f386 8811 	msr	BASEPRI, r6
    5ac0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ac6:	bf00      	nop
    5ac8:	20000750 	.word	0x20000750
    5acc:	2000012c 	.word	0x2000012c
    5ad0:	20000e70 	.word	0x20000e70

00005ad4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ad8:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5ada:	f7ff fc99 	bl	5410 <z_time_slice>
	__asm__ volatile(
    5ade:	f04f 0320 	mov.w	r3, #32
    5ae2:	f3ef 8411 	mrs	r4, BASEPRI
    5ae6:	f383 8812 	msr	BASEPRI_MAX, r3
    5aea:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5aee:	4e24      	ldr	r6, [pc, #144]	; (5b80 <sys_clock_announce+0xac>)
	return list->head == list;
    5af0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 5b84 <sys_clock_announce+0xb0>
    5af4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    5af6:	4d24      	ldr	r5, [pc, #144]	; (5b88 <sys_clock_announce+0xb4>)
    5af8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5afc:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5afe:	4540      	cmp	r0, r8
		curr_tick += dt;
    5b00:	e9d5 1e00 	ldrd	r1, lr, [r5]
    5b04:	ea4f 77e2 	mov.w	r7, r2, asr #31
    5b08:	d00b      	beq.n	5b22 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5b0a:	b150      	cbz	r0, 5b22 <sys_clock_announce+0x4e>
    5b0c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    5b10:	429a      	cmp	r2, r3
    5b12:	eb77 090c 	sbcs.w	r9, r7, ip
    5b16:	da16      	bge.n	5b46 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5b18:	1a9b      	subs	r3, r3, r2
    5b1a:	eb6c 0c07 	sbc.w	ip, ip, r7
    5b1e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    5b22:	1852      	adds	r2, r2, r1
    5b24:	eb4e 0707 	adc.w	r7, lr, r7
    5b28:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    5b2c:	2500      	movs	r5, #0
    5b2e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5b30:	f7ff ff16 	bl	5960 <next_timeout>
    5b34:	4629      	mov	r1, r5
    5b36:	f7fd ffed 	bl	3b14 <sys_clock_set_timeout>
	__asm__ volatile(
    5b3a:	f384 8811 	msr	BASEPRI, r4
    5b3e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    5b46:	1859      	adds	r1, r3, r1
    5b48:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    5b4c:	1ad3      	subs	r3, r2, r3
    5b4e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    5b50:	2200      	movs	r2, #0
    5b52:	2300      	movs	r3, #0
    5b54:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    5b58:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    5b5c:	f7ff ff26 	bl	59ac <remove_timeout>
    5b60:	f384 8811 	msr	BASEPRI, r4
    5b64:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5b68:	6883      	ldr	r3, [r0, #8]
    5b6a:	4798      	blx	r3
	__asm__ volatile(
    5b6c:	f04f 0320 	mov.w	r3, #32
    5b70:	f3ef 8411 	mrs	r4, BASEPRI
    5b74:	f383 8812 	msr	BASEPRI_MAX, r3
    5b78:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    5b7c:	e7bc      	b.n	5af8 <sys_clock_announce+0x24>
    5b7e:	bf00      	nop
    5b80:	20000ea4 	.word	0x20000ea4
    5b84:	2000012c 	.word	0x2000012c
    5b88:	20000750 	.word	0x20000750

00005b8c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5b8c:	b510      	push	{r4, lr}
    5b8e:	f04f 0320 	mov.w	r3, #32
    5b92:	f3ef 8411 	mrs	r4, BASEPRI
    5b96:	f383 8812 	msr	BASEPRI_MAX, r3
    5b9a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    5b9e:	f7fd ffeb 	bl	3b78 <sys_clock_elapsed>
    5ba2:	4a05      	ldr	r2, [pc, #20]	; (5bb8 <sys_clock_tick_get+0x2c>)
    5ba4:	e9d2 3100 	ldrd	r3, r1, [r2]
    5ba8:	18c0      	adds	r0, r0, r3
    5baa:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    5bae:	f384 8811 	msr	BASEPRI, r4
    5bb2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5bb6:	bd10      	pop	{r4, pc}
    5bb8:	20000750 	.word	0x20000750

00005bbc <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    5bbc:	b570      	push	{r4, r5, r6, lr}
    5bbe:	4604      	mov	r4, r0
	__asm__ volatile(
    5bc0:	f04f 0320 	mov.w	r3, #32
    5bc4:	f3ef 8511 	mrs	r5, BASEPRI
    5bc8:	f383 8812 	msr	BASEPRI_MAX, r3
    5bcc:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5bd0:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    5bd4:	3301      	adds	r3, #1
    5bd6:	f142 0200 	adc.w	r2, r2, #0
    5bda:	2b02      	cmp	r3, #2
    5bdc:	f172 0300 	sbcs.w	r3, r2, #0
    5be0:	d304      	bcc.n	5bec <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5be2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    5be6:	4917      	ldr	r1, [pc, #92]	; (5c44 <z_timer_expiration_handler+0x88>)
    5be8:	f7ff fefa 	bl	59e0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    5bec:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5bee:	3301      	adds	r3, #1
    5bf0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    5bf2:	6a23      	ldr	r3, [r4, #32]
    5bf4:	b173      	cbz	r3, 5c14 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    5bf6:	f385 8811 	msr	BASEPRI, r5
    5bfa:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    5bfe:	6a23      	ldr	r3, [r4, #32]
    5c00:	4620      	mov	r0, r4
    5c02:	4798      	blx	r3
	__asm__ volatile(
    5c04:	f04f 0320 	mov.w	r3, #32
    5c08:	f3ef 8511 	mrs	r5, BASEPRI
    5c0c:	f383 8812 	msr	BASEPRI_MAX, r3
    5c10:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5c14:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c18:	42a6      	cmp	r6, r4
    5c1a:	d000      	beq.n	5c1e <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    5c1c:	b926      	cbnz	r6, 5c28 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    5c1e:	f385 8811 	msr	BASEPRI, r5
    5c22:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    5c26:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    5c28:	4630      	mov	r0, r6
    5c2a:	f001 faa5 	bl	7178 <z_unpend_thread_no_timeout>
    5c2e:	2300      	movs	r3, #0
    5c30:	67b3      	str	r3, [r6, #120]	; 0x78
    5c32:	f385 8811 	msr	BASEPRI, r5
    5c36:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    5c3a:	4630      	mov	r0, r6
}
    5c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    5c40:	f001 bac6 	b.w	71d0 <z_ready_thread>
    5c44:	00005bbd 	.word	0x00005bbd

00005c48 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    5c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c4c:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5c52:	bf08      	it	eq
    5c54:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    5c58:	4606      	mov	r6, r0
    5c5a:	461c      	mov	r4, r3
    5c5c:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    5c60:	4689      	mov	r9, r1
    5c62:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5c64:	d03e      	beq.n	5ce4 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    5c66:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    5c6a:	bf08      	it	eq
    5c6c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    5c70:	4615      	mov	r5, r2
    5c72:	4607      	mov	r7, r0
    5c74:	d014      	beq.n	5ca0 <z_impl_k_timer_start+0x58>
    5c76:	ea50 0302 	orrs.w	r3, r0, r2
    5c7a:	d011      	beq.n	5ca0 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    5c7c:	f06f 0301 	mvn.w	r3, #1
    5c80:	1a9b      	subs	r3, r3, r2
    5c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5c86:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    5c8a:	2b00      	cmp	r3, #0
    5c8c:	da08      	bge.n	5ca0 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    5c8e:	2a02      	cmp	r2, #2
    5c90:	f170 0300 	sbcs.w	r3, r0, #0
    5c94:	bfbc      	itt	lt
    5c96:	2502      	movlt	r5, #2
    5c98:	2700      	movlt	r7, #0
    5c9a:	3d01      	subs	r5, #1
    5c9c:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    5ca0:	f06f 0301 	mvn.w	r3, #1
    5ca4:	1a5b      	subs	r3, r3, r1
    5ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5caa:	eb63 0304 	sbc.w	r3, r3, r4
    5cae:	2b00      	cmp	r3, #0
    5cb0:	da09      	bge.n	5cc6 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    5cb2:	2901      	cmp	r1, #1
    5cb4:	f174 0300 	sbcs.w	r3, r4, #0
    5cb8:	bfbc      	itt	lt
    5cba:	2101      	movlt	r1, #1
    5cbc:	2400      	movlt	r4, #0
    5cbe:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
    5cc2:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    5cc6:	4630      	mov	r0, r6
    5cc8:	f001 fb0b 	bl	72e2 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    5ccc:	2300      	movs	r3, #0
    5cce:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    5cd0:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5cd4:	464a      	mov	r2, r9
    5cd6:	4643      	mov	r3, r8
    5cd8:	4630      	mov	r0, r6
    5cda:	4903      	ldr	r1, [pc, #12]	; (5ce8 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    5cdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5ce0:	f7ff be7e 	b.w	59e0 <z_add_timeout>
}
    5ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ce8:	00005bbd 	.word	0x00005bbd

00005cec <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5cec:	4a02      	ldr	r2, [pc, #8]	; (5cf8 <boot_banner+0xc>)
    5cee:	4903      	ldr	r1, [pc, #12]	; (5cfc <boot_banner+0x10>)
    5cf0:	4803      	ldr	r0, [pc, #12]	; (5d00 <boot_banner+0x14>)
    5cf2:	f000 ba44 	b.w	617e <printk>
    5cf6:	bf00      	nop
    5cf8:	000079a3 	.word	0x000079a3
    5cfc:	00007b9f 	.word	0x00007b9f
    5d00:	00007bac 	.word	0x00007bac

00005d04 <nrf_cc3xx_platform_init_no_rng>:
    5d04:	b510      	push	{r4, lr}
    5d06:	4c0a      	ldr	r4, [pc, #40]	; (5d30 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5d08:	6823      	ldr	r3, [r4, #0]
    5d0a:	b11b      	cbz	r3, 5d14 <nrf_cc3xx_platform_init_no_rng+0x10>
    5d0c:	2301      	movs	r3, #1
    5d0e:	6023      	str	r3, [r4, #0]
    5d10:	2000      	movs	r0, #0
    5d12:	bd10      	pop	{r4, pc}
    5d14:	f000 f8ce 	bl	5eb4 <CC_LibInitNoRng>
    5d18:	2800      	cmp	r0, #0
    5d1a:	d0f7      	beq.n	5d0c <nrf_cc3xx_platform_init_no_rng+0x8>
    5d1c:	3801      	subs	r0, #1
    5d1e:	2806      	cmp	r0, #6
    5d20:	d803      	bhi.n	5d2a <nrf_cc3xx_platform_init_no_rng+0x26>
    5d22:	4b04      	ldr	r3, [pc, #16]	; (5d34 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5d24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5d28:	bd10      	pop	{r4, pc}
    5d2a:	4803      	ldr	r0, [pc, #12]	; (5d38 <nrf_cc3xx_platform_init_no_rng+0x34>)
    5d2c:	bd10      	pop	{r4, pc}
    5d2e:	bf00      	nop
    5d30:	20000ea8 	.word	0x20000ea8
    5d34:	0000786c 	.word	0x0000786c
    5d38:	ffff8ffe 	.word	0xffff8ffe

00005d3c <nrf_cc3xx_platform_abort>:
    5d3c:	f3bf 8f4f 	dsb	sy
    5d40:	4905      	ldr	r1, [pc, #20]	; (5d58 <nrf_cc3xx_platform_abort+0x1c>)
    5d42:	4b06      	ldr	r3, [pc, #24]	; (5d5c <nrf_cc3xx_platform_abort+0x20>)
    5d44:	68ca      	ldr	r2, [r1, #12]
    5d46:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5d4a:	4313      	orrs	r3, r2
    5d4c:	60cb      	str	r3, [r1, #12]
    5d4e:	f3bf 8f4f 	dsb	sy
    5d52:	bf00      	nop
    5d54:	e7fd      	b.n	5d52 <nrf_cc3xx_platform_abort+0x16>
    5d56:	bf00      	nop
    5d58:	e000ed00 	.word	0xe000ed00
    5d5c:	05fa0004 	.word	0x05fa0004

00005d60 <CC_PalAbort>:
    5d60:	b410      	push	{r4}
    5d62:	4b09      	ldr	r3, [pc, #36]	; (5d88 <CC_PalAbort+0x28>)
    5d64:	4909      	ldr	r1, [pc, #36]	; (5d8c <CC_PalAbort+0x2c>)
    5d66:	4c0a      	ldr	r4, [pc, #40]	; (5d90 <CC_PalAbort+0x30>)
    5d68:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    5d6c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    5d70:	6849      	ldr	r1, [r1, #4]
    5d72:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    5d76:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    5d7a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    5d7e:	2300      	movs	r3, #0
    5d80:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    5d84:	bc10      	pop	{r4}
    5d86:	4708      	bx	r1
    5d88:	5002b000 	.word	0x5002b000
    5d8c:	20000134 	.word	0x20000134
    5d90:	5002a000 	.word	0x5002a000

00005d94 <nrf_cc3xx_platform_set_abort>:
    5d94:	e9d0 1200 	ldrd	r1, r2, [r0]
    5d98:	4b01      	ldr	r3, [pc, #4]	; (5da0 <nrf_cc3xx_platform_set_abort+0xc>)
    5d9a:	e9c3 1200 	strd	r1, r2, [r3]
    5d9e:	4770      	bx	lr
    5da0:	20000134 	.word	0x20000134

00005da4 <mutex_free>:
    5da4:	b510      	push	{r4, lr}
    5da6:	4604      	mov	r4, r0
    5da8:	b130      	cbz	r0, 5db8 <mutex_free+0x14>
    5daa:	6863      	ldr	r3, [r4, #4]
    5dac:	06db      	lsls	r3, r3, #27
    5dae:	d502      	bpl.n	5db6 <mutex_free+0x12>
    5db0:	2300      	movs	r3, #0
    5db2:	6023      	str	r3, [r4, #0]
    5db4:	6063      	str	r3, [r4, #4]
    5db6:	bd10      	pop	{r4, pc}
    5db8:	4b02      	ldr	r3, [pc, #8]	; (5dc4 <mutex_free+0x20>)
    5dba:	4803      	ldr	r0, [pc, #12]	; (5dc8 <mutex_free+0x24>)
    5dbc:	685b      	ldr	r3, [r3, #4]
    5dbe:	4798      	blx	r3
    5dc0:	e7f3      	b.n	5daa <mutex_free+0x6>
    5dc2:	bf00      	nop
    5dc4:	20000134 	.word	0x20000134
    5dc8:	00007888 	.word	0x00007888

00005dcc <mutex_lock>:
    5dcc:	b1b0      	cbz	r0, 5dfc <mutex_lock+0x30>
    5dce:	6843      	ldr	r3, [r0, #4]
    5dd0:	b193      	cbz	r3, 5df8 <mutex_lock+0x2c>
    5dd2:	06db      	lsls	r3, r3, #27
    5dd4:	d50e      	bpl.n	5df4 <mutex_lock+0x28>
    5dd6:	2301      	movs	r3, #1
    5dd8:	e850 2f00 	ldrex	r2, [r0]
    5ddc:	4619      	mov	r1, r3
    5dde:	e840 1c00 	strex	ip, r1, [r0]
    5de2:	f09c 0f00 	teq	ip, #0
    5de6:	d1f7      	bne.n	5dd8 <mutex_lock+0xc>
    5de8:	2a01      	cmp	r2, #1
    5dea:	d0f5      	beq.n	5dd8 <mutex_lock+0xc>
    5dec:	f3bf 8f5f 	dmb	sy
    5df0:	2000      	movs	r0, #0
    5df2:	4770      	bx	lr
    5df4:	4803      	ldr	r0, [pc, #12]	; (5e04 <mutex_lock+0x38>)
    5df6:	4770      	bx	lr
    5df8:	4803      	ldr	r0, [pc, #12]	; (5e08 <mutex_lock+0x3c>)
    5dfa:	4770      	bx	lr
    5dfc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5e00:	4770      	bx	lr
    5e02:	bf00      	nop
    5e04:	ffff8fe9 	.word	0xffff8fe9
    5e08:	ffff8fea 	.word	0xffff8fea

00005e0c <mutex_unlock>:
    5e0c:	b168      	cbz	r0, 5e2a <mutex_unlock+0x1e>
    5e0e:	6843      	ldr	r3, [r0, #4]
    5e10:	b13b      	cbz	r3, 5e22 <mutex_unlock+0x16>
    5e12:	06db      	lsls	r3, r3, #27
    5e14:	d507      	bpl.n	5e26 <mutex_unlock+0x1a>
    5e16:	f3bf 8f5f 	dmb	sy
    5e1a:	2300      	movs	r3, #0
    5e1c:	6003      	str	r3, [r0, #0]
    5e1e:	4618      	mov	r0, r3
    5e20:	4770      	bx	lr
    5e22:	4803      	ldr	r0, [pc, #12]	; (5e30 <mutex_unlock+0x24>)
    5e24:	4770      	bx	lr
    5e26:	4803      	ldr	r0, [pc, #12]	; (5e34 <mutex_unlock+0x28>)
    5e28:	4770      	bx	lr
    5e2a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5e2e:	4770      	bx	lr
    5e30:	ffff8fea 	.word	0xffff8fea
    5e34:	ffff8fe9 	.word	0xffff8fe9

00005e38 <mutex_init>:
    5e38:	b510      	push	{r4, lr}
    5e3a:	4604      	mov	r4, r0
    5e3c:	b120      	cbz	r0, 5e48 <mutex_init+0x10>
    5e3e:	2200      	movs	r2, #0
    5e40:	2311      	movs	r3, #17
    5e42:	6022      	str	r2, [r4, #0]
    5e44:	6063      	str	r3, [r4, #4]
    5e46:	bd10      	pop	{r4, pc}
    5e48:	4801      	ldr	r0, [pc, #4]	; (5e50 <mutex_init+0x18>)
    5e4a:	f7ff ff89 	bl	5d60 <CC_PalAbort>
    5e4e:	e7f6      	b.n	5e3e <mutex_init+0x6>
    5e50:	000078b0 	.word	0x000078b0

00005e54 <nrf_cc3xx_platform_set_mutexes>:
    5e54:	b570      	push	{r4, r5, r6, lr}
    5e56:	e9d0 2300 	ldrd	r2, r3, [r0]
    5e5a:	4c13      	ldr	r4, [pc, #76]	; (5ea8 <nrf_cc3xx_platform_set_mutexes+0x54>)
    5e5c:	4d13      	ldr	r5, [pc, #76]	; (5eac <nrf_cc3xx_platform_set_mutexes+0x58>)
    5e5e:	6063      	str	r3, [r4, #4]
    5e60:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    5e64:	e9c4 3002 	strd	r3, r0, [r4, #8]
    5e68:	6022      	str	r2, [r4, #0]
    5e6a:	4b11      	ldr	r3, [pc, #68]	; (5eb0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    5e6c:	6808      	ldr	r0, [r1, #0]
    5e6e:	6018      	str	r0, [r3, #0]
    5e70:	6848      	ldr	r0, [r1, #4]
    5e72:	6058      	str	r0, [r3, #4]
    5e74:	6888      	ldr	r0, [r1, #8]
    5e76:	6098      	str	r0, [r3, #8]
    5e78:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    5e7c:	60d8      	str	r0, [r3, #12]
    5e7e:	6119      	str	r1, [r3, #16]
    5e80:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    5e84:	06db      	lsls	r3, r3, #27
    5e86:	d50d      	bpl.n	5ea4 <nrf_cc3xx_platform_set_mutexes+0x50>
    5e88:	2300      	movs	r3, #0
    5e8a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    5e8e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    5e92:	f505 708a 	add.w	r0, r5, #276	; 0x114
    5e96:	4790      	blx	r2
    5e98:	6823      	ldr	r3, [r4, #0]
    5e9a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    5e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5ea2:	4718      	bx	r3
    5ea4:	bd70      	pop	{r4, r5, r6, pc}
    5ea6:	bf00      	nop
    5ea8:	20000144 	.word	0x20000144
    5eac:	20000ec0 	.word	0x20000ec0
    5eb0:	20000154 	.word	0x20000154

00005eb4 <CC_LibInitNoRng>:
    5eb4:	b538      	push	{r3, r4, r5, lr}
    5eb6:	f000 f82f 	bl	5f18 <CC_HalInit>
    5eba:	b120      	cbz	r0, 5ec6 <CC_LibInitNoRng+0x12>
    5ebc:	2403      	movs	r4, #3
    5ebe:	f000 f863 	bl	5f88 <CC_PalTerminate>
    5ec2:	4620      	mov	r0, r4
    5ec4:	bd38      	pop	{r3, r4, r5, pc}
    5ec6:	f000 f831 	bl	5f2c <CC_PalInit>
    5eca:	b998      	cbnz	r0, 5ef4 <CC_LibInitNoRng+0x40>
    5ecc:	f000 f8ac 	bl	6028 <CC_PalPowerSaveModeSelect>
    5ed0:	b998      	cbnz	r0, 5efa <CC_LibInitNoRng+0x46>
    5ed2:	4d0f      	ldr	r5, [pc, #60]	; (5f10 <CC_LibInitNoRng+0x5c>)
    5ed4:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    5ed8:	0e1b      	lsrs	r3, r3, #24
    5eda:	2bf0      	cmp	r3, #240	; 0xf0
    5edc:	d108      	bne.n	5ef0 <CC_LibInitNoRng+0x3c>
    5ede:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    5ee2:	4b0c      	ldr	r3, [pc, #48]	; (5f14 <CC_LibInitNoRng+0x60>)
    5ee4:	429a      	cmp	r2, r3
    5ee6:	d00a      	beq.n	5efe <CC_LibInitNoRng+0x4a>
    5ee8:	2407      	movs	r4, #7
    5eea:	f000 f817 	bl	5f1c <CC_HalTerminate>
    5eee:	e7e6      	b.n	5ebe <CC_LibInitNoRng+0xa>
    5ef0:	2406      	movs	r4, #6
    5ef2:	e7fa      	b.n	5eea <CC_LibInitNoRng+0x36>
    5ef4:	2404      	movs	r4, #4
    5ef6:	4620      	mov	r0, r4
    5ef8:	bd38      	pop	{r3, r4, r5, pc}
    5efa:	2400      	movs	r4, #0
    5efc:	e7f5      	b.n	5eea <CC_LibInitNoRng+0x36>
    5efe:	2001      	movs	r0, #1
    5f00:	f000 f892 	bl	6028 <CC_PalPowerSaveModeSelect>
    5f04:	4604      	mov	r4, r0
    5f06:	2800      	cmp	r0, #0
    5f08:	d1f7      	bne.n	5efa <CC_LibInitNoRng+0x46>
    5f0a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    5f0e:	e7d8      	b.n	5ec2 <CC_LibInitNoRng+0xe>
    5f10:	5002b000 	.word	0x5002b000
    5f14:	20e00000 	.word	0x20e00000

00005f18 <CC_HalInit>:
    5f18:	2000      	movs	r0, #0
    5f1a:	4770      	bx	lr

00005f1c <CC_HalTerminate>:
    5f1c:	2000      	movs	r0, #0
    5f1e:	4770      	bx	lr

00005f20 <CC_HalMaskInterrupt>:
    5f20:	4b01      	ldr	r3, [pc, #4]	; (5f28 <CC_HalMaskInterrupt+0x8>)
    5f22:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    5f26:	4770      	bx	lr
    5f28:	5002b000 	.word	0x5002b000

00005f2c <CC_PalInit>:
    5f2c:	b510      	push	{r4, lr}
    5f2e:	4811      	ldr	r0, [pc, #68]	; (5f74 <CC_PalInit+0x48>)
    5f30:	f000 f848 	bl	5fc4 <CC_PalMutexCreate>
    5f34:	b100      	cbz	r0, 5f38 <CC_PalInit+0xc>
    5f36:	bd10      	pop	{r4, pc}
    5f38:	480f      	ldr	r0, [pc, #60]	; (5f78 <CC_PalInit+0x4c>)
    5f3a:	f000 f843 	bl	5fc4 <CC_PalMutexCreate>
    5f3e:	2800      	cmp	r0, #0
    5f40:	d1f9      	bne.n	5f36 <CC_PalInit+0xa>
    5f42:	4c0e      	ldr	r4, [pc, #56]	; (5f7c <CC_PalInit+0x50>)
    5f44:	4620      	mov	r0, r4
    5f46:	f000 f83d 	bl	5fc4 <CC_PalMutexCreate>
    5f4a:	2800      	cmp	r0, #0
    5f4c:	d1f3      	bne.n	5f36 <CC_PalInit+0xa>
    5f4e:	4b0c      	ldr	r3, [pc, #48]	; (5f80 <CC_PalInit+0x54>)
    5f50:	480c      	ldr	r0, [pc, #48]	; (5f84 <CC_PalInit+0x58>)
    5f52:	601c      	str	r4, [r3, #0]
    5f54:	f000 f836 	bl	5fc4 <CC_PalMutexCreate>
    5f58:	4601      	mov	r1, r0
    5f5a:	2800      	cmp	r0, #0
    5f5c:	d1eb      	bne.n	5f36 <CC_PalInit+0xa>
    5f5e:	f000 f82d 	bl	5fbc <CC_PalDmaInit>
    5f62:	4604      	mov	r4, r0
    5f64:	b108      	cbz	r0, 5f6a <CC_PalInit+0x3e>
    5f66:	4620      	mov	r0, r4
    5f68:	bd10      	pop	{r4, pc}
    5f6a:	f000 f83f 	bl	5fec <CC_PalPowerSaveModeInit>
    5f6e:	4620      	mov	r0, r4
    5f70:	e7fa      	b.n	5f68 <CC_PalInit+0x3c>
    5f72:	bf00      	nop
    5f74:	2000018c 	.word	0x2000018c
    5f78:	20000180 	.word	0x20000180
    5f7c:	20000188 	.word	0x20000188
    5f80:	20000190 	.word	0x20000190
    5f84:	20000184 	.word	0x20000184

00005f88 <CC_PalTerminate>:
    5f88:	b508      	push	{r3, lr}
    5f8a:	4808      	ldr	r0, [pc, #32]	; (5fac <CC_PalTerminate+0x24>)
    5f8c:	f000 f824 	bl	5fd8 <CC_PalMutexDestroy>
    5f90:	4807      	ldr	r0, [pc, #28]	; (5fb0 <CC_PalTerminate+0x28>)
    5f92:	f000 f821 	bl	5fd8 <CC_PalMutexDestroy>
    5f96:	4807      	ldr	r0, [pc, #28]	; (5fb4 <CC_PalTerminate+0x2c>)
    5f98:	f000 f81e 	bl	5fd8 <CC_PalMutexDestroy>
    5f9c:	4806      	ldr	r0, [pc, #24]	; (5fb8 <CC_PalTerminate+0x30>)
    5f9e:	f000 f81b 	bl	5fd8 <CC_PalMutexDestroy>
    5fa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5fa6:	f000 b80b 	b.w	5fc0 <CC_PalDmaTerminate>
    5faa:	bf00      	nop
    5fac:	2000018c 	.word	0x2000018c
    5fb0:	20000180 	.word	0x20000180
    5fb4:	20000188 	.word	0x20000188
    5fb8:	20000184 	.word	0x20000184

00005fbc <CC_PalDmaInit>:
    5fbc:	2000      	movs	r0, #0
    5fbe:	4770      	bx	lr

00005fc0 <CC_PalDmaTerminate>:
    5fc0:	4770      	bx	lr
    5fc2:	bf00      	nop

00005fc4 <CC_PalMutexCreate>:
    5fc4:	b508      	push	{r3, lr}
    5fc6:	4b03      	ldr	r3, [pc, #12]	; (5fd4 <CC_PalMutexCreate+0x10>)
    5fc8:	6802      	ldr	r2, [r0, #0]
    5fca:	681b      	ldr	r3, [r3, #0]
    5fcc:	6810      	ldr	r0, [r2, #0]
    5fce:	4798      	blx	r3
    5fd0:	2000      	movs	r0, #0
    5fd2:	bd08      	pop	{r3, pc}
    5fd4:	20000144 	.word	0x20000144

00005fd8 <CC_PalMutexDestroy>:
    5fd8:	b508      	push	{r3, lr}
    5fda:	4b03      	ldr	r3, [pc, #12]	; (5fe8 <CC_PalMutexDestroy+0x10>)
    5fdc:	6802      	ldr	r2, [r0, #0]
    5fde:	685b      	ldr	r3, [r3, #4]
    5fe0:	6810      	ldr	r0, [r2, #0]
    5fe2:	4798      	blx	r3
    5fe4:	2000      	movs	r0, #0
    5fe6:	bd08      	pop	{r3, pc}
    5fe8:	20000144 	.word	0x20000144

00005fec <CC_PalPowerSaveModeInit>:
    5fec:	b570      	push	{r4, r5, r6, lr}
    5fee:	4c09      	ldr	r4, [pc, #36]	; (6014 <CC_PalPowerSaveModeInit+0x28>)
    5ff0:	4d09      	ldr	r5, [pc, #36]	; (6018 <CC_PalPowerSaveModeInit+0x2c>)
    5ff2:	6920      	ldr	r0, [r4, #16]
    5ff4:	68ab      	ldr	r3, [r5, #8]
    5ff6:	4798      	blx	r3
    5ff8:	b118      	cbz	r0, 6002 <CC_PalPowerSaveModeInit+0x16>
    5ffa:	4b08      	ldr	r3, [pc, #32]	; (601c <CC_PalPowerSaveModeInit+0x30>)
    5ffc:	4808      	ldr	r0, [pc, #32]	; (6020 <CC_PalPowerSaveModeInit+0x34>)
    5ffe:	685b      	ldr	r3, [r3, #4]
    6000:	4798      	blx	r3
    6002:	4a08      	ldr	r2, [pc, #32]	; (6024 <CC_PalPowerSaveModeInit+0x38>)
    6004:	68eb      	ldr	r3, [r5, #12]
    6006:	6920      	ldr	r0, [r4, #16]
    6008:	2100      	movs	r1, #0
    600a:	6011      	str	r1, [r2, #0]
    600c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6010:	4718      	bx	r3
    6012:	bf00      	nop
    6014:	20000154 	.word	0x20000154
    6018:	20000144 	.word	0x20000144
    601c:	20000134 	.word	0x20000134
    6020:	000078d4 	.word	0x000078d4
    6024:	20000ebc 	.word	0x20000ebc

00006028 <CC_PalPowerSaveModeSelect>:
    6028:	b570      	push	{r4, r5, r6, lr}
    602a:	4d1b      	ldr	r5, [pc, #108]	; (6098 <CC_PalPowerSaveModeSelect+0x70>)
    602c:	4e1b      	ldr	r6, [pc, #108]	; (609c <CC_PalPowerSaveModeSelect+0x74>)
    602e:	4604      	mov	r4, r0
    6030:	68b2      	ldr	r2, [r6, #8]
    6032:	6928      	ldr	r0, [r5, #16]
    6034:	4790      	blx	r2
    6036:	b9f8      	cbnz	r0, 6078 <CC_PalPowerSaveModeSelect+0x50>
    6038:	b15c      	cbz	r4, 6052 <CC_PalPowerSaveModeSelect+0x2a>
    603a:	4c19      	ldr	r4, [pc, #100]	; (60a0 <CC_PalPowerSaveModeSelect+0x78>)
    603c:	6823      	ldr	r3, [r4, #0]
    603e:	b1b3      	cbz	r3, 606e <CC_PalPowerSaveModeSelect+0x46>
    6040:	2b01      	cmp	r3, #1
    6042:	d01b      	beq.n	607c <CC_PalPowerSaveModeSelect+0x54>
    6044:	3b01      	subs	r3, #1
    6046:	6023      	str	r3, [r4, #0]
    6048:	6928      	ldr	r0, [r5, #16]
    604a:	68f3      	ldr	r3, [r6, #12]
    604c:	4798      	blx	r3
    604e:	2000      	movs	r0, #0
    6050:	bd70      	pop	{r4, r5, r6, pc}
    6052:	4c13      	ldr	r4, [pc, #76]	; (60a0 <CC_PalPowerSaveModeSelect+0x78>)
    6054:	6821      	ldr	r1, [r4, #0]
    6056:	b941      	cbnz	r1, 606a <CC_PalPowerSaveModeSelect+0x42>
    6058:	4b12      	ldr	r3, [pc, #72]	; (60a4 <CC_PalPowerSaveModeSelect+0x7c>)
    605a:	2201      	movs	r2, #1
    605c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    6060:	4a11      	ldr	r2, [pc, #68]	; (60a8 <CC_PalPowerSaveModeSelect+0x80>)
    6062:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6066:	2b00      	cmp	r3, #0
    6068:	d1fb      	bne.n	6062 <CC_PalPowerSaveModeSelect+0x3a>
    606a:	3101      	adds	r1, #1
    606c:	6021      	str	r1, [r4, #0]
    606e:	68f3      	ldr	r3, [r6, #12]
    6070:	6928      	ldr	r0, [r5, #16]
    6072:	4798      	blx	r3
    6074:	2000      	movs	r0, #0
    6076:	bd70      	pop	{r4, r5, r6, pc}
    6078:	480c      	ldr	r0, [pc, #48]	; (60ac <CC_PalPowerSaveModeSelect+0x84>)
    607a:	bd70      	pop	{r4, r5, r6, pc}
    607c:	4a0a      	ldr	r2, [pc, #40]	; (60a8 <CC_PalPowerSaveModeSelect+0x80>)
    607e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6082:	2b00      	cmp	r3, #0
    6084:	d1fb      	bne.n	607e <CC_PalPowerSaveModeSelect+0x56>
    6086:	4a07      	ldr	r2, [pc, #28]	; (60a4 <CC_PalPowerSaveModeSelect+0x7c>)
    6088:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    608c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6090:	f7ff ff46 	bl	5f20 <CC_HalMaskInterrupt>
    6094:	6823      	ldr	r3, [r4, #0]
    6096:	e7d5      	b.n	6044 <CC_PalPowerSaveModeSelect+0x1c>
    6098:	20000154 	.word	0x20000154
    609c:	20000144 	.word	0x20000144
    60a0:	20000ebc 	.word	0x20000ebc
    60a4:	5002a000 	.word	0x5002a000
    60a8:	5002b000 	.word	0x5002b000
    60ac:	ffff8fe9 	.word	0xffff8fe9

000060b0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    60b0:	4770      	bx	lr

000060b2 <gpio_pin_get_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
    60b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    60b4:	4603      	mov	r3, r0
	return gpio_pin_get(spec->port, spec->pin);
    60b6:	6800      	ldr	r0, [r0, #0]
    60b8:	791c      	ldrb	r4, [r3, #4]
	const struct gpio_driver_data *const data =
    60ba:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    60bc:	6883      	ldr	r3, [r0, #8]
    60be:	a901      	add	r1, sp, #4
    60c0:	685b      	ldr	r3, [r3, #4]
    60c2:	4798      	blx	r3
	if (ret == 0) {
    60c4:	b940      	cbnz	r0, 60d8 <gpio_pin_get_dt+0x26>
		*value ^= data->invert;
    60c6:	682b      	ldr	r3, [r5, #0]
    60c8:	9a01      	ldr	r2, [sp, #4]
    60ca:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    60cc:	2301      	movs	r3, #1
    60ce:	40a3      	lsls	r3, r4
    60d0:	421a      	tst	r2, r3
    60d2:	bf14      	ite	ne
    60d4:	2001      	movne	r0, #1
    60d6:	2000      	moveq	r0, #0
}
    60d8:	b003      	add	sp, #12
    60da:	bd30      	pop	{r4, r5, pc}

000060dc <k_uptime_get>:
{
    60dc:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    60de:	f001 f944 	bl	736a <z_impl_k_uptime_ticks>
    60e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    60e6:	fba0 0302 	umull	r0, r3, r0, r2
    60ea:	fb02 3101 	mla	r1, r2, r1, r3
    60ee:	0bc0      	lsrs	r0, r0, #15
}
    60f0:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    60f4:	0bc9      	lsrs	r1, r1, #15
    60f6:	bd08      	pop	{r3, pc}

000060f8 <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    60f8:	2301      	movs	r3, #1
    60fa:	fa03 f101 	lsl.w	r1, r3, r1
    60fe:	6903      	ldr	r3, [r0, #16]
    6100:	681b      	ldr	r3, [r3, #0]
    6102:	4219      	tst	r1, r3
    6104:	d003      	beq.n	610e <gpio_pin_set.isra.0+0x16>
	if (value != 0)	{
    6106:	b122      	cbz	r2, 6112 <gpio_pin_set.isra.0+0x1a>
	return api->port_clear_bits_raw(port, pins);
    6108:	6883      	ldr	r3, [r0, #8]
    610a:	691b      	ldr	r3, [r3, #16]
    610c:	e003      	b.n	6116 <gpio_pin_set.isra.0+0x1e>
	if (value != 0)	{
    610e:	2a00      	cmp	r2, #0
    6110:	d0fa      	beq.n	6108 <gpio_pin_set.isra.0+0x10>
	return api->port_set_bits_raw(port, pins);
    6112:	6883      	ldr	r3, [r0, #8]
    6114:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    6116:	4718      	bx	r3

00006118 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
    6118:	b538      	push	{r3, r4, r5, lr}
    611a:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
    611c:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    6120:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    6124:	f240 30e7 	movw	r0, #999	; 0x3e7
    6128:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    612c:	2300      	movs	r3, #0
    612e:	fbc4 0105 	smlal	r0, r1, r4, r5
    6132:	f7f9 ffe5 	bl	100 <__aeabi_uldivmod>
}
    6136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    613a:	f7ff bb7b 	b.w	5834 <z_impl_k_sleep>

0000613e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    613e:	4603      	mov	r3, r0
    6140:	b158      	cbz	r0, 615a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6142:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6144:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6148:	2a01      	cmp	r2, #1
    614a:	d003      	beq.n	6154 <sys_notify_validate+0x16>
    614c:	2a03      	cmp	r2, #3
    614e:	d104      	bne.n	615a <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6150:	6802      	ldr	r2, [r0, #0]
    6152:	b112      	cbz	r2, 615a <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6154:	2000      	movs	r0, #0
    6156:	6098      	str	r0, [r3, #8]
    6158:	4770      	bx	lr
		return -EINVAL;
    615a:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    615e:	4770      	bx	lr

00006160 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6160:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    6162:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    6164:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    6168:	2a03      	cmp	r2, #3
    616a:	f04f 0200 	mov.w	r2, #0
{
    616e:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6170:	bf0c      	ite	eq
    6172:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    6174:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6176:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6178:	4770      	bx	lr

0000617a <arch_printk_char_out>:
}
    617a:	2000      	movs	r0, #0
    617c:	4770      	bx	lr

0000617e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    617e:	b40f      	push	{r0, r1, r2, r3}
    6180:	b507      	push	{r0, r1, r2, lr}
    6182:	a904      	add	r1, sp, #16
    6184:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6188:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    618a:	f7fa fd51 	bl	c30 <vprintk>

	va_end(ap);
}
    618e:	b003      	add	sp, #12
    6190:	f85d eb04 	ldr.w	lr, [sp], #4
    6194:	b004      	add	sp, #16
    6196:	4770      	bx	lr

00006198 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6198:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    619a:	f013 0307 	ands.w	r3, r3, #7
    619e:	d105      	bne.n	61ac <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    61a0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    61a2:	2b00      	cmp	r3, #0
    61a4:	bf0c      	ite	eq
    61a6:	2000      	moveq	r0, #0
    61a8:	2003      	movne	r0, #3
    61aa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    61ac:	2b02      	cmp	r3, #2
    61ae:	d105      	bne.n	61bc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    61b0:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    61b2:	2b00      	cmp	r3, #0
    61b4:	bf14      	ite	ne
    61b6:	2000      	movne	r0, #0
    61b8:	2004      	moveq	r0, #4
    61ba:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    61bc:	2b01      	cmp	r3, #1
    61be:	d105      	bne.n	61cc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    61c0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    61c2:	2b00      	cmp	r3, #0
    61c4:	bf0c      	ite	eq
    61c6:	2000      	moveq	r0, #0
    61c8:	2005      	movne	r0, #5
    61ca:	4770      	bx	lr
	int evt = EVT_NOP;
    61cc:	2000      	movs	r0, #0
}
    61ce:	4770      	bx	lr

000061d0 <notify_one>:
{
    61d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61d4:	460d      	mov	r5, r1
    61d6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    61d8:	4619      	mov	r1, r3
    61da:	1d28      	adds	r0, r5, #4
{
    61dc:	4690      	mov	r8, r2
    61de:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    61e0:	f7ff ffbe 	bl	6160 <sys_notify_finalize>
	if (cb) {
    61e4:	4604      	mov	r4, r0
    61e6:	b138      	cbz	r0, 61f8 <notify_one+0x28>
		cb(mgr, cli, state, res);
    61e8:	4633      	mov	r3, r6
    61ea:	4642      	mov	r2, r8
    61ec:	4629      	mov	r1, r5
    61ee:	4638      	mov	r0, r7
    61f0:	46a4      	mov	ip, r4
}
    61f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    61f6:	4760      	bx	ip
}
    61f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000061fc <transition_complete>:
{
    61fc:	b410      	push	{r4}
	__asm__ volatile(
    61fe:	f04f 0420 	mov.w	r4, #32
    6202:	f3ef 8211 	mrs	r2, BASEPRI
    6206:	f384 8812 	msr	BASEPRI_MAX, r4
    620a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    620e:	6141      	str	r1, [r0, #20]
}
    6210:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    6212:	2101      	movs	r1, #1
    6214:	f7fa bd1a 	b.w	c4c <process_event>

00006218 <validate_args>:
{
    6218:	b510      	push	{r4, lr}
    621a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    621c:	b140      	cbz	r0, 6230 <validate_args+0x18>
    621e:	b139      	cbz	r1, 6230 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    6220:	1d08      	adds	r0, r1, #4
    6222:	f7ff ff8c 	bl	613e <sys_notify_validate>
	if ((rv == 0)
    6226:	b928      	cbnz	r0, 6234 <validate_args+0x1c>
	    && ((cli->notify.flags
    6228:	68a3      	ldr	r3, [r4, #8]
    622a:	f033 0303 	bics.w	r3, r3, #3
    622e:	d001      	beq.n	6234 <validate_args+0x1c>
		rv = -EINVAL;
    6230:	f06f 0015 	mvn.w	r0, #21
}
    6234:	bd10      	pop	{r4, pc}

00006236 <onoff_manager_init>:
{
    6236:	b538      	push	{r3, r4, r5, lr}
    6238:	460c      	mov	r4, r1
	if ((mgr == NULL)
    623a:	4605      	mov	r5, r0
    623c:	b158      	cbz	r0, 6256 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    623e:	b151      	cbz	r1, 6256 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6240:	680b      	ldr	r3, [r1, #0]
    6242:	b143      	cbz	r3, 6256 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6244:	684b      	ldr	r3, [r1, #4]
    6246:	b133      	cbz	r3, 6256 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6248:	221c      	movs	r2, #28
    624a:	2100      	movs	r1, #0
    624c:	f000 f91f 	bl	648e <memset>
    6250:	612c      	str	r4, [r5, #16]
	return 0;
    6252:	2000      	movs	r0, #0
}
    6254:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6256:	f06f 0015 	mvn.w	r0, #21
    625a:	e7fb      	b.n	6254 <onoff_manager_init+0x1e>

0000625c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    625c:	b570      	push	{r4, r5, r6, lr}
    625e:	4604      	mov	r4, r0
    6260:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6262:	f7ff ffd9 	bl	6218 <validate_args>

	if (rv < 0) {
    6266:	1e05      	subs	r5, r0, #0
    6268:	db31      	blt.n	62ce <onoff_request+0x72>
    626a:	f04f 0320 	mov.w	r3, #32
    626e:	f3ef 8111 	mrs	r1, BASEPRI
    6272:	f383 8812 	msr	BASEPRI_MAX, r3
    6276:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    627a:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    627c:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    627e:	f64f 75ff 	movw	r5, #65535	; 0xffff
    6282:	42ab      	cmp	r3, r5
    6284:	f000 0207 	and.w	r2, r0, #7
    6288:	d02e      	beq.n	62e8 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    628a:	2a02      	cmp	r2, #2
    628c:	d10e      	bne.n	62ac <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    628e:	3301      	adds	r3, #1
    6290:	8363      	strh	r3, [r4, #26]
	rv = state;
    6292:	4615      	mov	r5, r2
		notify = true;
    6294:	2301      	movs	r3, #1
	__asm__ volatile(
    6296:	f381 8811 	msr	BASEPRI, r1
    629a:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    629e:	b1b3      	cbz	r3, 62ce <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    62a0:	2300      	movs	r3, #0
    62a2:	4631      	mov	r1, r6
    62a4:	4620      	mov	r0, r4
    62a6:	f7ff ff93 	bl	61d0 <notify_one>
    62aa:	e010      	b.n	62ce <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    62ac:	0783      	lsls	r3, r0, #30
    62ae:	d001      	beq.n	62b4 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    62b0:	2a06      	cmp	r2, #6
    62b2:	d10e      	bne.n	62d2 <onoff_request+0x76>
	parent->next = child;
    62b4:	2300      	movs	r3, #0
    62b6:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    62b8:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    62ba:	b993      	cbnz	r3, 62e2 <onoff_request+0x86>
	list->head = node;
    62bc:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    62c0:	4615      	mov	r5, r2
    62c2:	b962      	cbnz	r2, 62de <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    62c4:	460a      	mov	r2, r1
    62c6:	4620      	mov	r0, r4
    62c8:	2102      	movs	r1, #2
    62ca:	f7fa fcbf 	bl	c4c <process_event>
		}
	}

	return rv;
}
    62ce:	4628      	mov	r0, r5
    62d0:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    62d2:	2a05      	cmp	r2, #5
    62d4:	bf0c      	ite	eq
    62d6:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    62da:	f06f 0504 	mvnne.w	r5, #4
    62de:	2300      	movs	r3, #0
    62e0:	e7d9      	b.n	6296 <onoff_request+0x3a>
	parent->next = child;
    62e2:	601e      	str	r6, [r3, #0]
	list->tail = node;
    62e4:	6066      	str	r6, [r4, #4]
}
    62e6:	e7eb      	b.n	62c0 <onoff_request+0x64>
		rv = -EAGAIN;
    62e8:	f06f 050a 	mvn.w	r5, #10
    62ec:	e7f7      	b.n	62de <onoff_request+0x82>

000062ee <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    62ee:	4604      	mov	r4, r0
    62f0:	b508      	push	{r3, lr}
    62f2:	4608      	mov	r0, r1
    62f4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    62f6:	461a      	mov	r2, r3
    62f8:	47a0      	blx	r4
	return z_impl_z_current_get();
    62fa:	f7ff fab5 	bl	5868 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    62fe:	f7fc f8fd 	bl	24fc <z_impl_k_thread_abort>

00006302 <_ldiv5>:
	uint32_t v_lo = *v;
    6302:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    6306:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    6308:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    630c:	fba2 2403 	umull	r2, r4, r2, r3
    6310:	18d5      	adds	r5, r2, r3
    6312:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    6316:	fba1 1303 	umull	r1, r3, r1, r3
    631a:	1852      	adds	r2, r2, r1
    631c:	eb44 0403 	adc.w	r4, r4, r3
    6320:	1952      	adds	r2, r2, r5
    6322:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    6326:	1889      	adds	r1, r1, r2
    6328:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    632c:	e9c0 1300 	strd	r1, r3, [r0]
}
    6330:	bd30      	pop	{r4, r5, pc}

00006332 <_get_digit>:
	if (*digit_count > 0) {
    6332:	680a      	ldr	r2, [r1, #0]
    6334:	2a00      	cmp	r2, #0
{
    6336:	b510      	push	{r4, lr}
    6338:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    633a:	dd0f      	ble.n	635c <_get_digit+0x2a>
		--*digit_count;
    633c:	3a01      	subs	r2, #1
    633e:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    6340:	681a      	ldr	r2, [r3, #0]
    6342:	6844      	ldr	r4, [r0, #4]
    6344:	200a      	movs	r0, #10
    6346:	fba2 1200 	umull	r1, r2, r2, r0
    634a:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    634e:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    6350:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    6354:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    6358:	3030      	adds	r0, #48	; 0x30
}
    635a:	bd10      	pop	{r4, pc}
		rval = '0';
    635c:	2030      	movs	r0, #48	; 0x30
    635e:	e7fc      	b.n	635a <_get_digit+0x28>

00006360 <encode_uint>:
{
    6360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6364:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    6366:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    6368:	2b6f      	cmp	r3, #111	; 0x6f
{
    636a:	4680      	mov	r8, r0
    636c:	460f      	mov	r7, r1
    636e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6370:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    6374:	d029      	beq.n	63ca <encode_uint+0x6a>
    6376:	d824      	bhi.n	63c2 <encode_uint+0x62>
		return 16;
    6378:	2b58      	cmp	r3, #88	; 0x58
    637a:	bf14      	ite	ne
    637c:	260a      	movne	r6, #10
    637e:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    6380:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    6384:	4632      	mov	r2, r6
    6386:	2300      	movs	r3, #0
    6388:	4640      	mov	r0, r8
    638a:	4639      	mov	r1, r7
    638c:	f7f9 feb8 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6390:	2a09      	cmp	r2, #9
    6392:	b2d4      	uxtb	r4, r2
    6394:	d81e      	bhi.n	63d4 <encode_uint+0x74>
    6396:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    6398:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    639a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    639c:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    63a0:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    63a4:	d301      	bcc.n	63aa <encode_uint+0x4a>
    63a6:	45d1      	cmp	r9, sl
    63a8:	d811      	bhi.n	63ce <encode_uint+0x6e>
	if (conv->flag_hash) {
    63aa:	782b      	ldrb	r3, [r5, #0]
    63ac:	069b      	lsls	r3, r3, #26
    63ae:	d505      	bpl.n	63bc <encode_uint+0x5c>
		if (radix == 8) {
    63b0:	2e08      	cmp	r6, #8
    63b2:	d115      	bne.n	63e0 <encode_uint+0x80>
			conv->altform_0 = true;
    63b4:	78ab      	ldrb	r3, [r5, #2]
    63b6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    63ba:	70ab      	strb	r3, [r5, #2]
}
    63bc:	4648      	mov	r0, r9
    63be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    63c2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    63c6:	2b70      	cmp	r3, #112	; 0x70
    63c8:	e7d7      	b.n	637a <encode_uint+0x1a>
	switch (specifier) {
    63ca:	2608      	movs	r6, #8
    63cc:	e7d8      	b.n	6380 <encode_uint+0x20>
		value /= radix;
    63ce:	4680      	mov	r8, r0
    63d0:	460f      	mov	r7, r1
    63d2:	e7d7      	b.n	6384 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    63d4:	f1bb 0f19 	cmp.w	fp, #25
    63d8:	bf94      	ite	ls
    63da:	3437      	addls	r4, #55	; 0x37
    63dc:	3457      	addhi	r4, #87	; 0x57
    63de:	e7db      	b.n	6398 <encode_uint+0x38>
		} else if (radix == 16) {
    63e0:	2e10      	cmp	r6, #16
    63e2:	d1eb      	bne.n	63bc <encode_uint+0x5c>
			conv->altform_0c = true;
    63e4:	78ab      	ldrb	r3, [r5, #2]
    63e6:	f043 0310 	orr.w	r3, r3, #16
    63ea:	e7e6      	b.n	63ba <encode_uint+0x5a>

000063ec <outs>:
{
    63ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63f0:	4607      	mov	r7, r0
    63f2:	4688      	mov	r8, r1
    63f4:	4615      	mov	r5, r2
    63f6:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    63f8:	4614      	mov	r4, r2
    63fa:	42b4      	cmp	r4, r6
    63fc:	eba4 0005 	sub.w	r0, r4, r5
    6400:	d302      	bcc.n	6408 <outs+0x1c>
    6402:	b93e      	cbnz	r6, 6414 <outs+0x28>
    6404:	7823      	ldrb	r3, [r4, #0]
    6406:	b12b      	cbz	r3, 6414 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    6408:	f814 0b01 	ldrb.w	r0, [r4], #1
    640c:	4641      	mov	r1, r8
    640e:	47b8      	blx	r7
		if (rc < 0) {
    6410:	2800      	cmp	r0, #0
    6412:	daf2      	bge.n	63fa <outs+0xe>
}
    6414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006418 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    6418:	4770      	bx	lr

0000641a <abort_function>:
{
    641a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    641c:	2000      	movs	r0, #0
    641e:	f7fb fb79 	bl	1b14 <sys_reboot>

00006422 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6422:	f000 be18 	b.w	7056 <z_fatal_error>

00006426 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6426:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    6428:	6800      	ldr	r0, [r0, #0]
    642a:	f000 be14 	b.w	7056 <z_fatal_error>

0000642e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    642e:	2100      	movs	r1, #0
    6430:	2001      	movs	r0, #1
    6432:	f7ff bff6 	b.w	6422 <z_arm_fatal_error>

00006436 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6436:	b508      	push	{r3, lr}
	handler();
    6438:	f7fb fdfc 	bl	2034 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    643c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6440:	f7fb bed4 	b.w	21ec <z_arm_exc_exit>

00006444 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6444:	3901      	subs	r1, #1
    6446:	4603      	mov	r3, r0
    6448:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    644c:	b90a      	cbnz	r2, 6452 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    644e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6450:	4770      	bx	lr
		*d = *s;
    6452:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6456:	e7f7      	b.n	6448 <strcpy+0x4>

00006458 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6458:	4603      	mov	r3, r0
	size_t n = 0;
    645a:	2000      	movs	r0, #0

	while (*s != '\0') {
    645c:	5c1a      	ldrb	r2, [r3, r0]
    645e:	b902      	cbnz	r2, 6462 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6460:	4770      	bx	lr
		n++;
    6462:	3001      	adds	r0, #1
    6464:	e7fa      	b.n	645c <strlen+0x4>

00006466 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6466:	4603      	mov	r3, r0
	size_t n = 0;
    6468:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    646a:	5c1a      	ldrb	r2, [r3, r0]
    646c:	b10a      	cbz	r2, 6472 <strnlen+0xc>
    646e:	4288      	cmp	r0, r1
    6470:	d100      	bne.n	6474 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    6472:	4770      	bx	lr
		n++;
    6474:	3001      	adds	r0, #1
    6476:	e7f8      	b.n	646a <strnlen+0x4>

00006478 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    6478:	b510      	push	{r4, lr}
    647a:	1e43      	subs	r3, r0, #1
    647c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    647e:	4291      	cmp	r1, r2
    6480:	d100      	bne.n	6484 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6482:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6484:	f811 4b01 	ldrb.w	r4, [r1], #1
    6488:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    648c:	e7f7      	b.n	647e <memcpy+0x6>

0000648e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    648e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    6490:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    6492:	4603      	mov	r3, r0
	while (n > 0) {
    6494:	4293      	cmp	r3, r2
    6496:	d100      	bne.n	649a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6498:	4770      	bx	lr
		*(d_byte++) = c_byte;
    649a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    649e:	e7f9      	b.n	6494 <memset+0x6>

000064a0 <_stdout_hook_default>:
}
    64a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    64a4:	4770      	bx	lr

000064a6 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    64a6:	2806      	cmp	r0, #6
    64a8:	d108      	bne.n	64bc <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    64aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    64ae:	2201      	movs	r2, #1
    64b0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    64b4:	f3bf 8f4f 	dsb	sy
        __WFE();
    64b8:	bf20      	wfe
    while (true)
    64ba:	e7fd      	b.n	64b8 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    64bc:	4770      	bx	lr

000064be <pm_state_exit_post_ops>:
    64be:	2300      	movs	r3, #0
    64c0:	f383 8811 	msr	BASEPRI, r3
    64c4:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    64c8:	4770      	bx	lr

000064ca <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    64ca:	6903      	ldr	r3, [r0, #16]
    64cc:	b2c9      	uxtb	r1, r1
    64ce:	220c      	movs	r2, #12
    64d0:	fb01 3302 	mla	r3, r1, r2, r3
    64d4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    64d6:	f000 0007 	and.w	r0, r0, #7
    64da:	4770      	bx	lr

000064dc <set_on_state>:
	__asm__ volatile(
    64dc:	f04f 0320 	mov.w	r3, #32
    64e0:	f3ef 8211 	mrs	r2, BASEPRI
    64e4:	f383 8812 	msr	BASEPRI_MAX, r3
    64e8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    64ec:	6803      	ldr	r3, [r0, #0]
    64ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    64f2:	f043 0302 	orr.w	r3, r3, #2
    64f6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    64f8:	f382 8811 	msr	BASEPRI, r2
    64fc:	f3bf 8f6f 	isb	sy
}
    6500:	4770      	bx	lr

00006502 <stop>:
{
    6502:	4603      	mov	r3, r0
    6504:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    6506:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    6508:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    650a:	f04f 0420 	mov.w	r4, #32
    650e:	f3ef 8611 	mrs	r6, BASEPRI
    6512:	f384 8812 	msr	BASEPRI_MAX, r4
    6516:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    651a:	250c      	movs	r5, #12
    651c:	fb05 0401 	mla	r4, r5, r1, r0
    6520:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6522:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    6526:	d001      	beq.n	652c <stop+0x2a>
    6528:	42a2      	cmp	r2, r4
    652a:	d110      	bne.n	654e <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    652c:	fb05 0001 	mla	r0, r5, r1, r0
    6530:	2201      	movs	r2, #1
    6532:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    6534:	2000      	movs	r0, #0
	__asm__ volatile(
    6536:	f386 8811 	msr	BASEPRI, r6
    653a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    653e:	b928      	cbnz	r0, 654c <stop+0x4a>
	get_sub_config(dev, type)->stop();
    6540:	685b      	ldr	r3, [r3, #4]
    6542:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    6546:	684b      	ldr	r3, [r1, #4]
    6548:	4798      	blx	r3
	return 0;
    654a:	2000      	movs	r0, #0
}
    654c:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    654e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6552:	e7f0      	b.n	6536 <stop+0x34>

00006554 <api_stop>:
	return stop(dev, subsys, CTX_API);
    6554:	2280      	movs	r2, #128	; 0x80
    6556:	f7ff bfd4 	b.w	6502 <stop>

0000655a <async_start>:
{
    655a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    655c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    655e:	6904      	ldr	r4, [r0, #16]
{
    6560:	4605      	mov	r5, r0
    6562:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6564:	f04f 0020 	mov.w	r0, #32
    6568:	f3ef 8c11 	mrs	ip, BASEPRI
    656c:	f380 8812 	msr	BASEPRI_MAX, r0
    6570:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6574:	260c      	movs	r6, #12
    6576:	fb06 4601 	mla	r6, r6, r1, r4
    657a:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    657c:	f000 0e07 	and.w	lr, r0, #7
    6580:	f1be 0f01 	cmp.w	lr, #1
    6584:	d111      	bne.n	65aa <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6586:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    6588:	2600      	movs	r6, #0
	__asm__ volatile(
    658a:	f38c 8811 	msr	BASEPRI, ip
    658e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6592:	b946      	cbnz	r6, 65a6 <async_start+0x4c>
	subdata->cb = cb;
    6594:	200c      	movs	r0, #12
    6596:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    659a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    659e:	686b      	ldr	r3, [r5, #4]
    65a0:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    65a4:	4798      	blx	r3
}
    65a6:	4630      	mov	r0, r6
    65a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    65aa:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    65ae:	4287      	cmp	r7, r0
    65b0:	bf14      	ite	ne
    65b2:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    65b6:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    65ba:	e7e6      	b.n	658a <async_start+0x30>

000065bc <api_start>:
{
    65bc:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    65be:	2480      	movs	r4, #128	; 0x80
    65c0:	9400      	str	r4, [sp, #0]
    65c2:	f7ff ffca 	bl	655a <async_start>
}
    65c6:	b002      	add	sp, #8
    65c8:	bd10      	pop	{r4, pc}

000065ca <onoff_started_callback>:
	return &data->mgr[type];
    65ca:	6900      	ldr	r0, [r0, #16]
{
    65cc:	b410      	push	{r4}
	return &data->mgr[type];
    65ce:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    65d0:	241c      	movs	r4, #28
    65d2:	fb03 0004 	mla	r0, r3, r4, r0
    65d6:	2100      	movs	r1, #0
}
    65d8:	bc10      	pop	{r4}
	notify(mgr, 0);
    65da:	4710      	bx	r2

000065dc <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    65dc:	2000      	movs	r0, #0
    65de:	f000 bbdd 	b.w	6d9c <nrfx_clock_start>

000065e2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    65e2:	2000      	movs	r0, #0
    65e4:	f000 bc17 	b.w	6e16 <nrfx_clock_stop>

000065e8 <blocking_start_callback>:
{
    65e8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    65ea:	f7fe be03 	b.w	51f4 <z_impl_k_sem_give>

000065ee <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    65ee:	6843      	ldr	r3, [r0, #4]
    65f0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    65f2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    65f6:	600b      	str	r3, [r1, #0]
}
    65f8:	2000      	movs	r0, #0
    65fa:	4770      	bx	lr

000065fc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    65fc:	6843      	ldr	r3, [r0, #4]
    65fe:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6600:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6604:	4042      	eors	r2, r0
    6606:	400a      	ands	r2, r1
    6608:	4042      	eors	r2, r0
    p_reg->OUT = value;
    660a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    660e:	2000      	movs	r0, #0
    6610:	4770      	bx	lr

00006612 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6612:	6843      	ldr	r3, [r0, #4]
    6614:	685b      	ldr	r3, [r3, #4]
}
    6616:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6618:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    661c:	4770      	bx	lr

0000661e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    661e:	6843      	ldr	r3, [r0, #4]
    6620:	685b      	ldr	r3, [r3, #4]
}
    6622:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6624:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    6628:	4770      	bx	lr

0000662a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    662a:	6843      	ldr	r3, [r0, #4]
    662c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    662e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    6632:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6634:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    6638:	2000      	movs	r0, #0
    663a:	4770      	bx	lr

0000663c <gpio_nrfx_manage_callback>:
	return port->data;
    663c:	6903      	ldr	r3, [r0, #16]
	return list->head;
    663e:	6858      	ldr	r0, [r3, #4]
{
    6640:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    6642:	b158      	cbz	r0, 665c <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6644:	2400      	movs	r4, #0
    6646:	4281      	cmp	r1, r0
    6648:	d112      	bne.n	6670 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    664a:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    664c:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    664e:	b954      	cbnz	r4, 6666 <gpio_nrfx_manage_callback+0x2a>
    6650:	428d      	cmp	r5, r1
	list->head = node;
    6652:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6654:	d100      	bne.n	6658 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    6656:	6098      	str	r0, [r3, #8]
	parent->next = child;
    6658:	2000      	movs	r0, #0
    665a:	6008      	str	r0, [r1, #0]
	if (set) {
    665c:	b96a      	cbnz	r2, 667a <gpio_nrfx_manage_callback+0x3e>
	return 0;
    665e:	2000      	movs	r0, #0
}
    6660:	bd30      	pop	{r4, r5, pc}
    6662:	4628      	mov	r0, r5
    6664:	e7ef      	b.n	6646 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    6666:	428d      	cmp	r5, r1
	parent->next = child;
    6668:	6020      	str	r0, [r4, #0]
	list->tail = node;
    666a:	bf08      	it	eq
    666c:	609c      	streq	r4, [r3, #8]
}
    666e:	e7f3      	b.n	6658 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    6670:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6672:	4604      	mov	r4, r0
    6674:	2d00      	cmp	r5, #0
    6676:	d1f4      	bne.n	6662 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    6678:	b13a      	cbz	r2, 668a <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    667a:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    667c:	685a      	ldr	r2, [r3, #4]
    667e:	600a      	str	r2, [r1, #0]
	list->head = node;
    6680:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6682:	2800      	cmp	r0, #0
    6684:	d1eb      	bne.n	665e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    6686:	6099      	str	r1, [r3, #8]
}
    6688:	e7ea      	b.n	6660 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    668a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    668e:	e7e7      	b.n	6660 <gpio_nrfx_manage_callback+0x24>

00006690 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    6690:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twi_config *config = dev->config;
    6692:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    6694:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
    6696:	d405      	bmi.n	66a4 <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    6698:	f3c1 0242 	ubfx	r2, r1, #1, #3
    669c:	2a01      	cmp	r2, #1
    669e:	d004      	beq.n	66aa <i2c_nrfx_twi_configure+0x1a>
    66a0:	2a02      	cmp	r2, #2
    66a2:	d00a      	beq.n	66ba <i2c_nrfx_twi_configure+0x2a>
		return -EINVAL;
    66a4:	f06f 0015 	mvn.w	r0, #21
}
    66a8:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    66aa:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    66ac:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    66b0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
    66b4:	6241      	str	r1, [r0, #36]	; 0x24
	return 0;
    66b6:	2000      	movs	r0, #0
    66b8:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    66ba:	681b      	ldr	r3, [r3, #0]
    66bc:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    66c0:	e7f6      	b.n	66b0 <i2c_nrfx_twi_configure+0x20>

000066c2 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    66c2:	6902      	ldr	r2, [r0, #16]
{
    66c4:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    66c6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    66ca:	e883 0003 	stmia.w	r3, {r0, r1}
}
    66ce:	2000      	movs	r0, #0
    66d0:	4770      	bx	lr

000066d2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    66d2:	6843      	ldr	r3, [r0, #4]
    66d4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    66d6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    66da:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    66de:	4770      	bx	lr

000066e0 <tx_start>:
{
    66e0:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    66e2:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    66e4:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    66e6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    66ea:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    66ee:	2200      	movs	r2, #0
    66f0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    66f4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    66f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    66fc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6700:	6862      	ldr	r2, [r4, #4]
    6702:	06d2      	lsls	r2, r2, #27
    6704:	d50f      	bpl.n	6726 <tx_start+0x46>
	if (data->async) {
    6706:	6902      	ldr	r2, [r0, #16]
    6708:	68d2      	ldr	r2, [r2, #12]
    670a:	b12a      	cbz	r2, 6718 <tx_start+0x38>
		data->async->low_power_mask |= mask;
    670c:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
    6710:	f041 0101 	orr.w	r1, r1, #1
    6714:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6718:	2208      	movs	r2, #8
    671a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    671e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6722:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6726:	2201      	movs	r2, #1
    6728:	609a      	str	r2, [r3, #8]
}
    672a:	bd10      	pop	{r4, pc}

0000672c <user_callback>:
	if (data->async->user_callback) {
    672c:	6903      	ldr	r3, [r0, #16]
    672e:	68da      	ldr	r2, [r3, #12]
    6730:	6813      	ldr	r3, [r2, #0]
    6732:	b10b      	cbz	r3, 6738 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
    6734:	6852      	ldr	r2, [r2, #4]
    6736:	4718      	bx	r3
}
    6738:	4770      	bx	lr

0000673a <notify_uart_rx_rdy>:
{
    673a:	b570      	push	{r4, r5, r6, lr}
    673c:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
    673e:	6906      	ldr	r6, [r0, #16]
{
    6740:	4604      	mov	r4, r0
    6742:	460d      	mov	r5, r1
	struct uart_event evt = {
    6744:	2214      	movs	r2, #20
    6746:	2100      	movs	r1, #0
    6748:	a801      	add	r0, sp, #4
    674a:	f7ff fea0 	bl	648e <memset>
    674e:	2302      	movs	r3, #2
    6750:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    6754:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    6756:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    6758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    675a:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
    675c:	a901      	add	r1, sp, #4
    675e:	4620      	mov	r0, r4
	struct uart_event evt = {
    6760:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
    6764:	f7ff ffe2 	bl	672c <user_callback>
}
    6768:	b006      	add	sp, #24
    676a:	bd70      	pop	{r4, r5, r6, pc}

0000676c <rx_buf_release>:
{
    676c:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
    676e:	680e      	ldr	r6, [r1, #0]
{
    6770:	b086      	sub	sp, #24
    6772:	4605      	mov	r5, r0
    6774:	460c      	mov	r4, r1
	if (*buf) {
    6776:	b17e      	cbz	r6, 6798 <rx_buf_release+0x2c>
		struct uart_event evt = {
    6778:	2214      	movs	r2, #20
    677a:	2100      	movs	r1, #0
    677c:	a801      	add	r0, sp, #4
    677e:	f7ff fe86 	bl	648e <memset>
    6782:	2304      	movs	r3, #4
		user_callback(dev, &evt);
    6784:	eb0d 0103 	add.w	r1, sp, r3
    6788:	4628      	mov	r0, r5
		struct uart_event evt = {
    678a:	f88d 3004 	strb.w	r3, [sp, #4]
    678e:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
    6790:	f7ff ffcc 	bl	672c <user_callback>
		*buf = NULL;
    6794:	2300      	movs	r3, #0
    6796:	6023      	str	r3, [r4, #0]
}
    6798:	b006      	add	sp, #24
    679a:	bd70      	pop	{r4, r5, r6, pc}

0000679c <notify_rx_disable>:
{
    679c:	b510      	push	{r4, lr}
    679e:	b086      	sub	sp, #24
    67a0:	4604      	mov	r4, r0
	struct uart_event evt = {
    67a2:	2214      	movs	r2, #20
    67a4:	2100      	movs	r1, #0
    67a6:	a801      	add	r0, sp, #4
    67a8:	f7ff fe71 	bl	648e <memset>
    67ac:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
    67ae:	a901      	add	r1, sp, #4
    67b0:	4620      	mov	r0, r4
	struct uart_event evt = {
    67b2:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    67b6:	f7ff ffb9 	bl	672c <user_callback>
}
    67ba:	b006      	add	sp, #24
    67bc:	bd10      	pop	{r4, pc}

000067be <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
    67be:	6843      	ldr	r3, [r0, #4]
{
    67c0:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
    67c2:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    67c4:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    67c6:	f04f 0020 	mov.w	r0, #32
    67ca:	f3ef 8511 	mrs	r5, BASEPRI
    67ce:	f380 8812 	msr	BASEPRI_MAX, r0
    67d2:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    67d6:	68e4      	ldr	r4, [r4, #12]
    67d8:	6e20      	ldr	r0, [r4, #96]	; 0x60
    67da:	b190      	cbz	r0, 6802 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
    67dc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    67de:	b998      	cbnz	r0, 6808 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
    67e0:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    67e4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    67e8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    67ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    67f0:	f042 0220 	orr.w	r2, r2, #32
    67f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
    67f8:	f385 8811 	msr	BASEPRI, r5
    67fc:	f3bf 8f6f 	isb	sy
}
    6800:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
    6802:	f06f 000c 	mvn.w	r0, #12
    6806:	e7f7      	b.n	67f8 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
    6808:	f06f 000f 	mvn.w	r0, #15
    680c:	e7f4      	b.n	67f8 <uarte_nrfx_rx_buf_rsp+0x3a>

0000680e <uarte_nrfx_callback_set>:
	if (!data->async) {
    680e:	6903      	ldr	r3, [r0, #16]
    6810:	68db      	ldr	r3, [r3, #12]
    6812:	b11b      	cbz	r3, 681c <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
    6814:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
    6818:	2000      	movs	r0, #0
    681a:	4770      	bx	lr
		return -ENOTSUP;
    681c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    6820:	4770      	bx	lr

00006822 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    6822:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    6824:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
    6826:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
    6828:	681b      	ldr	r3, [r3, #0]
{
    682a:	b510      	push	{r4, lr}
	if (data->async) {
    682c:	b958      	cbnz	r0, 6846 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    682e:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6832:	b15c      	cbz	r4, 684c <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    6834:	7d52      	ldrb	r2, [r2, #21]
    6836:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6838:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    683c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6840:	2201      	movs	r2, #1
    6842:	601a      	str	r2, [r3, #0]
}
    6844:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    6846:	f06f 0085 	mvn.w	r0, #133	; 0x85
    684a:	e7fb      	b.n	6844 <uarte_nrfx_poll_in+0x22>
		return -1;
    684c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6850:	e7f8      	b.n	6844 <uarte_nrfx_poll_in+0x22>

00006852 <uarte_nrfx_rx_disable>:
{
    6852:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    6854:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    6856:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
    6858:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
    685a:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    685c:	6e03      	ldr	r3, [r0, #96]	; 0x60
    685e:	b1b3      	cbz	r3, 688e <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
    6860:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6862:	b153      	cbz	r3, 687a <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    6864:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    6868:	f023 0320 	bic.w	r3, r3, #32
    686c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6870:	2300      	movs	r3, #0
    6872:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    6876:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	z_impl_k_timer_stop(timer);
    687a:	3088      	adds	r0, #136	; 0x88
    687c:	f000 fd87 	bl	738e <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    6880:	68eb      	ldr	r3, [r5, #12]
    6882:	2000      	movs	r0, #0
    6884:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6888:	2301      	movs	r3, #1
    688a:	6063      	str	r3, [r4, #4]
}
    688c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    688e:	f06f 000d 	mvn.w	r0, #13
    6892:	e7fb      	b.n	688c <uarte_nrfx_rx_disable+0x3a>

00006894 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    6894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
    6896:	6807      	ldr	r7, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    6898:	4615      	mov	r5, r2
    return p_reg->RXD.AMOUNT;
    689a:	f8d7 653c 	ldr.w	r6, [r7, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    689e:	460c      	mov	r4, r1
    68a0:	bb31      	cbnz	r1, 68f0 <rx_flush.isra.0+0x5c>
    68a2:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
    68a4:	466b      	mov	r3, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    68a6:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    68aa:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
    68ac:	f8c7 5538 	str.w	r5, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68b0:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    68b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    68b6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68ba:	62f9      	str	r1, [r7, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    68bc:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    68c0:	2900      	cmp	r1, #0
    68c2:	d0fb      	beq.n	68bc <rx_flush.isra.0+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    68c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    68c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
    68cc:	f8d7 053c 	ldr.w	r0, [r7, #1340]	; 0x53c
	if (!buf) {
    68d0:	b914      	cbnz	r4, 68d8 <rx_flush.isra.0+0x44>
			return rx_amount;
    68d2:	b2c0      	uxtb	r0, r0
}
    68d4:	b003      	add	sp, #12
    68d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rx_amount != prev_rx_amount) {
    68d8:	4286      	cmp	r6, r0
    68da:	d1fa      	bne.n	68d2 <rx_flush.isra.0+0x3e>
    68dc:	1962      	adds	r2, r4, r5
	for (int i = 0; i < flush_len; i++) {
    68de:	42a2      	cmp	r2, r4
    68e0:	d101      	bne.n	68e6 <rx_flush.isra.0+0x52>
	return 0;
    68e2:	2000      	movs	r0, #0
    68e4:	e7f6      	b.n	68d4 <rx_flush.isra.0+0x40>
		if (buf[i] != dirty) {
    68e6:	f814 3b01 	ldrb.w	r3, [r4], #1
    68ea:	2b00      	cmp	r3, #0
    68ec:	d0f7      	beq.n	68de <rx_flush.isra.0+0x4a>
    68ee:	e7f0      	b.n	68d2 <rx_flush.isra.0+0x3e>
		memset(buf, dirty, len);
    68f0:	2100      	movs	r1, #0
    68f2:	4620      	mov	r0, r4
    68f4:	f7ff fdcb 	bl	648e <memset>
		flush_len = len;
    68f8:	4623      	mov	r3, r4
    68fa:	e7d4      	b.n	68a6 <rx_flush.isra.0+0x12>

000068fc <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    68fc:	68c2      	ldr	r2, [r0, #12]
    68fe:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
    6900:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
    6902:	b508      	push	{r3, lr}
    6904:	4603      	mov	r3, r0
	if (!remaining) {
    6906:	d00b      	beq.n	6920 <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    6908:	2a08      	cmp	r2, #8
    690a:	bf28      	it	cs
    690c:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    690e:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
    6910:	3018      	adds	r0, #24
    6912:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    6914:	689b      	ldr	r3, [r3, #8]
    6916:	4419      	add	r1, r3
    6918:	f7ff fdae 	bl	6478 <memcpy>
	return true;
    691c:	2001      	movs	r0, #1
}
    691e:	bd08      	pop	{r3, pc}
		return false;
    6920:	4610      	mov	r0, r2
    6922:	e7fc      	b.n	691e <setup_tx_cache.isra.0+0x22>

00006924 <async_uart_release>:
{
    6924:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    6926:	6903      	ldr	r3, [r0, #16]
{
    6928:	4604      	mov	r4, r0
	__asm__ volatile(
    692a:	f04f 0220 	mov.w	r2, #32
    692e:	f3ef 8611 	mrs	r6, BASEPRI
    6932:	f382 8812 	msr	BASEPRI_MAX, r2
    6936:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    693a:	68dd      	ldr	r5, [r3, #12]
    693c:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    6940:	ea23 0301 	bic.w	r3, r3, r1
    6944:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    6948:	b973      	cbnz	r3, 6968 <async_uart_release+0x44>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    694a:	2902      	cmp	r1, #2
    694c:	d107      	bne.n	695e <async_uart_release+0x3a>
				rx_flush(dev, data->async->rx_flush_buffer,
    694e:	6840      	ldr	r0, [r0, #4]
    6950:	2205      	movs	r2, #5
    6952:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    6956:	f7ff ff9d 	bl	6894 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
    695a:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	return config->uarte_regs;
    695e:	6863      	ldr	r3, [r4, #4]
    6960:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6962:	2200      	movs	r2, #0
    6964:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    6968:	f386 8811 	msr	BASEPRI, r6
    696c:	f3bf 8f6f 	isb	sy
}
    6970:	bd70      	pop	{r4, r5, r6, pc}

00006972 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    6972:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    6974:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6976:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    697a:	b940      	cbnz	r0, 698e <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    697c:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    697e:	079b      	lsls	r3, r3, #30
    6980:	d406      	bmi.n	6990 <is_tx_ready.isra.0+0x1e>
    6982:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    6986:	3800      	subs	r0, #0
    6988:	bf18      	it	ne
    698a:	2001      	movne	r0, #1
    698c:	4770      	bx	lr
    698e:	2001      	movs	r0, #1
}
    6990:	4770      	bx	lr

00006992 <start_tx_locked>:
{
    6992:	b510      	push	{r4, lr}
    6994:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
    6996:	6840      	ldr	r0, [r0, #4]
    6998:	f7ff ffeb 	bl	6972 <is_tx_ready.isra.0>
		data->async->pending_tx = true;
    699c:	68cb      	ldr	r3, [r1, #12]
	if (!is_tx_ready(dev)) {
    699e:	b918      	cbnz	r0, 69a8 <start_tx_locked+0x16>
		data->async->pending_tx = true;
    69a0:	2201      	movs	r2, #1
    69a2:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    69a6:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
    69a8:	2200      	movs	r2, #0
    69aa:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    69ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    69b2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    69b6:	4620      	mov	r0, r4
    69b8:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
    69bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    69c0:	f7ff be8e 	b.w	66e0 <tx_start>

000069c4 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    69c4:	b510      	push	{r4, lr}
    69c6:	2200      	movs	r2, #0
    69c8:	4604      	mov	r4, r0
    69ca:	2101      	movs	r1, #1
    69cc:	2028      	movs	r0, #40	; 0x28
    69ce:	f7fb fb19 	bl	2004 <z_arm_irq_priority_set>
    69d2:	2028      	movs	r0, #40	; 0x28
    69d4:	f7fb faf8 	bl	1fc8 <arch_irq_enable>
    69d8:	4620      	mov	r0, r4
    69da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    69de:	f7fc bbc7 	b.w	3170 <uarte_instance_init.constprop.0>

000069e2 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    69e2:	b510      	push	{r4, lr}
    69e4:	2200      	movs	r2, #0
    69e6:	4604      	mov	r4, r0
    69e8:	2101      	movs	r1, #1
    69ea:	2002      	movs	r0, #2
    69ec:	f7fb fb0a 	bl	2004 <z_arm_irq_priority_set>
    69f0:	2002      	movs	r0, #2
    69f2:	f7fb fae9 	bl	1fc8 <arch_irq_enable>
    69f6:	4620      	mov	r0, r4
    69f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    69fc:	f7fc bbb8 	b.w	3170 <uarte_instance_init.constprop.0>

00006a00 <uarte_nrfx_rx_enable>:
{
    6a00:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
    6a04:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    6a08:	f8d0 b010 	ldr.w	fp, [r0, #16]
	return config->uarte_regs;
    6a0c:	f8da 8000 	ldr.w	r8, [sl]
{
    6a10:	4614      	mov	r4, r2
	if (cfg->disable_rx) {
    6a12:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
    6a16:	4606      	mov	r6, r0
    6a18:	4689      	mov	r9, r1
	if (cfg->disable_rx) {
    6a1a:	2a00      	cmp	r2, #0
    6a1c:	d172      	bne.n	6b04 <uarte_nrfx_rx_enable+0x104>
	if (data->async->rx_enabled) {
    6a1e:	f8db 100c 	ldr.w	r1, [fp, #12]
    6a22:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
    6a26:	2a00      	cmp	r2, #0
    6a28:	d16f      	bne.n	6b0a <uarte_nrfx_rx_enable+0x10a>
		MAX(timeout / RX_TIMEOUT_DIV,
    6a2a:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
    6a2e:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    6a30:	bfd2      	itee	le
    6a32:	235c      	movle	r3, #92	; 0x5c
    6a34:	2205      	movgt	r2, #5
    6a36:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
    6a3a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
    6a3e:	2300      	movs	r3, #0
	data->async->rx_next_buf = NULL;
    6a40:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
    6a44:	670b      	str	r3, [r1, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6a46:	f8da 3004 	ldr.w	r3, [sl, #4]
    6a4a:	06da      	lsls	r2, r3, #27
	data->async->rx_buf_len = len;
    6a4c:	e9c1 9418 	strd	r9, r4, [r1, #96]	; 0x60
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6a50:	d524      	bpl.n	6a9c <uarte_nrfx_rx_enable+0x9c>
		if (data->async->rx_flush_cnt) {
    6a52:	f891 70d1 	ldrb.w	r7, [r1, #209]	; 0xd1
    6a56:	b30f      	cbz	r7, 6a9c <uarte_nrfx_rx_enable+0x9c>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    6a58:	42a7      	cmp	r7, r4
    6a5a:	bf28      	it	cs
    6a5c:	4627      	movcs	r7, r4
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
    6a5e:	4648      	mov	r0, r9
    6a60:	463a      	mov	r2, r7
    6a62:	31cc      	adds	r1, #204	; 0xcc
    6a64:	f7ff fd08 	bl	6478 <memcpy>
			if (!len) {
    6a68:	1be4      	subs	r4, r4, r7
			buf += cpy_len;
    6a6a:	44b9      	add	r9, r7
			if (!len) {
    6a6c:	d116      	bne.n	6a9c <uarte_nrfx_rx_enable+0x9c>
				data->async->rx_flush_cnt -= cpy_len;
    6a6e:	f8db 200c 	ldr.w	r2, [fp, #12]
    6a72:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    6a76:	1bdb      	subs	r3, r3, r7
    6a78:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    6a7c:	4639      	mov	r1, r7
    6a7e:	4630      	mov	r0, r6
    6a80:	f7ff fe5b 	bl	673a <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    6a84:	f8db 100c 	ldr.w	r1, [fp, #12]
    6a88:	4630      	mov	r0, r6
    6a8a:	3160      	adds	r1, #96	; 0x60
    6a8c:	f7ff fe6e 	bl	676c <rx_buf_release>
				notify_rx_disable(dev);
    6a90:	4630      	mov	r0, r6
    6a92:	f7ff fe83 	bl	679c <notify_rx_disable>
	return 0;
    6a96:	2000      	movs	r0, #0
}
    6a98:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a9c:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6a9e:	f8c8 9534 	str.w	r9, [r8, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6aa2:	f8c8 4538 	str.w	r4, [r8, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6aa6:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
    6aaa:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
    6aae:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
    6ab2:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
	data->async->rx_enabled = true;
    6ab6:	f8db 300c 	ldr.w	r3, [fp, #12]
    6aba:	2201      	movs	r2, #1
    6abc:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6ac0:	f8da 3004 	ldr.w	r3, [sl, #4]
    6ac4:	06db      	lsls	r3, r3, #27
    6ac6:	d519      	bpl.n	6afc <uarte_nrfx_rx_enable+0xfc>
	__asm__ volatile(
    6ac8:	f04f 0320 	mov.w	r3, #32
    6acc:	f3ef 8111 	mrs	r1, BASEPRI
    6ad0:	f383 8812 	msr	BASEPRI_MAX, r3
    6ad4:	f3bf 8f6f 	isb	sy
	if (data->async) {
    6ad8:	6933      	ldr	r3, [r6, #16]
	const struct uarte_nrfx_config *config = dev->config;
    6ada:	6870      	ldr	r0, [r6, #4]
	if (data->async) {
    6adc:	68db      	ldr	r3, [r3, #12]
    6ade:	b12b      	cbz	r3, 6aec <uarte_nrfx_rx_enable+0xec>
		data->async->low_power_mask |= mask;
    6ae0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
    6ae4:	f042 0202 	orr.w	r2, r2, #2
    6ae8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
    6aec:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6aee:	2208      	movs	r2, #8
    6af0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    6af4:	f381 8811 	msr	BASEPRI, r1
    6af8:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6afc:	2301      	movs	r3, #1
    6afe:	f8c8 3000 	str.w	r3, [r8]
    6b02:	e7c8      	b.n	6a96 <uarte_nrfx_rx_enable+0x96>
		return -ENOTSUP;
    6b04:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6b08:	e7c6      	b.n	6a98 <uarte_nrfx_rx_enable+0x98>
		return -EBUSY;
    6b0a:	f06f 000f 	mvn.w	r0, #15
    6b0e:	e7c3      	b.n	6a98 <uarte_nrfx_rx_enable+0x98>

00006b10 <rx_timeout>:
{
    6b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
    6b12:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
    6b14:	68f3      	ldr	r3, [r6, #12]
    6b16:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
    6b1a:	f002 07ff 	and.w	r7, r2, #255	; 0xff
    6b1e:	bb42      	cbnz	r2, 6b72 <rx_timeout+0x62>
	const struct device *dev = data->dev;
    6b20:	6835      	ldr	r5, [r6, #0]
	return config->uarte_regs;
    6b22:	686a      	ldr	r2, [r5, #4]
    6b24:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
    6b26:	2110      	movs	r1, #16
    6b28:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    6b2c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    6b30:	6f59      	ldr	r1, [r3, #116]	; 0x74
    6b32:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
    6b34:	bf1e      	ittt	ne
    6b36:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    6b38:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
    6b3a:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
    6b3e:	e9d3 421d 	ldrd	r4, r2, [r3, #116]	; 0x74
	if (!HW_RX_COUNTING_ENABLED(data) &&
    6b42:	1aa4      	subs	r4, r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    6b44:	bf48      	it	mi
    6b46:	f8c3 20c0 	strmi.w	r2, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    6b4a:	e9d3 1219 	ldrd	r1, r2, [r3, #100]	; 0x64
		len = 0;
    6b4e:	bf48      	it	mi
    6b50:	2400      	movmi	r4, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    6b52:	18a0      	adds	r0, r4, r2
    6b54:	4288      	cmp	r0, r1
    6b56:	d90d      	bls.n	6b74 <rx_timeout+0x64>
		len = data->async->rx_buf_len - data->async->rx_offset;
    6b58:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
    6b5a:	2c00      	cmp	r4, #0
    6b5c:	dd04      	ble.n	6b68 <rx_timeout+0x58>
		clipped = true;
    6b5e:	2701      	movs	r7, #1
    6b60:	e00e      	b.n	6b80 <rx_timeout+0x70>
			data->async->rx_timeout_left -=
    6b62:	1a52      	subs	r2, r2, r1
    6b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return config->uarte_regs;
    6b68:	686b      	ldr	r3, [r5, #4]
    6b6a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6b6c:	2210      	movs	r2, #16
    6b6e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
    6b74:	2c00      	cmp	r4, #0
    6b76:	d0f7      	beq.n	6b68 <rx_timeout+0x58>
				< data->async->rx_timeout_slab)) {
    6b78:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
    6b7c:	428a      	cmp	r2, r1
    6b7e:	daf0      	bge.n	6b62 <rx_timeout+0x52>
			notify_uart_rx_rdy(dev, len);
    6b80:	4628      	mov	r0, r5
    6b82:	4621      	mov	r1, r4
    6b84:	f7ff fdd9 	bl	673a <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    6b88:	68f0      	ldr	r0, [r6, #12]
    6b8a:	6e83      	ldr	r3, [r0, #104]	; 0x68
    6b8c:	4423      	add	r3, r4
    6b8e:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    6b90:	6f83      	ldr	r3, [r0, #120]	; 0x78
    6b92:	4423      	add	r3, r4
    6b94:	6783      	str	r3, [r0, #120]	; 0x78
		if (clipped) {
    6b96:	2f00      	cmp	r7, #0
    6b98:	d0e6      	beq.n	6b68 <rx_timeout+0x58>
    6b9a:	3088      	adds	r0, #136	; 0x88
    6b9c:	f000 fbf7 	bl	738e <z_impl_k_timer_stop>
}
    6ba0:	e7e2      	b.n	6b68 <rx_timeout+0x58>

00006ba2 <uarte_nrfx_tx_abort>:
{
    6ba2:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    6ba4:	6843      	ldr	r3, [r0, #4]
    6ba6:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
    6ba8:	6903      	ldr	r3, [r0, #16]
    6baa:	68d8      	ldr	r0, [r3, #12]
    6bac:	6883      	ldr	r3, [r0, #8]
    6bae:	b14b      	cbz	r3, 6bc4 <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
    6bb0:	2400      	movs	r4, #0
    6bb2:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
    6bb6:	3028      	adds	r0, #40	; 0x28
    6bb8:	f000 fbe9 	bl	738e <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6bbc:	2301      	movs	r3, #1
    6bbe:	60eb      	str	r3, [r5, #12]
	return 0;
    6bc0:	4620      	mov	r0, r4
}
    6bc2:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    6bc4:	f06f 000d 	mvn.w	r0, #13
    6bc8:	e7fb      	b.n	6bc2 <uarte_nrfx_tx_abort+0x20>

00006bca <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
    6bca:	6b43      	ldr	r3, [r0, #52]	; 0x34
    6bcc:	6818      	ldr	r0, [r3, #0]
    6bce:	f7ff bfe8 	b.w	6ba2 <uarte_nrfx_tx_abort>

00006bd2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6bd2:	4770      	bx	lr

00006bd4 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6bd4:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    6bd6:	6843      	ldr	r3, [r0, #4]
    6bd8:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    6bda:	7a03      	ldrb	r3, [r0, #8]
    6bdc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    6be0:	3b01      	subs	r3, #1
    6be2:	00db      	lsls	r3, r3, #3
    6be4:	6845      	ldr	r5, [r0, #4]
    6be6:	6814      	ldr	r4, [r2, #0]
    6be8:	441d      	add	r5, r3
    6bea:	42ac      	cmp	r4, r5
    6bec:	d902      	bls.n	6bf4 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    6bee:	f06f 0001 	mvn.w	r0, #1
}
    6bf2:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    6bf4:	7965      	ldrb	r5, [r4, #5]
    6bf6:	428d      	cmp	r5, r1
    6bf8:	d002      	beq.n	6c00 <pinctrl_lookup_state+0x2c>
		(*state)++;
    6bfa:	3408      	adds	r4, #8
    6bfc:	6014      	str	r4, [r2, #0]
    6bfe:	e7f1      	b.n	6be4 <pinctrl_lookup_state+0x10>
			return 0;
    6c00:	2000      	movs	r0, #0
    6c02:	e7f6      	b.n	6bf2 <pinctrl_lookup_state+0x1e>

00006c04 <nrf_gpio_pin_write>:
    if (value == 0)
    6c04:	b909      	cbnz	r1, 6c0a <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    6c06:	f7fc bfc1 	b.w	3b8c <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    6c0a:	f7fc bff1 	b.w	3bf0 <nrf_gpio_pin_set>

00006c0e <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    6c0e:	b570      	push	{r4, r5, r6, lr}
    6c10:	4615      	mov	r5, r2
    6c12:	4604      	mov	r4, r0
    6c14:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6c18:	42a6      	cmp	r6, r4
    6c1a:	d101      	bne.n	6c20 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    6c1c:	2000      	movs	r0, #0
}
    6c1e:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    6c20:	6823      	ldr	r3, [r4, #0]
    6c22:	0c1a      	lsrs	r2, r3, #16
    6c24:	2a22      	cmp	r2, #34	; 0x22
    6c26:	f200 808e 	bhi.w	6d46 <pinctrl_configure_pins+0x138>
    6c2a:	e8df f002 	tbb	[pc, r2]
    6c2e:	1d12      	.short	0x1d12
    6c30:	39294324 	.word	0x39294324
    6c34:	8c8c8c43 	.word	0x8c8c8c43
    6c38:	8c4d488c 	.word	0x8c4d488c
    6c3c:	8c8c8c8c 	.word	0x8c8c8c8c
    6c40:	8c8c8c8c 	.word	0x8c8c8c8c
    6c44:	68635e52 	.word	0x68635e52
    6c48:	6d8c8c8c 	.word	0x6d8c8c8c
    6c4c:	827d7873 	.word	0x827d7873
    6c50:	87          	.byte	0x87
    6c51:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    6c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c56:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    6c5a:	6820      	ldr	r0, [r4, #0]
    6c5c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6c60:	f7fc ffc6 	bl	3bf0 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6c64:	2201      	movs	r2, #1
    6c66:	e015      	b.n	6c94 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    6c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c6c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6c70:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6c72:	2100      	movs	r1, #0
    6c74:	e00f      	b.n	6c96 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    6c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c7a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    6c7e:	e7ec      	b.n	6c5a <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    6c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c84:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6c88:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    6c8a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6c8e:	f7fc ff7d 	bl	3b8c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6c92:	2200      	movs	r2, #0
    6c94:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6c96:	6820      	ldr	r0, [r4, #0]
    6c98:	f7fc ff88 	bl	3bac <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6c9c:	3404      	adds	r4, #4
    6c9e:	e7bb      	b.n	6c18 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    6ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ca4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6ca8:	6820      	ldr	r0, [r4, #0]
    6caa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6cae:	f7fc ff6d 	bl	3b8c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6cb2:	e7d7      	b.n	6c64 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    6cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6cb8:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6cbc:	e7d8      	b.n	6c70 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    6cbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6cc2:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6cc6:	e7d3      	b.n	6c70 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    6cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ccc:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    6cd0:	e7ce      	b.n	6c70 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    6cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6cd6:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6cda:	6820      	ldr	r0, [r4, #0]
    6cdc:	f3c0 3140 	ubfx	r1, r0, #13, #1
    6ce0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6ce4:	f7ff ff8e 	bl	6c04 <nrf_gpio_pin_write>
    6ce8:	e7bc      	b.n	6c64 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    6cea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6cee:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6cf2:	e7f2      	b.n	6cda <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    6cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6cf8:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    6cfc:	e7ed      	b.n	6cda <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    6cfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d02:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    6d06:	e7e8      	b.n	6cda <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    6d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d0c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d10:	2201      	movs	r2, #1
    6d12:	e7ae      	b.n	6c72 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    6d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d18:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d1c:	e7f8      	b.n	6d10 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    6d1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d22:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d26:	e7f3      	b.n	6d10 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    6d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d2c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d30:	e7ee      	b.n	6d10 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    6d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d36:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6d3a:	e7e9      	b.n	6d10 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    6d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d40:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    6d44:	e7e4      	b.n	6d10 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    6d46:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6d4a:	e768      	b.n	6c1e <pinctrl_configure_pins+0x10>

00006d4c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6d4c:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    6d4e:	2000      	movs	r0, #0
    6d50:	f7fb fd04 	bl	275c <sys_arch_reboot>

00006d54 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6d54:	f7fe bfd6 	b.w	5d04 <nrf_cc3xx_platform_init_no_rng>

00006d58 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6d58:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6d5a:	f7fb f84d 	bl	1df8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6d5e:	f7fb f8ff 	bl	1f60 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6d62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6d66:	f7fe bfcd 	b.w	5d04 <nrf_cc3xx_platform_init_no_rng>

00006d6a <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6d6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6d6e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    6d72:	f1a0 0308 	sub.w	r3, r0, #8
    6d76:	4258      	negs	r0, r3
    6d78:	4158      	adcs	r0, r3
    6d7a:	4770      	bx	lr

00006d7c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6d7c:	4700      	bx	r0

00006d7e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6d7e:	f000 baf6 	b.w	736e <z_impl_k_busy_wait>

00006d82 <nrfx_clock_enable>:
{
    6d82:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6d84:	2000      	movs	r0, #0
    6d86:	f7fb f92f 	bl	1fe8 <arch_irq_is_enabled>
    6d8a:	b908      	cbnz	r0, 6d90 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6d8c:	f7fb f91c 	bl	1fc8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d94:	2200      	movs	r2, #0
    6d96:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    6d9a:	bd08      	pop	{r3, pc}

00006d9c <nrfx_clock_start>:
{
    6d9c:	b508      	push	{r3, lr}
    switch (domain)
    6d9e:	b110      	cbz	r0, 6da6 <nrfx_clock_start+0xa>
    6da0:	2801      	cmp	r0, #1
    6da2:	d02d      	beq.n	6e00 <nrfx_clock_start+0x64>
}
    6da4:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6da6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6daa:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6dae:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6db2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    6db6:	d10b      	bne.n	6dd0 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6db8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6dbc:	07c9      	lsls	r1, r1, #31
    6dbe:	d510      	bpl.n	6de2 <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6dc0:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    6dc4:	079b      	lsls	r3, r3, #30
    6dc6:	d408      	bmi.n	6dda <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
    6dc8:	2302      	movs	r3, #2
    6dca:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    6dce:	e7e9      	b.n	6da4 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6dd0:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6dd4:	2b01      	cmp	r3, #1
    6dd6:	d004      	beq.n	6de2 <nrfx_clock_start+0x46>
    if (!is_correct_clk)
    6dd8:	b11b      	cbz	r3, 6de2 <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6dda:	2000      	movs	r0, #0
    6ddc:	f7fd f864 	bl	3ea8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    6de0:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    6de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6de6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6dea:	2300      	movs	r3, #0
    6dec:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    6df0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    6df4:	2302      	movs	r3, #2
    6df6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6dfa:	2301      	movs	r3, #1
    6dfc:	6093      	str	r3, [r2, #8]
}
    6dfe:	e7d1      	b.n	6da4 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6e04:	2200      	movs	r2, #0
    6e06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6e0a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6e0e:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e12:	6018      	str	r0, [r3, #0]
}
    6e14:	e7c6      	b.n	6da4 <nrfx_clock_start+0x8>

00006e16 <nrfx_clock_stop>:
    clock_stop(domain);
    6e16:	f7fd b847 	b.w	3ea8 <clock_stop>

00006e1a <nrf_gpio_reconfigure>:
{
    6e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6e1c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6e1e:	a801      	add	r0, sp, #4
{
    6e20:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    6e24:	4617      	mov	r7, r2
    6e26:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6e28:	f7fd f8d6 	bl	3fd8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6e2c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6e2e:	2f00      	cmp	r7, #0
    6e30:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6e34:	bf14      	ite	ne
    6e36:	2302      	movne	r3, #2
    6e38:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6e3a:	2900      	cmp	r1, #0
    6e3c:	bf18      	it	ne
    6e3e:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6e42:	2d00      	cmp	r5, #0
    6e44:	bf14      	ite	ne
    6e46:	f04f 0c0c 	movne.w	ip, #12
    6e4a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6e4e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6e50:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6e54:	bf14      	ite	ne
    6e56:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    6e5a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6e5e:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6e60:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6e64:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6e68:	bf14      	ite	ne
    6e6a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    6e6e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6e72:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    6e76:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6e7a:	b101      	cbz	r1, 6e7e <nrf_gpio_reconfigure+0x64>
    6e7c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6e7e:	b10f      	cbz	r7, 6e84 <nrf_gpio_reconfigure+0x6a>
    6e80:	783f      	ldrb	r7, [r7, #0]
    6e82:	007f      	lsls	r7, r7, #1
    6e84:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6e86:	b10d      	cbz	r5, 6e8c <nrf_gpio_reconfigure+0x72>
    6e88:	782d      	ldrb	r5, [r5, #0]
    6e8a:	00ad      	lsls	r5, r5, #2
    6e8c:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6e8e:	b10c      	cbz	r4, 6e94 <nrf_gpio_reconfigure+0x7a>
    6e90:	7822      	ldrb	r2, [r4, #0]
    6e92:	0214      	lsls	r4, r2, #8
    6e94:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    6e96:	b10e      	cbz	r6, 6e9c <nrf_gpio_reconfigure+0x82>
    6e98:	7836      	ldrb	r6, [r6, #0]
    6e9a:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6e9c:	432c      	orrs	r4, r5
    6e9e:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    6ea0:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    6ea4:	b003      	add	sp, #12
    6ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006ea8 <nrf_gpio_cfg_sense_set>:
{
    6ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6eaa:	f10d 030f 	add.w	r3, sp, #15
    6eae:	9301      	str	r3, [sp, #4]
    6eb0:	2300      	movs	r3, #0
{
    6eb2:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6eb6:	9300      	str	r3, [sp, #0]
    6eb8:	461a      	mov	r2, r3
    6eba:	4619      	mov	r1, r3
    6ebc:	f7ff ffad 	bl	6e1a <nrf_gpio_reconfigure>
}
    6ec0:	b005      	add	sp, #20
    6ec2:	f85d fb04 	ldr.w	pc, [sp], #4

00006ec6 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
    6ec6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
    6ec8:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    6eca:	6b48      	ldr	r0, [r1, #52]	; 0x34
    6ecc:	4298      	cmp	r0, r3
{
    6ece:	b510      	push	{r4, lr}
    6ed0:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
    6ed4:	d205      	bcs.n	6ee2 <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    6ed6:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
    6ed8:	5c09      	ldrb	r1, [r1, r0]
    6eda:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
    6ede:	4618      	mov	r0, r3
}
    6ee0:	e004      	b.n	6eec <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
    6ee2:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    6ee6:	b110      	cbz	r0, 6eee <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ee8:	61d3      	str	r3, [r2, #28]
            return false;
    6eea:	2000      	movs	r0, #0
}
    6eec:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    6eee:	6a0c      	ldr	r4, [r1, #32]
    6ef0:	0664      	lsls	r4, r4, #25
    6ef2:	d503      	bpl.n	6efc <twi_send_byte+0x36>
    6ef4:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    6ef6:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    6efa:	e7f7      	b.n	6eec <twi_send_byte+0x26>
    6efc:	6153      	str	r3, [r2, #20]
    6efe:	e7ee      	b.n	6ede <twi_send_byte+0x18>

00006f00 <twi_transfer>:
{
    6f00:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f02:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
    6f06:	4604      	mov	r4, r0
    6f08:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    6f0a:	b12e      	cbz	r6, 6f18 <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6f0c:	2300      	movs	r3, #0
    6f0e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    6f12:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    6f16:	2601      	movs	r6, #1
    if (p_cb->error)
    6f18:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    6f1c:	b320      	cbz	r0, 6f68 <twi_transfer+0x68>
    6f1e:	2300      	movs	r3, #0
    6f20:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    6f24:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    6f28:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    6f2c:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
    6f30:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    6f34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
    6f38:	2e00      	cmp	r6, #0
    6f3a:	d068      	beq.n	700e <twi_transfer+0x10e>
        if (!p_cb->error)
    6f3c:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    6f40:	2300      	movs	r3, #0
    6f42:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
    6f46:	bb88      	cbnz	r0, 6fac <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    6f48:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6f4a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    6f4c:	429a      	cmp	r2, r3
        return false;
    6f4e:	bf1c      	itt	ne
    6f50:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    6f52:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    6f54:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    6f58:	bf1c      	itt	ne
    6f5a:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    6f5e:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
    6f62:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
    6f66:	e022      	b.n	6fae <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f68:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    6f6c:	b142      	cbz	r2, 6f80 <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6f6e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    6f72:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6f76:	2301      	movs	r3, #1
    6f78:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    6f7a:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    6f7e:	e7db      	b.n	6f38 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f80:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    6f84:	b1a3      	cbz	r3, 6fb0 <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6f86:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    6f8a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    6f8e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    6f90:	3301      	adds	r3, #1
    6f92:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    6f98:	b113      	cbz	r3, 6fa0 <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6f9a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    6f9e:	e7e8      	b.n	6f72 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
    6fa0:	4629      	mov	r1, r5
    6fa2:	4620      	mov	r0, r4
    6fa4:	f7ff ff8f 	bl	6ec6 <twi_send_byte>
    6fa8:	2800      	cmp	r0, #0
    6faa:	d1c5      	bne.n	6f38 <twi_transfer+0x38>
                    return false;
    6fac:	2000      	movs	r0, #0
}
    6fae:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6fb0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    6fb4:	2a00      	cmp	r2, #0
    6fb6:	d0bf      	beq.n	6f38 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6fb8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    6fbc:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6fc0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    6fc4:	b112      	cbz	r2, 6fcc <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6fc6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    6fca:	e7d2      	b.n	6f72 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    6fcc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    6fce:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6fd0:	4293      	cmp	r3, r2
    6fd2:	d2b1      	bcs.n	6f38 <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    6fd4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    6fd6:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
    6fda:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
    6fdc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6fde:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    6fe0:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6fe2:	1e51      	subs	r1, r2, #1
    6fe4:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
    6fe6:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6fe8:	d108      	bne.n	6ffc <twi_transfer+0xfc>
    6fea:	6a29      	ldr	r1, [r5, #32]
    6fec:	0649      	lsls	r1, r1, #25
    6fee:	d410      	bmi.n	7012 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
    6ff0:	2302      	movs	r3, #2
    6ff2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ff6:	2301      	movs	r3, #1
    6ff8:	6223      	str	r3, [r4, #32]
    6ffa:	e79d      	b.n	6f38 <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6ffc:	4293      	cmp	r3, r2
    6ffe:	d1fa      	bne.n	6ff6 <twi_transfer+0xf6>
    7000:	6a2b      	ldr	r3, [r5, #32]
    7002:	065b      	lsls	r3, r3, #25
    7004:	d598      	bpl.n	6f38 <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    7006:	2302      	movs	r3, #2
    7008:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
    700c:	e7cf      	b.n	6fae <twi_transfer+0xae>
    return true;
    700e:	2001      	movs	r0, #1
    7010:	e7cd      	b.n	6fae <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    7012:	4293      	cmp	r3, r2
    7014:	d1ef      	bne.n	6ff6 <twi_transfer+0xf6>
    7016:	e7f6      	b.n	7006 <twi_transfer+0x106>

00007018 <nrf_gpio_pin_set>:
{
    7018:	b507      	push	{r0, r1, r2, lr}
    701a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    701c:	a801      	add	r0, sp, #4
    701e:	f7fd fd79 	bl	4b14 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7022:	9a01      	ldr	r2, [sp, #4]
    7024:	2301      	movs	r3, #1
    7026:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7028:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    702c:	b003      	add	sp, #12
    702e:	f85d fb04 	ldr.w	pc, [sp], #4

00007032 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    7032:	f7fd bde1 	b.w	4bf8 <_DoInit>

00007036 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    7036:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    7038:	f7ff fffb 	bl	7032 <SEGGER_RTT_Init>

	return 0;
}
    703c:	2000      	movs	r0, #0
    703e:	bd08      	pop	{r3, pc}

00007040 <z_device_state_init>:
}
    7040:	4770      	bx	lr

00007042 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    7042:	b138      	cbz	r0, 7054 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    7044:	68c3      	ldr	r3, [r0, #12]
    7046:	8818      	ldrh	r0, [r3, #0]
    7048:	f3c0 0008 	ubfx	r0, r0, #0, #9
    704c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    7050:	4258      	negs	r0, r3
    7052:	4158      	adcs	r0, r3
}
    7054:	4770      	bx	lr

00007056 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7058:	4605      	mov	r5, r0
    705a:	460e      	mov	r6, r1
	__asm__ volatile(
    705c:	f04f 0320 	mov.w	r3, #32
    7060:	f3ef 8711 	mrs	r7, BASEPRI
    7064:	f383 8812 	msr	BASEPRI_MAX, r3
    7068:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    706c:	f7fe fbfc 	bl	5868 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    7070:	4631      	mov	r1, r6
    7072:	4604      	mov	r4, r0
    7074:	4628      	mov	r0, r5
    7076:	f7ff fe69 	bl	6d4c <k_sys_fatal_error_handler>
	__asm__ volatile(
    707a:	f387 8811 	msr	BASEPRI, r7
    707e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7082:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7084:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7088:	f7fb ba38 	b.w	24fc <z_impl_k_thread_abort>

0000708c <z_early_memset>:
	(void) memset(dst, c, n);
    708c:	f7ff b9ff 	b.w	648e <memset>

00007090 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    7090:	f7ff b9f2 	b.w	6478 <memcpy>

00007094 <k_mem_slab_init>:
{
    7094:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    7096:	2400      	movs	r4, #0
    7098:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    709a:	ea41 0402 	orr.w	r4, r1, r2
    709e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    70a2:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    70a6:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    70a8:	d10c      	bne.n	70c4 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    70aa:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    70ac:	42a3      	cmp	r3, r4
    70ae:	d103      	bne.n	70b8 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    70b0:	e9c0 0000 	strd	r0, r0, [r0]
}
    70b4:	2000      	movs	r0, #0
}
    70b6:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    70b8:	6945      	ldr	r5, [r0, #20]
    70ba:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    70bc:	3401      	adds	r4, #1
		slab->free_list = p;
    70be:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    70c0:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    70c2:	e7f3      	b.n	70ac <k_mem_slab_init+0x18>
		return -EINVAL;
    70c4:	f06f 0015 	mvn.w	r0, #21
	return rc;
    70c8:	e7f5      	b.n	70b6 <k_mem_slab_init+0x22>

000070ca <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    70ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70cc:	4604      	mov	r4, r0
    70ce:	460d      	mov	r5, r1
	__asm__ volatile(
    70d0:	f04f 0320 	mov.w	r3, #32
    70d4:	f3ef 8611 	mrs	r6, BASEPRI
    70d8:	f383 8812 	msr	BASEPRI_MAX, r3
    70dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    70e0:	6947      	ldr	r7, [r0, #20]
    70e2:	b977      	cbnz	r7, 7102 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    70e4:	f000 f8e5 	bl	72b2 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    70e8:	b158      	cbz	r0, 7102 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    70ea:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    70ec:	6142      	str	r2, [r0, #20]
    70ee:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    70f0:	f000 f86e 	bl	71d0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    70f4:	4631      	mov	r1, r6
    70f6:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    70fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    70fe:	f7fe b907 	b.w	5310 <z_reschedule>
	**(char ***) mem = slab->free_list;
    7102:	682b      	ldr	r3, [r5, #0]
    7104:	6962      	ldr	r2, [r4, #20]
    7106:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    7108:	682b      	ldr	r3, [r5, #0]
    710a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    710c:	69a3      	ldr	r3, [r4, #24]
    710e:	3b01      	subs	r3, #1
    7110:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    7112:	f386 8811 	msr	BASEPRI, r6
    7116:	f3bf 8f6f 	isb	sy
}
    711a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000711c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    711c:	f3ef 8005 	mrs	r0, IPSR
}
    7120:	3800      	subs	r0, #0
    7122:	bf18      	it	ne
    7124:	2001      	movne	r0, #1
    7126:	4770      	bx	lr

00007128 <z_pm_save_idle_exit>:
{
    7128:	b508      	push	{r3, lr}
	pm_system_resume();
    712a:	f7fa fd4d 	bl	1bc8 <pm_system_resume>
}
    712e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    7132:	f7ff bd4e 	b.w	6bd2 <sys_clock_idle_exit>

00007136 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    7136:	f990 300e 	ldrsb.w	r3, [r0, #14]
    713a:	428b      	cmp	r3, r1
    713c:	d001      	beq.n	7142 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    713e:	f7fe ba4f 	b.w	55e0 <z_set_prio>
}
    7142:	2000      	movs	r0, #0
    7144:	4770      	bx	lr

00007146 <z_impl_k_mutex_init>:
{
    7146:	4603      	mov	r3, r0
	mutex->owner = NULL;
    7148:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    714a:	e9c3 0002 	strd	r0, r0, [r3, #8]
    714e:	e9c3 3300 	strd	r3, r3, [r3]
}
    7152:	4770      	bx	lr

00007154 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    7154:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    7158:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    715a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    715c:	2300      	movs	r3, #0
	node->prev = NULL;
    715e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    7162:	4770      	bx	lr

00007164 <unpend_thread_no_timeout>:
{
    7164:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    7166:	f7ff fff5 	bl	7154 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    716a:	7b43      	ldrb	r3, [r0, #13]
    716c:	f023 0302 	bic.w	r3, r3, #2
    7170:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    7172:	2300      	movs	r3, #0
    7174:	6083      	str	r3, [r0, #8]
}
    7176:	bd08      	pop	{r3, pc}

00007178 <z_unpend_thread_no_timeout>:
{
    7178:	b508      	push	{r3, lr}
	__asm__ volatile(
    717a:	f04f 0320 	mov.w	r3, #32
    717e:	f3ef 8111 	mrs	r1, BASEPRI
    7182:	f383 8812 	msr	BASEPRI_MAX, r3
    7186:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    718a:	f7ff ffeb 	bl	7164 <unpend_thread_no_timeout>
	__asm__ volatile(
    718e:	f381 8811 	msr	BASEPRI, r1
    7192:	f3bf 8f6f 	isb	sy
}
    7196:	bd08      	pop	{r3, pc}

00007198 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7198:	4603      	mov	r3, r0
    719a:	b920      	cbnz	r0, 71a6 <z_reschedule_irqlock+0xe>
    719c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    71a0:	b90a      	cbnz	r2, 71a6 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    71a2:	f7fa bf67 	b.w	2074 <arch_swap>
    71a6:	f383 8811 	msr	BASEPRI, r3
    71aa:	f3bf 8f6f 	isb	sy
}
    71ae:	4770      	bx	lr

000071b0 <z_reschedule_unlocked>:
	__asm__ volatile(
    71b0:	f04f 0320 	mov.w	r3, #32
    71b4:	f3ef 8011 	mrs	r0, BASEPRI
    71b8:	f383 8812 	msr	BASEPRI_MAX, r3
    71bc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    71c0:	f7ff bfea 	b.w	7198 <z_reschedule_irqlock>

000071c4 <z_priq_dumb_best>:
{
    71c4:	4603      	mov	r3, r0
	return list->head == list;
    71c6:	6800      	ldr	r0, [r0, #0]
}
    71c8:	4283      	cmp	r3, r0
    71ca:	bf08      	it	eq
    71cc:	2000      	moveq	r0, #0
    71ce:	4770      	bx	lr

000071d0 <z_ready_thread>:
{
    71d0:	b510      	push	{r4, lr}
    71d2:	f04f 0320 	mov.w	r3, #32
    71d6:	f3ef 8411 	mrs	r4, BASEPRI
    71da:	f383 8812 	msr	BASEPRI_MAX, r3
    71de:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    71e2:	f7fe f957 	bl	5494 <ready_thread>
	__asm__ volatile(
    71e6:	f384 8811 	msr	BASEPRI, r4
    71ea:	f3bf 8f6f 	isb	sy
}
    71ee:	bd10      	pop	{r4, pc}

000071f0 <z_thread_timeout>:
{
    71f0:	b510      	push	{r4, lr}
    71f2:	4601      	mov	r1, r0
	__asm__ volatile(
    71f4:	f04f 0320 	mov.w	r3, #32
    71f8:	f3ef 8411 	mrs	r4, BASEPRI
    71fc:	f383 8812 	msr	BASEPRI_MAX, r3
    7200:	f3bf 8f6f 	isb	sy
		if (!killed) {
    7204:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    7208:	f013 0f28 	tst.w	r3, #40	; 0x28
    720c:	d10d      	bne.n	722a <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    720e:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    7212:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    7214:	b10b      	cbz	r3, 721a <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    7216:	f7ff ffa5 	bl	7164 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    721a:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    721e:	f023 0314 	bic.w	r3, r3, #20
    7222:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    7226:	f7fe f935 	bl	5494 <ready_thread>
	__asm__ volatile(
    722a:	f384 8811 	msr	BASEPRI, r4
    722e:	f3bf 8f6f 	isb	sy
}
    7232:	bd10      	pop	{r4, pc}

00007234 <add_to_waitq_locked>:
{
    7234:	b538      	push	{r3, r4, r5, lr}
    7236:	4604      	mov	r4, r0
    7238:	460d      	mov	r5, r1
	unready_thread(thread);
    723a:	f7fe f97f 	bl	553c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    723e:	7b63      	ldrb	r3, [r4, #13]
    7240:	f043 0302 	orr.w	r3, r3, #2
    7244:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    7246:	b195      	cbz	r5, 726e <add_to_waitq_locked+0x3a>
    7248:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    724a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    724c:	429d      	cmp	r5, r3
    724e:	d015      	beq.n	727c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7250:	b1a3      	cbz	r3, 727c <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    7252:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7256:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    725a:	4291      	cmp	r1, r2
    725c:	d008      	beq.n	7270 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    725e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    7260:	2a00      	cmp	r2, #0
    7262:	dd05      	ble.n	7270 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    7264:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7266:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    726a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    726c:	605c      	str	r4, [r3, #4]
}
    726e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    7270:	686a      	ldr	r2, [r5, #4]
    7272:	4293      	cmp	r3, r2
    7274:	d002      	beq.n	727c <add_to_waitq_locked+0x48>
    7276:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7278:	2b00      	cmp	r3, #0
    727a:	d1ec      	bne.n	7256 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    727c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    727e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    7282:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7284:	606c      	str	r4, [r5, #4]
}
    7286:	e7f2      	b.n	726e <add_to_waitq_locked+0x3a>

00007288 <z_unpend1_no_timeout>:
{
    7288:	b510      	push	{r4, lr}
	__asm__ volatile(
    728a:	f04f 0320 	mov.w	r3, #32
    728e:	f3ef 8411 	mrs	r4, BASEPRI
    7292:	f383 8812 	msr	BASEPRI_MAX, r3
    7296:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    729a:	f7ff ff93 	bl	71c4 <z_priq_dumb_best>
		if (thread != NULL) {
    729e:	4601      	mov	r1, r0
    72a0:	b108      	cbz	r0, 72a6 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    72a2:	f7ff ff5f 	bl	7164 <unpend_thread_no_timeout>
	__asm__ volatile(
    72a6:	f384 8811 	msr	BASEPRI, r4
    72aa:	f3bf 8f6f 	isb	sy
}
    72ae:	4608      	mov	r0, r1
    72b0:	bd10      	pop	{r4, pc}

000072b2 <z_unpend_first_thread>:
{
    72b2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    72b4:	f04f 0320 	mov.w	r3, #32
    72b8:	f3ef 8511 	mrs	r5, BASEPRI
    72bc:	f383 8812 	msr	BASEPRI_MAX, r3
    72c0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    72c4:	f7ff ff7e 	bl	71c4 <z_priq_dumb_best>
		if (thread != NULL) {
    72c8:	4604      	mov	r4, r0
    72ca:	b120      	cbz	r0, 72d6 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    72cc:	f7ff ff4a 	bl	7164 <unpend_thread_no_timeout>
    72d0:	3018      	adds	r0, #24
    72d2:	f000 f806 	bl	72e2 <z_abort_timeout>
	__asm__ volatile(
    72d6:	f385 8811 	msr	BASEPRI, r5
    72da:	f3bf 8f6f 	isb	sy
}
    72de:	4620      	mov	r0, r4
    72e0:	bd38      	pop	{r3, r4, r5, pc}

000072e2 <z_abort_timeout>:
{
    72e2:	b510      	push	{r4, lr}
	__asm__ volatile(
    72e4:	f04f 0220 	mov.w	r2, #32
    72e8:	f3ef 8411 	mrs	r4, BASEPRI
    72ec:	f382 8812 	msr	BASEPRI_MAX, r2
    72f0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    72f4:	6803      	ldr	r3, [r0, #0]
    72f6:	b13b      	cbz	r3, 7308 <z_abort_timeout+0x26>
			remove_timeout(to);
    72f8:	f7fe fb58 	bl	59ac <remove_timeout>
			ret = 0;
    72fc:	2000      	movs	r0, #0
	__asm__ volatile(
    72fe:	f384 8811 	msr	BASEPRI, r4
    7302:	f3bf 8f6f 	isb	sy
}
    7306:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    7308:	f06f 0015 	mvn.w	r0, #21
    730c:	e7f7      	b.n	72fe <z_abort_timeout+0x1c>

0000730e <z_get_next_timeout_expiry>:
{
    730e:	b510      	push	{r4, lr}
	__asm__ volatile(
    7310:	f04f 0320 	mov.w	r3, #32
    7314:	f3ef 8411 	mrs	r4, BASEPRI
    7318:	f383 8812 	msr	BASEPRI_MAX, r3
    731c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    7320:	f7fe fb1e 	bl	5960 <next_timeout>
	__asm__ volatile(
    7324:	f384 8811 	msr	BASEPRI, r4
    7328:	f3bf 8f6f 	isb	sy
}
    732c:	bd10      	pop	{r4, pc}

0000732e <z_set_timeout_expiry>:
{
    732e:	b570      	push	{r4, r5, r6, lr}
    7330:	4604      	mov	r4, r0
    7332:	460d      	mov	r5, r1
	__asm__ volatile(
    7334:	f04f 0320 	mov.w	r3, #32
    7338:	f3ef 8611 	mrs	r6, BASEPRI
    733c:	f383 8812 	msr	BASEPRI_MAX, r3
    7340:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    7344:	f7fe fb0c 	bl	5960 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7348:	2801      	cmp	r0, #1
    734a:	dd05      	ble.n	7358 <z_set_timeout_expiry+0x2a>
    734c:	42a0      	cmp	r0, r4
    734e:	db03      	blt.n	7358 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7350:	4629      	mov	r1, r5
    7352:	4620      	mov	r0, r4
    7354:	f7fc fbde 	bl	3b14 <sys_clock_set_timeout>
	__asm__ volatile(
    7358:	f386 8811 	msr	BASEPRI, r6
    735c:	f3bf 8f6f 	isb	sy
}
    7360:	bd70      	pop	{r4, r5, r6, pc}

00007362 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7362:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7364:	f7fe fc12 	bl	5b8c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7368:	bd08      	pop	{r3, pc}

0000736a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    736a:	f7fe bc0f 	b.w	5b8c <sys_clock_tick_get>

0000736e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    736e:	b108      	cbz	r0, 7374 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7370:	f7fb ba0a 	b.w	2788 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7374:	4770      	bx	lr

00007376 <k_timer_init>:
	timer->status = 0U;
    7376:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    7378:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    737c:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    7380:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    7384:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    7388:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    738a:	6343      	str	r3, [r0, #52]	; 0x34
}
    738c:	4770      	bx	lr

0000738e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    738e:	b510      	push	{r4, lr}
    7390:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    7392:	f7ff ffa6 	bl	72e2 <z_abort_timeout>

	if (inactive) {
    7396:	b9b0      	cbnz	r0, 73c6 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    7398:	6a63      	ldr	r3, [r4, #36]	; 0x24
    739a:	b10b      	cbz	r3, 73a0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    739c:	4620      	mov	r0, r4
    739e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    73a0:	f104 0018 	add.w	r0, r4, #24
    73a4:	f7ff ff70 	bl	7288 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    73a8:	b168      	cbz	r0, 73c6 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    73aa:	f7ff ff11 	bl	71d0 <z_ready_thread>
	__asm__ volatile(
    73ae:	f04f 0320 	mov.w	r3, #32
    73b2:	f3ef 8011 	mrs	r0, BASEPRI
    73b6:	f383 8812 	msr	BASEPRI_MAX, r3
    73ba:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    73be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    73c2:	f7ff bee9 	b.w	7198 <z_reschedule_irqlock>
    73c6:	bd10      	pop	{r4, pc}

000073c8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    73c8:	f7fc bc3c 	b.w	3c44 <SystemInit>
