
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 1d 00 20 fd 1d 00 00 11 58 00 00 d1 1d 00 00     ... .....X......
  10:	d1 1d 00 00 d1 1d 00 00 d1 1d 00 00 00 00 00 00     ................
	...
  2c:	d9 1a 00 00 d1 1d 00 00 00 00 00 00 85 1a 00 00     ................
  3c:	d1 1d 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	89 1b 00 00 89 1b 00 00 89 1b 00 00 89 1b 00 00     ................
  50:	89 1b 00 00 89 1b 00 00 89 1b 00 00 89 1b 00 00     ................
  60:	89 1b 00 00 89 1b 00 00 89 1b 00 00 89 1b 00 00     ................
  70:	89 1b 00 00 89 1b 00 00 89 1b 00 00 89 1b 00 00     ................
  80:	89 1b 00 00 89 1b 00 00 89 1b 00 00 89 1b 00 00     ................
  90:	89 1b 00 00 89 1b 00 00 89 1b 00 00 89 1b 00 00     ................
  a0:	89 1b 00 00 89 1b 00 00 89 1b 00 00 89 1b 00 00     ................
  b0:	89 1b 00 00 89 1b 00 00 89 1b 00 00 89 1b 00 00     ................
  c0:	89 1b 00 00 89 1b 00 00 89 1b 00 00 89 1b 00 00     ................
  d0:	89 1b 00 00 89 1b 00 00 89 1b 00 00 89 1b 00 00     ................
  e0:	89 1b 00 00 89 1b 00 00 89 1b 00 00 89 1b 00 00     ................
  f0:	89 1b 00 00 89 1b 00 00 89 1b 00 00 89 1b 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <__data_size+0x2>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a3>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x193>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x261>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x265>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23b>
     3a2:	d106      	bne.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19b>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <thread_print_code>:

	timing_stop();
}

/* implementaçao da thread print */
void thread_print_code(void *argA , void *argB, void *argC){
     3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	/* Timing variables to control task periodicity */
    int64_t fin_time=0, release_time=0;

	printk("Thread print init (periodic)\n");
     3e0:	4814      	ldr	r0, [pc, #80]	; (434 <CONFIG_FLASH_SIZE+0x34>)
	/* Compute next release instant */
    release_time = k_uptime_get() + thread_print_period;

	while(1){
		for(int i=0; i<mem_size;i++){
			printk("%d  ",temp_buffer.data[i]);
     3e2:	4f15      	ldr	r7, [pc, #84]	; (438 <CONFIG_FLASH_SIZE+0x38>)
		}
		printk("\n");
     3e4:	f8df 8054 	ldr.w	r8, [pc, #84]	; 43c <CONFIG_FLASH_SIZE+0x3c>
	printk("Thread print init (periodic)\n");
     3e8:	f005 f8b6 	bl	5558 <printk>
    release_time = k_uptime_get() + thread_print_period;
     3ec:	f005 f873 	bl	54d6 <k_uptime_get>
     3f0:	f644 6320 	movw	r3, #20000	; 0x4e20
     3f4:	18c4      	adds	r4, r0, r3
     3f6:	f141 0600 	adc.w	r6, r1, #0
		/* Wait for next release instant */ 
    	fin_time = k_uptime_get();
    	if( fin_time < release_time) {
        	k_msleep(release_time - fin_time); /* There are other variants, k_sleep(), k_usleep(), ... */
        	release_time += thread_print_period;
     3fa:	4699      	mov	r9, r3
		for(int i=0; i<mem_size;i++){
     3fc:	f8df a040 	ldr.w	sl, [pc, #64]	; 440 <CONFIG_FLASH_SIZE+0x40>
     400:	2500      	movs	r5, #0
			printk("%d  ",temp_buffer.data[i]);
     402:	f85a 1b04 	ldr.w	r1, [sl], #4
     406:	4638      	mov	r0, r7
		for(int i=0; i<mem_size;i++){
     408:	3501      	adds	r5, #1
			printk("%d  ",temp_buffer.data[i]);
     40a:	f005 f8a5 	bl	5558 <printk>
		for(int i=0; i<mem_size;i++){
     40e:	2d0a      	cmp	r5, #10
     410:	d1f7      	bne.n	402 <CONFIG_FLASH_SIZE+0x2>
		printk("\n");
     412:	4640      	mov	r0, r8
     414:	f005 f8a0 	bl	5558 <printk>
    	fin_time = k_uptime_get();
     418:	f005 f85d 	bl	54d6 <k_uptime_get>
    	if( fin_time < release_time) {
     41c:	42a0      	cmp	r0, r4
     41e:	eb71 0306 	sbcs.w	r3, r1, r6
     422:	daeb      	bge.n	3fc <thread_print_code+0x20>
        	k_msleep(release_time - fin_time); /* There are other variants, k_sleep(), k_usleep(), ... */
     424:	1a20      	subs	r0, r4, r0
     426:	f005 f864 	bl	54f2 <k_msleep.isra.0>
        	release_time += thread_print_period;
     42a:	eb14 0409 	adds.w	r4, r4, r9
     42e:	f146 0600 	adc.w	r6, r6, #0
     432:	e7e3      	b.n	3fc <thread_print_code+0x20>
     434:	000067ec 	.word	0x000067ec
     438:	0000680a 	.word	0x0000680a
     43c:	00006867 	.word	0x00006867
     440:	200003fc 	.word	0x200003fc

00000444 <thread_tempread_code>:
void thread_tempread_code(void *argA , void *argB, void *argC){
     444:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	printk("Thread tempread init (periodic)\n");
     448:	4829      	ldr	r0, [pc, #164]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
		ret = i2c_read_dt(&dev_i2c, &temp_reading, sizeof(temp_reading));
     44a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
	printk("Thread tempread init (periodic)\n");
     44e:	f005 f883 	bl	5558 <printk>
    release_time = k_uptime_get() + thread_tempread_period;
     452:	f005 f840 	bl	54d6 <k_uptime_get>
				      uint16_t addr)
{
	const struct i2c_driver_api *api =
		(const struct i2c_driver_api *)dev->api;

	int res =  api->transfer(dev, msgs, num_msgs, addr);
     456:	4b28      	ldr	r3, [pc, #160]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     458:	f241 3488 	movw	r4, #5000	; 0x1388
     45c:	1904      	adds	r4, r0, r4
     45e:	689e      	ldr	r6, [r3, #8]
     460:	f141 0500 	adc.w	r5, r1, #0
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
     464:	f10d 0303 	add.w	r3, sp, #3
     468:	9301      	str	r3, [sp, #4]
	msg.len = num_bytes;
     46a:	2201      	movs	r2, #1
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
     46c:	2303      	movs	r3, #3
	msg.len = num_bytes;
     46e:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
     470:	f88d 300c 	strb.w	r3, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     474:	4820      	ldr	r0, [pc, #128]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     476:	68b7      	ldr	r7, [r6, #8]
     478:	234d      	movs	r3, #77	; 0x4d
     47a:	a901      	add	r1, sp, #4
     47c:	47b8      	blx	r7
		ret = i2c_read_dt(&dev_i2c, &temp_reading, sizeof(temp_reading));
     47e:	f8c8 0000 	str.w	r0, [r8]
		if(ret != 0){
     482:	b128      	cbz	r0, 490 <thread_tempread_code+0x4c>
			printk("Failed to write/read I2C device address %x at Reg. %x \r\n", dev_i2c.addr,config);
     484:	4b1d      	ldr	r3, [pc, #116]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
     486:	481e      	ldr	r0, [pc, #120]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     488:	781a      	ldrb	r2, [r3, #0]
     48a:	214d      	movs	r1, #77	; 0x4d
     48c:	f005 f864 	bl	5558 <printk>
		if(temp_reading >= 128){
     490:	f99d 3003 	ldrsb.w	r3, [sp, #3]
     494:	f89d 1003 	ldrb.w	r1, [sp, #3]
     498:	4f1a      	ldr	r7, [pc, #104]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
     49a:	2b00      	cmp	r3, #0
     49c:	da21      	bge.n	4e2 <thread_tempread_code+0x9e>
			printk("-%d \n", temp_reading);
     49e:	481a      	ldr	r0, [pc, #104]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     4a0:	f005 f85a 	bl	5558 <printk>
			temp_buffer.data[temp_buffer.idx] = -256 + temp_reading; // guardar o valor da temperatura no buffer de dados
     4a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
     4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
     4aa:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
			temp_buffer.data[temp_buffer.idx] = temp_reading; // guardar o valor da temperatura no buffer de dados
     4ae:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			temp_buffer.idx = (temp_buffer.idx + 1)% mem_size; // incrementar a posiçao a guardar dados
     4b2:	220a      	movs	r2, #10
     4b4:	3301      	adds	r3, #1
     4b6:	fb93 f1f2 	sdiv	r1, r3, r2
     4ba:	fb02 3311 	mls	r3, r2, r1, r3
     4be:	62bb      	str	r3, [r7, #40]	; 0x28
        fin_time = k_uptime_get();
     4c0:	f005 f809 	bl	54d6 <k_uptime_get>
        if( fin_time < release_time) {
     4c4:	42a0      	cmp	r0, r4
     4c6:	eb71 0305 	sbcs.w	r3, r1, r5
     4ca:	dacb      	bge.n	464 <thread_tempread_code+0x20>
            release_time += thread_tempread_period;
     4cc:	f241 3388 	movw	r3, #5000	; 0x1388
     4d0:	18e7      	adds	r7, r4, r3
            k_msleep(release_time - fin_time); /* There are other variants, k_sleep(), k_usleep(), ... */
     4d2:	eba4 0000 	sub.w	r0, r4, r0
            release_time += thread_tempread_period;
     4d6:	f145 0500 	adc.w	r5, r5, #0
     4da:	463c      	mov	r4, r7
            k_msleep(release_time - fin_time); /* There are other variants, k_sleep(), k_usleep(), ... */
     4dc:	f005 f809 	bl	54f2 <k_msleep.isra.0>
	while(1){
     4e0:	e7c0      	b.n	464 <thread_tempread_code+0x20>
			printk("%d \n", temp_reading);
     4e2:	480a      	ldr	r0, [pc, #40]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     4e4:	f005 f838 	bl	5558 <printk>
			temp_buffer.data[temp_buffer.idx] = temp_reading; // guardar o valor da temperatura no buffer de dados
     4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
     4ea:	f89d 2003 	ldrb.w	r2, [sp, #3]
     4ee:	e7de      	b.n	4ae <thread_tempread_code+0x6a>
     4f0:	0000680f 	.word	0x0000680f
     4f4:	200003f8 	.word	0x200003f8
     4f8:	000063f4 	.word	0x000063f4
     4fc:	20000d20 	.word	0x20000d20
     500:	00006830 	.word	0x00006830
     504:	200003fc 	.word	0x200003fc
     508:	00006869 	.word	0x00006869
     50c:	0000686a 	.word	0x0000686a

00000510 <main>:
{
     510:	b5f0      	push	{r4, r5, r6, r7, lr}
     512:	b08d      	sub	sp, #52	; 0x34
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     514:	4c28      	ldr	r4, [pc, #160]	; (5b8 <main+0xa8>)
     516:	4620      	mov	r0, r4
     518:	f005 fd81 	bl	601e <z_device_is_ready>
	printk("I2C bus %s is not ready!\n\r",dev_i2c.bus->name);
     51c:	6821      	ldr	r1, [r4, #0]
	if (!device_is_ready(dev_i2c.bus)) {
     51e:	b928      	cbnz	r0, 52c <main+0x1c>
	printk("I2C bus %s is not ready!\n\r",dev_i2c.bus->name);
     520:	4826      	ldr	r0, [pc, #152]	; (5bc <main+0xac>)
}
     522:	b00d      	add	sp, #52	; 0x34
     524:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	printk("I2C bus %s is not ready!\n\r",dev_i2c.bus->name);
     528:	f005 b816 	b.w	5558 <printk>
	ret = i2c_write_dt(&dev_i2c, config, sizeof(config));
     52c:	4d24      	ldr	r5, [pc, #144]	; (5c0 <main+0xb0>)
		printk("I2C bus %s is ready!\n\r",dev_i2c.bus->name);
     52e:	4825      	ldr	r0, [pc, #148]	; (5c4 <main+0xb4>)
     530:	f005 f812 	bl	5558 <printk>
	ret = i2c_write_dt(&dev_i2c, config, sizeof(config));
     534:	782b      	ldrb	r3, [r5, #0]
     536:	9309      	str	r3, [sp, #36]	; 0x24
	msg.len = num_bytes;
     538:	2201      	movs	r2, #1
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     53a:	2302      	movs	r3, #2
	msg.len = num_bytes;
     53c:	920a      	str	r2, [sp, #40]	; 0x28
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     53e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     542:	68a3      	ldr	r3, [r4, #8]
     544:	4620      	mov	r0, r4
     546:	689e      	ldr	r6, [r3, #8]
     548:	a909      	add	r1, sp, #36	; 0x24
     54a:	234d      	movs	r3, #77	; 0x4d
     54c:	47b0      	blx	r6
     54e:	4b1e      	ldr	r3, [pc, #120]	; (5c8 <main+0xb8>)
     550:	4604      	mov	r4, r0
     552:	6018      	str	r0, [r3, #0]
	if(ret != 0){
     554:	b138      	cbz	r0, 566 <main+0x56>
		printk("Failed to write to I2C device address %x at Reg. %x \n", dev_i2c.addr,config);
     556:	782a      	ldrb	r2, [r5, #0]
     558:	481c      	ldr	r0, [pc, #112]	; (5cc <main+0xbc>)
     55a:	214d      	movs	r1, #77	; 0x4d
}
     55c:	b00d      	add	sp, #52	; 0x34
     55e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		printk("Failed to write to I2C device address %x at Reg. %x \n", dev_i2c.addr,config);
     562:	f004 bff9 	b.w	5558 <printk>
	timing_init();
     566:	f001 fe07 	bl	2178 <timing_init>
	timing_start();
     56a:	2600      	movs	r6, #0
     56c:	f001 fe10 	bl	2190 <timing_start>
	thread_tempread_tid = k_thread_create(&thread_tempread_data, thread_tempread_stack,
     570:	2700      	movs	r7, #0
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     572:	2503      	movs	r5, #3
     574:	e9cd 6706 	strd	r6, r7, [sp, #24]
     578:	e9cd 4502 	strd	r4, r5, [sp, #8]
     57c:	e9cd 4400 	strd	r4, r4, [sp]
     580:	4b13      	ldr	r3, [pc, #76]	; (5d0 <main+0xc0>)
     582:	4914      	ldr	r1, [pc, #80]	; (5d4 <main+0xc4>)
     584:	9404      	str	r4, [sp, #16]
     586:	f44f 6280 	mov.w	r2, #1024	; 0x400
     58a:	4813      	ldr	r0, [pc, #76]	; (5d8 <main+0xc8>)
     58c:	f003 ff7e 	bl	448c <z_impl_k_thread_create>
     590:	4b12      	ldr	r3, [pc, #72]	; (5dc <main+0xcc>)
     592:	6018      	str	r0, [r3, #0]
     594:	4b12      	ldr	r3, [pc, #72]	; (5e0 <main+0xd0>)
     596:	4913      	ldr	r1, [pc, #76]	; (5e4 <main+0xd4>)
     598:	9400      	str	r4, [sp, #0]
     59a:	e9cd 6706 	strd	r6, r7, [sp, #24]
     59e:	e9cd 5403 	strd	r5, r4, [sp, #12]
     5a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
     5a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
     5aa:	480f      	ldr	r0, [pc, #60]	; (5e8 <main+0xd8>)
     5ac:	f003 ff6e 	bl	448c <z_impl_k_thread_create>
	thread_print_tid = k_thread_create(&thread_print_data, thread_print_stack,
     5b0:	4b0e      	ldr	r3, [pc, #56]	; (5ec <main+0xdc>)
     5b2:	6018      	str	r0, [r3, #0]
}
     5b4:	b00d      	add	sp, #52	; 0x34
     5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5b8:	000063f4 	.word	0x000063f4
     5bc:	0000686f 	.word	0x0000686f
     5c0:	20000d20 	.word	0x20000d20
     5c4:	0000688a 	.word	0x0000688a
     5c8:	200003f8 	.word	0x200003f8
     5cc:	000068a1 	.word	0x000068a1
     5d0:	00000445 	.word	0x00000445
     5d4:	20001140 	.word	0x20001140
     5d8:	20000250 	.word	0x20000250
     5dc:	2000042c 	.word	0x2000042c
     5e0:	000003dd 	.word	0x000003dd
     5e4:	20001560 	.word	0x20001560
     5e8:	200001d0 	.word	0x200001d0
     5ec:	20000428 	.word	0x20000428

000005f0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     5f0:	680b      	ldr	r3, [r1, #0]
     5f2:	3301      	adds	r3, #1
     5f4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     5f6:	4b01      	ldr	r3, [pc, #4]	; (5fc <char_out+0xc>)
     5f8:	681b      	ldr	r3, [r3, #0]
     5fa:	4718      	bx	r3
     5fc:	20000000 	.word	0x20000000

00000600 <__printk_hook_install>:
	_char_out = fn;
     600:	4b01      	ldr	r3, [pc, #4]	; (608 <__printk_hook_install+0x8>)
     602:	6018      	str	r0, [r3, #0]
}
     604:	4770      	bx	lr
     606:	bf00      	nop
     608:	20000000 	.word	0x20000000

0000060c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     60c:	b507      	push	{r0, r1, r2, lr}
     60e:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     610:	2100      	movs	r1, #0
{
     612:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     614:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     616:	4803      	ldr	r0, [pc, #12]	; (624 <vprintk+0x18>)
     618:	a901      	add	r1, sp, #4
     61a:	f000 f8e5 	bl	7e8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     61e:	b003      	add	sp, #12
     620:	f85d fb04 	ldr.w	pc, [sp], #4
     624:	000005f1 	.word	0x000005f1

00000628 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     62c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     630:	f019 0808 	ands.w	r8, r9, #8
{
     634:	4604      	mov	r4, r0
     636:	4693      	mov	fp, r2
	if (processing) {
     638:	d00d      	beq.n	656 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     63a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     63c:	bf0c      	ite	eq
     63e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     642:	f049 0920 	orrne.w	r9, r9, #32
     646:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     64a:	f38b 8811 	msr	BASEPRI, fp
     64e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     656:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     65a:	2902      	cmp	r1, #2
     65c:	d107      	bne.n	66e <process_event+0x46>
			evt = process_recheck(mgr);
     65e:	4620      	mov	r0, r4
     660:	f004 ff87 	bl	5572 <process_recheck>
		if (evt == EVT_NOP) {
     664:	2800      	cmp	r0, #0
     666:	d0f0      	beq.n	64a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     668:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     66a:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     66c:	d14e      	bne.n	70c <process_event+0xe4>
			res = mgr->last_res;
     66e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     670:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     672:	2f00      	cmp	r7, #0
     674:	da15      	bge.n	6a2 <process_event+0x7a>
		*clients = mgr->clients;
     676:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     678:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     67c:	e9c4 8800 	strd	r8, r8, [r4]
     680:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     684:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     686:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     688:	8b21      	ldrh	r1, [r4, #24]
     68a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     68e:	45ca      	cmp	sl, r9
     690:	d002      	beq.n	698 <process_event+0x70>
		if (do_monitors
     692:	68a3      	ldr	r3, [r4, #8]
     694:	2b00      	cmp	r3, #0
     696:	d15a      	bne.n	74e <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     698:	b90d      	cbnz	r5, 69e <process_event+0x76>
		    || (transit != NULL)) {
     69a:	2e00      	cmp	r6, #0
     69c:	d071      	beq.n	782 <process_event+0x15a>
     69e:	2300      	movs	r3, #0
     6a0:	e056      	b.n	750 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     6a2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     6a6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     6a8:	2a01      	cmp	r2, #1
     6aa:	d81e      	bhi.n	6ea <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6ac:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     6b0:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     6b2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6b4:	b289      	uxth	r1, r1
     6b6:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     6ba:	d10a      	bne.n	6d2 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6bc:	b13d      	cbz	r5, 6ce <process_event+0xa6>
     6be:	8b63      	ldrh	r3, [r4, #26]
     6c0:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     6c2:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     6c4:	3301      	adds	r3, #1
     6c6:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6c8:	2a00      	cmp	r2, #0
     6ca:	d1fa      	bne.n	6c2 <process_event+0x9a>
     6cc:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6ce:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     6d2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     6d4:	4620      	mov	r0, r4
     6d6:	f004 ff4c 	bl	5572 <process_recheck>
     6da:	4606      	mov	r6, r0
     6dc:	2800      	cmp	r0, #0
     6de:	d0d3      	beq.n	688 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6e0:	8b23      	ldrh	r3, [r4, #24]
     6e2:	f043 0320 	orr.w	r3, r3, #32
     6e6:	8323      	strh	r3, [r4, #24]
     6e8:	e7cd      	b.n	686 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     6ea:	2b04      	cmp	r3, #4
     6ec:	d10c      	bne.n	708 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6ee:	f021 0107 	bic.w	r1, r1, #7
     6f2:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     6f4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     6f6:	4620      	mov	r0, r4
     6f8:	f004 ff3b 	bl	5572 <process_recheck>
     6fc:	4605      	mov	r5, r0
     6fe:	2800      	cmp	r0, #0
     700:	d0c1      	beq.n	686 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     702:	f041 0120 	orr.w	r1, r1, #32
     706:	8321      	strh	r1, [r4, #24]
     708:	2500      	movs	r5, #0
     70a:	e7bc      	b.n	686 <process_event+0x5e>
		} else if (evt == EVT_START) {
     70c:	2803      	cmp	r0, #3
     70e:	d109      	bne.n	724 <process_event+0xfc>
			transit = mgr->transitions->start;
     710:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     712:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     716:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     718:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     71c:	8323      	strh	r3, [r4, #24]
}
     71e:	2500      	movs	r5, #0
		res = 0;
     720:	462f      	mov	r7, r5
     722:	e7b1      	b.n	688 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     724:	2804      	cmp	r0, #4
     726:	d106      	bne.n	736 <process_event+0x10e>
			transit = mgr->transitions->stop;
     728:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     72a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     72e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     730:	f043 0304 	orr.w	r3, r3, #4
     734:	e7f2      	b.n	71c <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     736:	2805      	cmp	r0, #5
     738:	d106      	bne.n	748 <process_event+0x120>
			transit = mgr->transitions->reset;
     73a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     73c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     740:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     742:	f043 0305 	orr.w	r3, r3, #5
     746:	e7e9      	b.n	71c <process_event+0xf4>
     748:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     74a:	462e      	mov	r6, r5
     74c:	e7e8      	b.n	720 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     74e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     750:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     754:	8321      	strh	r1, [r4, #24]
     756:	f38b 8811 	msr	BASEPRI, fp
     75a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     75e:	b9fb      	cbnz	r3, 7a0 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     760:	bb85      	cbnz	r5, 7c4 <process_event+0x19c>
			if (transit != NULL) {
     762:	b116      	cbz	r6, 76a <process_event+0x142>
				transit(mgr, transition_complete);
     764:	491f      	ldr	r1, [pc, #124]	; (7e4 <process_event+0x1bc>)
     766:	4620      	mov	r0, r4
     768:	47b0      	blx	r6
	__asm__ volatile(
     76a:	f04f 0320 	mov.w	r3, #32
     76e:	f3ef 8b11 	mrs	fp, BASEPRI
     772:	f383 8812 	msr	BASEPRI_MAX, r3
     776:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     77a:	8b23      	ldrh	r3, [r4, #24]
     77c:	f023 0308 	bic.w	r3, r3, #8
     780:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     782:	8b23      	ldrh	r3, [r4, #24]
     784:	06da      	lsls	r2, r3, #27
     786:	d525      	bpl.n	7d4 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     788:	f023 0310 	bic.w	r3, r3, #16
     78c:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     78e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     790:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     794:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     798:	2900      	cmp	r1, #0
     79a:	f47f af5e 	bne.w	65a <process_event+0x32>
out:
     79e:	e754      	b.n	64a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     7a0:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     7a2:	2900      	cmp	r1, #0
     7a4:	d0dc      	beq.n	760 <process_event+0x138>
	return node->next;
     7a6:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     7aa:	f8d1 b004 	ldr.w	fp, [r1, #4]
     7ae:	463b      	mov	r3, r7
     7b0:	4652      	mov	r2, sl
     7b2:	4620      	mov	r0, r4
     7b4:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     7b6:	f1b9 0f00 	cmp.w	r9, #0
     7ba:	d0d1      	beq.n	760 <process_event+0x138>
     7bc:	4649      	mov	r1, r9
     7be:	f8d9 9000 	ldr.w	r9, [r9]
     7c2:	e7f2      	b.n	7aa <process_event+0x182>
     7c4:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     7c6:	463b      	mov	r3, r7
     7c8:	4652      	mov	r2, sl
     7ca:	4620      	mov	r0, r4
     7cc:	682d      	ldr	r5, [r5, #0]
     7ce:	f004 feec 	bl	55aa <notify_one>
     7d2:	e7c5      	b.n	760 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     7d4:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     7d8:	bf1e      	ittt	ne
     7da:	f023 0320 	bicne.w	r3, r3, #32
     7de:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     7e0:	2102      	movne	r1, #2
     7e2:	e7d5      	b.n	790 <process_event+0x168>
     7e4:	000055d7 	.word	0x000055d7

000007e8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7ec:	4681      	mov	r9, r0
     7ee:	b09b      	sub	sp, #108	; 0x6c
     7f0:	468a      	mov	sl, r1
     7f2:	4615      	mov	r5, r2
     7f4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     7f6:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     7f8:	7828      	ldrb	r0, [r5, #0]
     7fa:	b910      	cbnz	r0, 802 <CONFIG_ISR_STACK_SIZE+0x2>
			OUTC(' ');
			--width;
		}
	}

	return count;
     7fc:	4630      	mov	r0, r6
     7fe:	f000 bdee 	b.w	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
			OUTC(*fp++);
     802:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
     804:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     806:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
     808:	d006      	beq.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
			OUTC(*fp++);
     80a:	4651      	mov	r1, sl
			OUTC('%');
     80c:	47c8      	blx	r9
     80e:	2800      	cmp	r0, #0
     810:	f2c0 85e5 	blt.w	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
     814:	3601      	adds	r6, #1
		if (bps == NULL) {
     816:	e24c      	b.n	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
		} state = {
     818:	2218      	movs	r2, #24
     81a:	2100      	movs	r1, #0
     81c:	a80c      	add	r0, sp, #48	; 0x30
     81e:	f005 f823 	bl	5868 <memset>
	if (*sp == '%') {
     822:	786b      	ldrb	r3, [r5, #1]
     824:	2b25      	cmp	r3, #37	; 0x25
     826:	d07c      	beq.n	922 <CONFIG_ISR_STACK_SIZE+0x122>
     828:	2200      	movs	r2, #0
     82a:	1c68      	adds	r0, r5, #1
     82c:	4696      	mov	lr, r2
     82e:	4690      	mov	r8, r2
     830:	4694      	mov	ip, r2
     832:	4617      	mov	r7, r2
     834:	4601      	mov	r1, r0
		switch (*sp) {
     836:	f810 3b01 	ldrb.w	r3, [r0], #1
     83a:	2b2b      	cmp	r3, #43	; 0x2b
     83c:	f000 80a0 	beq.w	980 <CONFIG_ISR_STACK_SIZE+0x180>
     840:	f200 8097 	bhi.w	972 <CONFIG_ISR_STACK_SIZE+0x172>
     844:	2b20      	cmp	r3, #32
     846:	f000 809e 	beq.w	986 <CONFIG_ISR_STACK_SIZE+0x186>
     84a:	2b23      	cmp	r3, #35	; 0x23
     84c:	f000 809e 	beq.w	98c <CONFIG_ISR_STACK_SIZE+0x18c>
     850:	b12f      	cbz	r7, 85e <CONFIG_ISR_STACK_SIZE+0x5e>
     852:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
     856:	f040 0004 	orr.w	r0, r0, #4
     85a:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
     85e:	f1bc 0f00 	cmp.w	ip, #0
     862:	d005      	beq.n	870 <CONFIG_ISR_STACK_SIZE+0x70>
     864:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
     868:	f040 0008 	orr.w	r0, r0, #8
     86c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
     870:	f1b8 0f00 	cmp.w	r8, #0
     874:	d005      	beq.n	882 <CONFIG_ISR_STACK_SIZE+0x82>
     876:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
     87a:	f040 0010 	orr.w	r0, r0, #16
     87e:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
     882:	f1be 0f00 	cmp.w	lr, #0
     886:	d005      	beq.n	894 <CONFIG_ISR_STACK_SIZE+0x94>
     888:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
     88c:	f040 0020 	orr.w	r0, r0, #32
     890:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
     894:	b12a      	cbz	r2, 8a2 <CONFIG_ISR_STACK_SIZE+0xa2>
     896:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
     89a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     89e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
     8a2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
     8a6:	f002 0044 	and.w	r0, r2, #68	; 0x44
     8aa:	2844      	cmp	r0, #68	; 0x44
     8ac:	d103      	bne.n	8b6 <CONFIG_ISR_STACK_SIZE+0xb6>
		conv->flag_zero = false;
     8ae:	f36f 1286 	bfc	r2, #6, #1
     8b2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
     8b6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
     8ba:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     8bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     8c0:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
     8c4:	d17e      	bne.n	9c4 <CONFIG_ISR_STACK_SIZE+0x1c4>
		conv->width_star = true;
     8c6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     8ca:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     8ce:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     8d0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
     8d4:	781a      	ldrb	r2, [r3, #0]
     8d6:	2a2e      	cmp	r2, #46	; 0x2e
     8d8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     8dc:	bf0c      	ite	eq
     8de:	2101      	moveq	r1, #1
     8e0:	2100      	movne	r1, #0
     8e2:	f361 0241 	bfi	r2, r1, #1, #1
     8e6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
     8ea:	d177      	bne.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
	if (*sp == '*') {
     8ec:	785a      	ldrb	r2, [r3, #1]
     8ee:	2a2a      	cmp	r2, #42	; 0x2a
     8f0:	d06d      	beq.n	9ce <CONFIG_ISR_STACK_SIZE+0x1ce>
	++sp;
     8f2:	3301      	adds	r3, #1
	size_t val = 0;
     8f4:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     8f6:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     8fa:	4618      	mov	r0, r3
     8fc:	f810 2b01 	ldrb.w	r2, [r0], #1
     900:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     904:	2f09      	cmp	r7, #9
     906:	f240 80ab 	bls.w	a60 <CONFIG_ISR_STACK_SIZE+0x260>
	conv->unsupported |= ((conv->prec_value < 0)
     90a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
     90e:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
     910:	f3c2 0040 	ubfx	r0, r2, #1, #1
     914:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     918:	f361 0241 	bfi	r2, r1, #1, #1
     91c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
     920:	e05c      	b.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
		conv->specifier = *sp++;
     922:	1caa      	adds	r2, r5, #2
     924:	9202      	str	r2, [sp, #8]
     926:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
     92a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
     92e:	07df      	lsls	r7, r3, #31
     930:	f140 8173 	bpl.w	c1a <CONFIG_ISR_STACK_SIZE+0x41a>
			width = va_arg(ap, int);
     934:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
     938:	f1bb 0f00 	cmp.w	fp, #0
     93c:	da07      	bge.n	94e <CONFIG_ISR_STACK_SIZE+0x14e>
				conv->flag_dash = true;
     93e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
     942:	f042 0204 	orr.w	r2, r2, #4
     946:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
     94a:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
     94e:	0758      	lsls	r0, r3, #29
     950:	f140 816c 	bpl.w	c2c <CONFIG_ISR_STACK_SIZE+0x42c>
			int arg = va_arg(ap, int);
     954:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     958:	f1b8 0f00 	cmp.w	r8, #0
     95c:	f280 816b 	bge.w	c36 <CONFIG_ISR_STACK_SIZE+0x436>
				conv->prec_present = false;
     960:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
     964:	f36f 0341 	bfc	r3, #1, #1
     968:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
     96c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     970:	e161      	b.n	c36 <CONFIG_ISR_STACK_SIZE+0x436>
		switch (*sp) {
     972:	2b2d      	cmp	r3, #45	; 0x2d
     974:	d00d      	beq.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
     976:	2b30      	cmp	r3, #48	; 0x30
     978:	f47f af6a 	bne.w	850 <CONFIG_ISR_STACK_SIZE+0x50>
			conv->flag_zero = true;
     97c:	2201      	movs	r2, #1
	} while (loop);
     97e:	e759      	b.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
			conv->flag_plus = true;
     980:	f04f 0c01 	mov.w	ip, #1
     984:	e756      	b.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
			conv->flag_space = true;
     986:	f04f 0801 	mov.w	r8, #1
     98a:	e753      	b.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
			conv->flag_hash = true;
     98c:	f04f 0e01 	mov.w	lr, #1
     990:	e750      	b.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
		switch (*sp) {
     992:	2701      	movs	r7, #1
     994:	e74e      	b.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
		val = 10U * val + *sp++ - '0';
     996:	fb0c 7202 	mla	r2, ip, r2, r7
     99a:	3a30      	subs	r2, #48	; 0x30
     99c:	4603      	mov	r3, r0
     99e:	4618      	mov	r0, r3
     9a0:	f810 7b01 	ldrb.w	r7, [r0], #1
     9a4:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     9a8:	f1be 0f09 	cmp.w	lr, #9
     9ac:	d9f3      	bls.n	996 <CONFIG_ISR_STACK_SIZE+0x196>
	if (sp != wp) {
     9ae:	4299      	cmp	r1, r3
     9b0:	d090      	beq.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
		conv->unsupported |= ((conv->width_value < 0)
     9b2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
     9b6:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
     9b8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     9ba:	f362 0141 	bfi	r1, r2, #1, #1
     9be:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
     9c2:	e787      	b.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     9c4:	460b      	mov	r3, r1
	size_t val = 0;
     9c6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     9c8:	f04f 0c0a 	mov.w	ip, #10
     9cc:	e7e7      	b.n	99e <CONFIG_ISR_STACK_SIZE+0x19e>
		conv->prec_star = true;
     9ce:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     9d2:	f042 0204 	orr.w	r2, r2, #4
     9d6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
     9da:	3302      	adds	r3, #2
	switch (*sp) {
     9dc:	4619      	mov	r1, r3
     9de:	f811 2b01 	ldrb.w	r2, [r1], #1
     9e2:	2a6c      	cmp	r2, #108	; 0x6c
     9e4:	d05c      	beq.n	aa0 <CONFIG_ISR_STACK_SIZE+0x2a0>
     9e6:	d840      	bhi.n	a6a <CONFIG_ISR_STACK_SIZE+0x26a>
     9e8:	2a68      	cmp	r2, #104	; 0x68
     9ea:	d046      	beq.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
     9ec:	2a6a      	cmp	r2, #106	; 0x6a
     9ee:	d061      	beq.n	ab4 <CONFIG_ISR_STACK_SIZE+0x2b4>
     9f0:	2a4c      	cmp	r2, #76	; 0x4c
     9f2:	d067      	beq.n	ac4 <CONFIG_ISR_STACK_SIZE+0x2c4>
     9f4:	4619      	mov	r1, r3
	conv->specifier = *sp++;
     9f6:	460b      	mov	r3, r1
     9f8:	f813 2b01 	ldrb.w	r2, [r3], #1
     9fc:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
     9fe:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     a00:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
     a04:	f200 80df 	bhi.w	bc6 <CONFIG_ISR_STACK_SIZE+0x3c6>
     a08:	2a57      	cmp	r2, #87	; 0x57
     a0a:	d868      	bhi.n	ade <CONFIG_ISR_STACK_SIZE+0x2de>
     a0c:	2a41      	cmp	r2, #65	; 0x41
     a0e:	d004      	beq.n	a1a <CONFIG_ISR_STACK_SIZE+0x21a>
     a10:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
     a14:	2b02      	cmp	r3, #2
     a16:	f200 80d6 	bhi.w	bc6 <CONFIG_ISR_STACK_SIZE+0x3c6>
		conv->specifier_cat = SPECIFIER_FP;
     a1a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
     a1e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
     a22:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
     a24:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
     a28:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
     a2c:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
     a30:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
     a34:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
     a38:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
     a3c:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
     a40:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
     a42:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
     a46:	b2cb      	uxtb	r3, r1
     a48:	f100 80e5 	bmi.w	c16 <CONFIG_ISR_STACK_SIZE+0x416>
		if (conv->length_mod == LENGTH_L) {
     a4c:	f003 0278 	and.w	r2, r3, #120	; 0x78
     a50:	2a18      	cmp	r2, #24
     a52:	f040 80b5 	bne.w	bc0 <CONFIG_ISR_STACK_SIZE+0x3c0>
			conv->length_mod = LENGTH_NONE;
     a56:	f36f 03c6 	bfc	r3, #3, #4
     a5a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
     a5e:	e09c      	b.n	b9a <CONFIG_ISR_STACK_SIZE+0x39a>
		val = 10U * val + *sp++ - '0';
     a60:	fb0c 2101 	mla	r1, ip, r1, r2
     a64:	3930      	subs	r1, #48	; 0x30
     a66:	4603      	mov	r3, r0
     a68:	e747      	b.n	8fa <CONFIG_ISR_STACK_SIZE+0xfa>
	switch (*sp) {
     a6a:	2a74      	cmp	r2, #116	; 0x74
     a6c:	d026      	beq.n	abc <CONFIG_ISR_STACK_SIZE+0x2bc>
     a6e:	2a7a      	cmp	r2, #122	; 0x7a
     a70:	d1c0      	bne.n	9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>
		conv->length_mod = LENGTH_Z;
     a72:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
     a76:	2206      	movs	r2, #6
     a78:	e00d      	b.n	a96 <CONFIG_ISR_STACK_SIZE+0x296>
		if (*++sp == 'h') {
     a7a:	785a      	ldrb	r2, [r3, #1]
     a7c:	2a68      	cmp	r2, #104	; 0x68
     a7e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     a82:	d106      	bne.n	a92 <CONFIG_ISR_STACK_SIZE+0x292>
			conv->length_mod = LENGTH_HH;
     a84:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     a86:	f361 02c6 	bfi	r2, r1, #3, #4
     a8a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
     a8e:	1c99      	adds	r1, r3, #2
     a90:	e7b1      	b.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
			conv->length_mod = LENGTH_H;
     a92:	4613      	mov	r3, r2
     a94:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     a96:	f362 03c6 	bfi	r3, r2, #3, #4
     a9a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
     a9e:	e7aa      	b.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
		if (*++sp == 'l') {
     aa0:	785a      	ldrb	r2, [r3, #1]
     aa2:	2a6c      	cmp	r2, #108	; 0x6c
     aa4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
     aa8:	d101      	bne.n	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
			conv->length_mod = LENGTH_LL;
     aaa:	2104      	movs	r1, #4
     aac:	e7eb      	b.n	a86 <CONFIG_ISR_STACK_SIZE+0x286>
			conv->length_mod = LENGTH_L;
     aae:	4613      	mov	r3, r2
     ab0:	2203      	movs	r2, #3
     ab2:	e7f0      	b.n	a96 <CONFIG_ISR_STACK_SIZE+0x296>
		conv->length_mod = LENGTH_J;
     ab4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
     ab8:	2205      	movs	r2, #5
     aba:	e7ec      	b.n	a96 <CONFIG_ISR_STACK_SIZE+0x296>
		conv->length_mod = LENGTH_T;
     abc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
     ac0:	2207      	movs	r2, #7
     ac2:	e7e8      	b.n	a96 <CONFIG_ISR_STACK_SIZE+0x296>
		conv->unsupported = true;
     ac4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
     ac8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     acc:	f023 0302 	bic.w	r3, r3, #2
     ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     ad4:	f043 0302 	orr.w	r3, r3, #2
     ad8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
     adc:	e78b      	b.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
	switch (conv->specifier) {
     ade:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
     ae2:	2b20      	cmp	r3, #32
     ae4:	d86f      	bhi.n	bc6 <CONFIG_ISR_STACK_SIZE+0x3c6>
     ae6:	a101      	add	r1, pc, #4	; (adr r1, aec <CONFIG_ISR_STACK_SIZE+0x2ec>)
     ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     aec:	00000b9f 	.word	0x00000b9f
     af0:	00000bc7 	.word	0x00000bc7
     af4:	00000bc7 	.word	0x00000bc7
     af8:	00000bc7 	.word	0x00000bc7
     afc:	00000bc7 	.word	0x00000bc7
     b00:	00000bc7 	.word	0x00000bc7
     b04:	00000bc7 	.word	0x00000bc7
     b08:	00000bc7 	.word	0x00000bc7
     b0c:	00000bc7 	.word	0x00000bc7
     b10:	00000a1b 	.word	0x00000a1b
     b14:	00000bc7 	.word	0x00000bc7
     b18:	00000b9f 	.word	0x00000b9f
     b1c:	00000b71 	.word	0x00000b71
     b20:	00000a1b 	.word	0x00000a1b
     b24:	00000a1b 	.word	0x00000a1b
     b28:	00000a1b 	.word	0x00000a1b
     b2c:	00000bc7 	.word	0x00000bc7
     b30:	00000b71 	.word	0x00000b71
     b34:	00000bc7 	.word	0x00000bc7
     b38:	00000bc7 	.word	0x00000bc7
     b3c:	00000bc7 	.word	0x00000bc7
     b40:	00000bc7 	.word	0x00000bc7
     b44:	00000bd5 	.word	0x00000bd5
     b48:	00000b9f 	.word	0x00000b9f
     b4c:	00000bf9 	.word	0x00000bf9
     b50:	00000bc7 	.word	0x00000bc7
     b54:	00000bc7 	.word	0x00000bc7
     b58:	00000bf9 	.word	0x00000bf9
     b5c:	00000bc7 	.word	0x00000bc7
     b60:	00000b9f 	.word	0x00000b9f
     b64:	00000bc7 	.word	0x00000bc7
     b68:	00000bc7 	.word	0x00000bc7
     b6c:	00000b9f 	.word	0x00000b9f
		conv->specifier_cat = SPECIFIER_SINT;
     b70:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
     b74:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
     b76:	f361 0302 	bfi	r3, r1, #0, #3
     b7a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
     b7e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
     b82:	f003 0378 	and.w	r3, r3, #120	; 0x78
     b86:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
     b88:	bf02      	ittt	eq
     b8a:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
     b8e:	f041 0101 	orreq.w	r1, r1, #1
     b92:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
     b96:	2a63      	cmp	r2, #99	; 0x63
     b98:	d005      	beq.n	ba6 <CONFIG_ISR_STACK_SIZE+0x3a6>
	bool unsupported = false;
     b9a:	2300      	movs	r3, #0
     b9c:	e006      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
		conv->specifier_cat = SPECIFIER_UINT;
     b9e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
     ba2:	2102      	movs	r1, #2
     ba4:	e7e7      	b.n	b76 <CONFIG_ISR_STACK_SIZE+0x376>
			unsupported = (conv->length_mod != LENGTH_NONE);
     ba6:	3b00      	subs	r3, #0
     ba8:	bf18      	it	ne
     baa:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     bac:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
     bb0:	f3c2 0140 	ubfx	r1, r2, #1, #1
     bb4:	430b      	orrs	r3, r1
     bb6:	f363 0241 	bfi	r2, r3, #1, #1
     bba:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
     bbe:	e6b4      	b.n	92a <CONFIG_ISR_STACK_SIZE+0x12a>
		} else if ((conv->length_mod != LENGTH_NONE)
     bc0:	f013 0f38 	tst.w	r3, #56	; 0x38
     bc4:	d0e9      	beq.n	b9a <CONFIG_ISR_STACK_SIZE+0x39a>
			conv->invalid = true;
     bc6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
     bca:	f043 0301 	orr.w	r3, r3, #1
     bce:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
     bd2:	e7e2      	b.n	b9a <CONFIG_ISR_STACK_SIZE+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
     bd4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
     bd8:	2203      	movs	r2, #3
     bda:	f362 0302 	bfi	r3, r2, #0, #3
     bde:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
     be2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
     be6:	f003 0378 	and.w	r3, r3, #120	; 0x78
     bea:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
     bee:	f1dc 0300 	rsbs	r3, ip, #0
     bf2:	eb43 030c 	adc.w	r3, r3, ip
     bf6:	e7d9      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
     bf8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
     bfc:	2203      	movs	r2, #3
     bfe:	f362 0302 	bfi	r3, r2, #0, #3
     c02:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
     c06:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
     c0a:	f013 0f78 	tst.w	r3, #120	; 0x78
     c0e:	bf14      	ite	ne
     c10:	2301      	movne	r3, #1
     c12:	2300      	moveq	r3, #0
     c14:	e7ca      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
			unsupported = true;
     c16:	2301      	movs	r3, #1
     c18:	e7c8      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
		} else if (conv->width_present) {
     c1a:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
     c1e:	2a00      	cmp	r2, #0
			width = conv->width_value;
     c20:	bfb4      	ite	lt
     c22:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
     c26:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
     c2a:	e690      	b.n	94e <CONFIG_ISR_STACK_SIZE+0x14e>
		} else if (conv->prec_present) {
     c2c:	0799      	lsls	r1, r3, #30
     c2e:	f57f ae9d 	bpl.w	96c <CONFIG_ISR_STACK_SIZE+0x16c>
			precision = conv->prec_value;
     c32:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
     c36:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
     c3a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     c3c:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
     c40:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
     c44:	f003 0207 	and.w	r2, r3, #7
     c48:	2a04      	cmp	r2, #4
     c4a:	d109      	bne.n	c60 <CONFIG_ISR_STACK_SIZE+0x460>
		    && !conv->prec_present) {
     c4c:	078a      	lsls	r2, r1, #30
     c4e:	d407      	bmi.n	c60 <CONFIG_ISR_STACK_SIZE+0x460>
			if (conv->specifier_a) {
     c50:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
     c54:	2a00      	cmp	r2, #0
     c56:	bfb4      	ite	lt
     c58:	f04f 080d 	movlt.w	r8, #13
     c5c:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
     c60:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     c64:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     c66:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     c6a:	d137      	bne.n	cdc <CONFIG_ISR_STACK_SIZE+0x4dc>
			switch (length_mod) {
     c6c:	1ecb      	subs	r3, r1, #3
     c6e:	2b04      	cmp	r3, #4
     c70:	d821      	bhi.n	cb6 <CONFIG_ISR_STACK_SIZE+0x4b6>
     c72:	e8df f003 	tbb	[pc, r3]
     c76:	0903      	.short	0x0903
     c78:	2009      	.short	0x2009
     c7a:	20          	.byte	0x20
     c7b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     c7c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     c80:	17da      	asrs	r2, r3, #31
     c82:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
     c86:	e006      	b.n	c96 <CONFIG_ISR_STACK_SIZE+0x496>
					(sint_value_type)va_arg(ap, intmax_t);
     c88:	3407      	adds	r4, #7
     c8a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     c8e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     c92:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
     c96:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
     c9a:	07bb      	lsls	r3, r7, #30
     c9c:	d056      	beq.n	d4c <CONFIG_ISR_STACK_SIZE+0x54c>
			OUTS(sp, fp);
     c9e:	9b02      	ldr	r3, [sp, #8]
     ca0:	462a      	mov	r2, r5
     ca2:	4651      	mov	r1, sl
     ca4:	4648      	mov	r0, r9
     ca6:	f004 fd8e 	bl	57c6 <outs>
     caa:	2800      	cmp	r0, #0
     cac:	f2c0 8397 	blt.w	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
     cb0:	4406      	add	r6, r0
			while (pad_len-- > 0) {
     cb2:	9d02      	ldr	r5, [sp, #8]
     cb4:	e5a0      	b.n	7f8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     cb6:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     cba:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     cbc:	ea4f 72e3 	mov.w	r2, r3, asr #31
     cc0:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
     cc4:	d105      	bne.n	cd2 <CONFIG_ISR_STACK_SIZE+0x4d2>
				value->uint = (unsigned char)value->uint;
     cc6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
     cca:	930c      	str	r3, [sp, #48]	; 0x30
     ccc:	2300      	movs	r3, #0
     cce:	930d      	str	r3, [sp, #52]	; 0x34
     cd0:	e7e1      	b.n	c96 <CONFIG_ISR_STACK_SIZE+0x496>
			} else if (length_mod == LENGTH_H) {
     cd2:	2902      	cmp	r1, #2
     cd4:	d1df      	bne.n	c96 <CONFIG_ISR_STACK_SIZE+0x496>
				value->sint = (short)value->sint;
     cd6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
     cda:	e7d1      	b.n	c80 <CONFIG_ISR_STACK_SIZE+0x480>
		} else if (specifier_cat == SPECIFIER_UINT) {
     cdc:	2b02      	cmp	r3, #2
     cde:	d123      	bne.n	d28 <CONFIG_ISR_STACK_SIZE+0x528>
			switch (length_mod) {
     ce0:	1ecb      	subs	r3, r1, #3
     ce2:	2b04      	cmp	r3, #4
     ce4:	d813      	bhi.n	d0e <CONFIG_ISR_STACK_SIZE+0x50e>
     ce6:	e8df f003 	tbb	[pc, r3]
     cea:	0a03      	.short	0x0a03
     cec:	120a      	.short	0x120a
     cee:	12          	.byte	0x12
     cef:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     cf0:	6822      	ldr	r2, [r4, #0]
     cf2:	920c      	str	r2, [sp, #48]	; 0x30
     cf4:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     cf6:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     cf8:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
     cfa:	4604      	mov	r4, r0
     cfc:	e7cb      	b.n	c96 <CONFIG_ISR_STACK_SIZE+0x496>
					(uint_value_type)va_arg(ap,
     cfe:	1de0      	adds	r0, r4, #7
     d00:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     d04:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     d08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
     d0c:	e7f5      	b.n	cfa <CONFIG_ISR_STACK_SIZE+0x4fa>
					(uint_value_type)va_arg(ap, size_t);
     d0e:	f854 3b04 	ldr.w	r3, [r4], #4
     d12:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
     d14:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     d16:	f04f 0300 	mov.w	r3, #0
     d1a:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
     d1c:	d0d3      	beq.n	cc6 <CONFIG_ISR_STACK_SIZE+0x4c6>
			} else if (length_mod == LENGTH_H) {
     d1e:	2902      	cmp	r1, #2
     d20:	d1b9      	bne.n	c96 <CONFIG_ISR_STACK_SIZE+0x496>
				value->uint = (unsigned short)value->uint;
     d22:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     d26:	e7d0      	b.n	cca <CONFIG_ISR_STACK_SIZE+0x4ca>
		} else if (specifier_cat == SPECIFIER_FP) {
     d28:	2b04      	cmp	r3, #4
     d2a:	d109      	bne.n	d40 <CONFIG_ISR_STACK_SIZE+0x540>
					(sint_value_type)va_arg(ap, long long);
     d2c:	1de3      	adds	r3, r4, #7
     d2e:	f023 0307 	bic.w	r3, r3, #7
     d32:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     d36:	e9d3 2300 	ldrd	r2, r3, [r3]
     d3a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
     d3e:	e7aa      	b.n	c96 <CONFIG_ISR_STACK_SIZE+0x496>
		} else if (specifier_cat == SPECIFIER_PTR) {
     d40:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     d42:	bf04      	itt	eq
     d44:	f854 3b04 	ldreq.w	r3, [r4], #4
     d48:	930c      	streq	r3, [sp, #48]	; 0x30
     d4a:	e7a4      	b.n	c96 <CONFIG_ISR_STACK_SIZE+0x496>
		switch (conv->specifier) {
     d4c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
     d50:	2a78      	cmp	r2, #120	; 0x78
     d52:	d8ae      	bhi.n	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
     d54:	2a57      	cmp	r2, #87	; 0x57
     d56:	f200 808c 	bhi.w	e72 <CONFIG_ISR_STACK_SIZE+0x672>
     d5a:	2a25      	cmp	r2, #37	; 0x25
     d5c:	f000 80d4 	beq.w	f08 <CONFIG_ISR_STACK_SIZE+0x708>
     d60:	2a24      	cmp	r2, #36	; 0x24
     d62:	d9a6      	bls.n	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
     d64:	2a41      	cmp	r2, #65	; 0x41
     d66:	d003      	beq.n	d70 <CONFIG_ISR_STACK_SIZE+0x570>
     d68:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
     d6c:	2b02      	cmp	r3, #2
     d6e:	d8a0      	bhi.n	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
	} u = {
     d70:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
     d74:	2b00      	cmp	r3, #0
     d76:	f2c0 81be 	blt.w	10f6 <CONFIG_FPROTECT_BLOCK_SIZE+0xf6>
	} else if (conv->flag_plus) {
     d7a:	0738      	lsls	r0, r7, #28
     d7c:	f100 81bd 	bmi.w	10fa <CONFIG_FPROTECT_BLOCK_SIZE+0xfa>
		*sign = ' ';
     d80:	f017 0710 	ands.w	r7, r7, #16
     d84:	bf18      	it	ne
     d86:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
     d88:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
     d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
     d90:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
     d94:	2d00      	cmp	r5, #0
     d96:	f040 81b2 	bne.w	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
     d9a:	ea51 0003 	orrs.w	r0, r1, r3
     d9e:	bf14      	ite	ne
     da0:	2001      	movne	r0, #1
     da2:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
     da4:	02db      	lsls	r3, r3, #11
     da6:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
     daa:	02c9      	lsls	r1, r1, #11
		c = 'f';
     dac:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
     dae:	ea45 0e01 	orr.w	lr, r5, r1
     db2:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
     db6:	bf08      	it	eq
     db8:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
     dba:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
     dbe:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
     dc2:	f000 8206 	beq.w	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
		if (is_subnormal) {
     dc6:	2800      	cmp	r0, #0
     dc8:	f040 81ce 	bne.w	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
		fract |= BIT_63;
     dcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
     dd0:	f04f 0c00 	mov.w	ip, #0
     dd4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
     dd8:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
     ddc:	9109      	str	r1, [sp, #36]	; 0x24
     dde:	4663      	mov	r3, ip
		fract *= 5U;
     de0:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
     de4:	f115 0f02 	cmn.w	r5, #2
     de8:	f2c0 81c5 	blt.w	1176 <CONFIG_FPROTECT_BLOCK_SIZE+0x176>
     dec:	f1bc 0f00 	cmp.w	ip, #0
     df0:	d001      	beq.n	df6 <CONFIG_ISR_STACK_SIZE+0x5f6>
     df2:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
     df6:	2d00      	cmp	r5, #0
		fract += 2;
     df8:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
     dfc:	f300 81d0 	bgt.w	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
	fract >>= (4 - expo);
     e00:	9809      	ldr	r0, [sp, #36]	; 0x24
     e02:	9908      	ldr	r1, [sp, #32]
     e04:	f1c5 0c04 	rsb	ip, r5, #4
     e08:	351c      	adds	r5, #28
     e0a:	fa00 f505 	lsl.w	r5, r0, r5
     e0e:	f1ac 0e20 	sub.w	lr, ip, #32
     e12:	fa21 f10c 	lsr.w	r1, r1, ip
     e16:	fa20 fe0e 	lsr.w	lr, r0, lr
     e1a:	4329      	orrs	r1, r5
     e1c:	ea41 010e 	orr.w	r1, r1, lr
     e20:	fa20 f00c 	lsr.w	r0, r0, ip
     e24:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
     e28:	f002 01df 	and.w	r1, r2, #223	; 0xdf
     e2c:	2947      	cmp	r1, #71	; 0x47
     e2e:	f040 81d7 	bne.w	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
		if (decexp < (-4 + 1) || decexp > precision) {
     e32:	1cdd      	adds	r5, r3, #3
     e34:	db02      	blt.n	e3c <CONFIG_ISR_STACK_SIZE+0x63c>
     e36:	4598      	cmp	r8, r3
     e38:	f280 81ce 	bge.w	11d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>
			c += 'e' - 'g';  /* e or E */
     e3c:	3a02      	subs	r2, #2
			if (precision > 0) {
     e3e:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
     e42:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
     e44:	dd01      	ble.n	e4a <CONFIG_ISR_STACK_SIZE+0x64a>
				precision--;
     e46:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
     e4a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
     e4e:	0688      	lsls	r0, r1, #26
     e50:	f100 81c6 	bmi.w	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
     e54:	f1b8 0f00 	cmp.w	r8, #0
     e58:	bfd4      	ite	le
     e5a:	2100      	movle	r1, #0
     e5c:	2101      	movgt	r1, #1
	if (c == 'f') {
     e5e:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
     e60:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
     e62:	f040 81bf 	bne.w	11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>
		if (decimals < 0) {
     e66:	eb18 0503 	adds.w	r5, r8, r3
     e6a:	f140 81bd 	bpl.w	11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
			decimals = 0;
     e6e:	2500      	movs	r5, #0
     e70:	e1bd      	b.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
		switch (conv->specifier) {
     e72:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
     e76:	2b20      	cmp	r3, #32
     e78:	f63f af1b 	bhi.w	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
     e7c:	a001      	add	r0, pc, #4	; (adr r0, e84 <CONFIG_ISR_STACK_SIZE+0x684>)
     e7e:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
     e82:	bf00      	nop
     e84:	00001099 	.word	0x00001099
     e88:	00000cb3 	.word	0x00000cb3
     e8c:	00000cb3 	.word	0x00000cb3
     e90:	00000cb3 	.word	0x00000cb3
     e94:	00000cb3 	.word	0x00000cb3
     e98:	00000cb3 	.word	0x00000cb3
     e9c:	00000cb3 	.word	0x00000cb3
     ea0:	00000cb3 	.word	0x00000cb3
     ea4:	00000cb3 	.word	0x00000cb3
     ea8:	00000d71 	.word	0x00000d71
     eac:	00000cb3 	.word	0x00000cb3
     eb0:	00000f35 	.word	0x00000f35
     eb4:	00001039 	.word	0x00001039
     eb8:	00000d71 	.word	0x00000d71
     ebc:	00000d71 	.word	0x00000d71
     ec0:	00000d71 	.word	0x00000d71
     ec4:	00000cb3 	.word	0x00000cb3
     ec8:	00001039 	.word	0x00001039
     ecc:	00000cb3 	.word	0x00000cb3
     ed0:	00000cb3 	.word	0x00000cb3
     ed4:	00000cb3 	.word	0x00000cb3
     ed8:	00000cb3 	.word	0x00000cb3
     edc:	000010cf 	.word	0x000010cf
     ee0:	00001099 	.word	0x00001099
     ee4:	0000109d 	.word	0x0000109d
     ee8:	00000cb3 	.word	0x00000cb3
     eec:	00000cb3 	.word	0x00000cb3
     ef0:	00000f0f 	.word	0x00000f0f
     ef4:	00000cb3 	.word	0x00000cb3
     ef8:	00001099 	.word	0x00001099
     efc:	00000cb3 	.word	0x00000cb3
     f00:	00000cb3 	.word	0x00000cb3
     f04:	00001099 	.word	0x00001099
			OUTC('%');
     f08:	4651      	mov	r1, sl
     f0a:	4610      	mov	r0, r2
     f0c:	e47e      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
			if (precision >= 0) {
     f0e:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     f12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
     f14:	db09      	blt.n	f2a <CONFIG_ISR_STACK_SIZE+0x72a>
				len = strnlen(bps, precision);
     f16:	4641      	mov	r1, r8
     f18:	4610      	mov	r0, r2
     f1a:	9203      	str	r2, [sp, #12]
     f1c:	f004 fc90 	bl	5840 <strnlen>
				len = strlen(bps);
     f20:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
     f22:	2700      	movs	r7, #0
			bpe = bps + len;
     f24:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
     f26:	b962      	cbnz	r2, f42 <CONFIG_ISR_STACK_SIZE+0x742>
     f28:	e6c3      	b.n	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
				len = strlen(bps);
     f2a:	4610      	mov	r0, r2
     f2c:	9203      	str	r2, [sp, #12]
     f2e:	f004 fc80 	bl	5832 <strlen>
     f32:	e7f5      	b.n	f20 <CONFIG_ISR_STACK_SIZE+0x720>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     f34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     f36:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
     f3a:	2700      	movs	r7, #0
			bpe = buf + 1;
     f3c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
     f40:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
     f42:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
     f44:	b107      	cbz	r7, f48 <CONFIG_ISR_STACK_SIZE+0x748>
			nj_len += 1U;
     f46:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     f48:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
     f4c:	06c1      	lsls	r1, r0, #27
     f4e:	f140 823a 	bpl.w	13c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c6>
			nj_len += 2U;
     f52:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
     f54:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
     f56:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
     f58:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     f5a:	bf44      	itt	mi
     f5c:	9910      	ldrmi	r1, [sp, #64]	; 0x40
     f5e:	185b      	addmi	r3, r3, r1
		if (width > 0) {
     f60:	f1bb 0f00 	cmp.w	fp, #0
     f64:	dd23      	ble.n	fae <CONFIG_ISR_STACK_SIZE+0x7ae>
			width -= (int)nj_len;
     f66:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
     f6a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
     f6e:	0759      	lsls	r1, r3, #29
     f70:	f3c3 0880 	ubfx	r8, r3, #2, #1
     f74:	d41b      	bmi.n	fae <CONFIG_ISR_STACK_SIZE+0x7ae>
				if (conv->flag_zero) {
     f76:	0658      	lsls	r0, r3, #25
     f78:	f140 8234 	bpl.w	13e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e4>
					if (sign != 0) {
     f7c:	2f00      	cmp	r7, #0
     f7e:	f000 8234 	beq.w	13ea <CONFIG_FPROTECT_BLOCK_SIZE+0x3ea>
						OUTC(sign);
     f82:	4651      	mov	r1, sl
     f84:	4638      	mov	r0, r7
     f86:	9203      	str	r2, [sp, #12]
     f88:	47c8      	blx	r9
     f8a:	2800      	cmp	r0, #0
     f8c:	f2c0 8227 	blt.w	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
     f90:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
     f92:	4647      	mov	r7, r8
						OUTC(sign);
     f94:	3601      	adds	r6, #1
					pad = '0';
     f96:	f04f 0830 	mov.w	r8, #48	; 0x30
     f9a:	445e      	add	r6, fp
     f9c:	465b      	mov	r3, fp
				while (width-- > 0) {
     f9e:	2b00      	cmp	r3, #0
     fa0:	eba6 000b 	sub.w	r0, r6, fp
     fa4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
     fa8:	f300 8211 	bgt.w	13ce <CONFIG_FPROTECT_BLOCK_SIZE+0x3ce>
     fac:	4606      	mov	r6, r0
		if (sign != 0) {
     fae:	b147      	cbz	r7, fc2 <CONFIG_ISR_STACK_SIZE+0x7c2>
			OUTC(sign);
     fb0:	4651      	mov	r1, sl
     fb2:	4638      	mov	r0, r7
     fb4:	9203      	str	r2, [sp, #12]
     fb6:	47c8      	blx	r9
     fb8:	2800      	cmp	r0, #0
     fba:	f2c0 8210 	blt.w	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
     fbe:	9a03      	ldr	r2, [sp, #12]
     fc0:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
     fc2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
     fc6:	0659      	lsls	r1, r3, #25
     fc8:	f140 8265 	bpl.w	1496 <CONFIG_FPROTECT_BLOCK_SIZE+0x496>
			if (conv->specifier_a) {
     fcc:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
     fd0:	2b00      	cmp	r3, #0
     fd2:	eba6 0302 	sub.w	r3, r6, r2
     fd6:	9303      	str	r3, [sp, #12]
     fd8:	f2c0 820a 	blt.w	13f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f0>
     fdc:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
     fde:	7838      	ldrb	r0, [r7, #0]
     fe0:	9b03      	ldr	r3, [sp, #12]
     fe2:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
     fe6:	2a09      	cmp	r2, #9
     fe8:	46b8      	mov	r8, r7
     fea:	eb03 0607 	add.w	r6, r3, r7
     fee:	f107 0701 	add.w	r7, r7, #1
     ff2:	f240 8229 	bls.w	1448 <CONFIG_FPROTECT_BLOCK_SIZE+0x448>
				if (!conv->pad_postdp) {
     ff6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
     ffa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
     ffc:	0693      	lsls	r3, r2, #26
     ffe:	d408      	bmi.n	1012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
    1000:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    1002:	2f00      	cmp	r7, #0
    1004:	eba6 0307 	sub.w	r3, r6, r7
    1008:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    100c:	f300 8222 	bgt.w	1454 <CONFIG_FPROTECT_BLOCK_SIZE+0x454>
    1010:	461e      	mov	r6, r3
				if (*cp == '.') {
    1012:	f898 0000 	ldrb.w	r0, [r8]
    1016:	282e      	cmp	r0, #46	; 0x2e
    1018:	d10b      	bne.n	1032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
					OUTC(*cp++);
    101a:	4651      	mov	r1, sl
    101c:	47c8      	blx	r9
						OUTC('0');
    101e:	2800      	cmp	r0, #0
    1020:	f2c0 81dd 	blt.w	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
					while (pad_len-- > 0) {
    1024:	2f00      	cmp	r7, #0
						OUTC('0');
    1026:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    102a:	f300 821a 	bgt.w	1462 <CONFIG_FPROTECT_BLOCK_SIZE+0x462>
					OUTC(*cp++);
    102e:	f108 0801 	add.w	r8, r8, #1
    1032:	eba6 0608 	sub.w	r6, r6, r8
    1036:	e21d      	b.n	1474 <CONFIG_FPROTECT_BLOCK_SIZE+0x474>
			if (conv->flag_plus) {
    1038:	073d      	lsls	r5, r7, #28
    103a:	d42b      	bmi.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
				sign = ' ';
    103c:	f017 0710 	ands.w	r7, r7, #16
    1040:	bf18      	it	ne
    1042:	2720      	movne	r7, #32
			sint = value->sint;
    1044:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    1048:	2b00      	cmp	r3, #0
    104a:	da05      	bge.n	1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
				value->uint = (uint_value_type)-sint;
    104c:	4252      	negs	r2, r2
    104e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1052:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    1056:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    1058:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    105c:	9300      	str	r3, [sp, #0]
    105e:	aa0e      	add	r2, sp, #56	; 0x38
    1060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1064:	ab13      	add	r3, sp, #76	; 0x4c
    1066:	f004 fb68 	bl	573a <encode_uint>
    106a:	4602      	mov	r2, r0
			if (precision >= 0) {
    106c:	f1b8 0f00 	cmp.w	r8, #0
    1070:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    1074:	f6ff af57 	blt.w	f26 <CONFIG_ISR_STACK_SIZE+0x726>
				conv->flag_zero = false;
    1078:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    107c:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    107e:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    1082:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1084:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    1088:	f67f af4d 	bls.w	f26 <CONFIG_ISR_STACK_SIZE+0x726>
					conv->pad0_value = precision - (int)len;
    108c:	eba8 0303 	sub.w	r3, r8, r3
    1090:	930f      	str	r3, [sp, #60]	; 0x3c
    1092:	e748      	b.n	f26 <CONFIG_ISR_STACK_SIZE+0x726>
				sign = '+';
    1094:	272b      	movs	r7, #43	; 0x2b
    1096:	e7d5      	b.n	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
		switch (conv->specifier) {
    1098:	2700      	movs	r7, #0
    109a:	e7dd      	b.n	1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
			if (value->ptr != NULL) {
    109c:	980c      	ldr	r0, [sp, #48]	; 0x30
    109e:	2800      	cmp	r0, #0
    10a0:	f000 818d 	beq.w	13be <CONFIG_FPROTECT_BLOCK_SIZE+0x3be>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    10a4:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    10a8:	9300      	str	r3, [sp, #0]
    10aa:	aa0e      	add	r2, sp, #56	; 0x38
    10ac:	ab13      	add	r3, sp, #76	; 0x4c
    10ae:	2100      	movs	r1, #0
    10b0:	f004 fb43 	bl	573a <encode_uint>
				conv->altform_0c = true;
    10b4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    10b8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    10bc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    10c0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    10c4:	4602      	mov	r2, r0
				conv->altform_0c = true;
    10c6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    10ca:	2700      	movs	r7, #0
				goto prec_int_pad0;
    10cc:	e7ce      	b.n	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
				store_count(conv, value->ptr, count);
    10ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    10d0:	2907      	cmp	r1, #7
    10d2:	f63f adee 	bhi.w	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
    10d6:	e8df f001 	tbb	[pc, r1]
    10da:	040c      	.short	0x040c
    10dc:	08080c06 	.word	0x08080c06
    10e0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    10e2:	701e      	strb	r6, [r3, #0]
		break;
    10e4:	e5e5      	b.n	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
		*(short *)dp = (short)count;
    10e6:	801e      	strh	r6, [r3, #0]
		break;
    10e8:	e5e3      	b.n	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
		*(intmax_t *)dp = (intmax_t)count;
    10ea:	17f2      	asrs	r2, r6, #31
    10ec:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    10f0:	e5df      	b.n	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    10f2:	601e      	str	r6, [r3, #0]
		break;
    10f4:	e5dd      	b.n	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
		*sign = '-';
    10f6:	272d      	movs	r7, #45	; 0x2d
    10f8:	e646      	b.n	d88 <CONFIG_ISR_STACK_SIZE+0x588>
		*sign = '+';
    10fa:	272b      	movs	r7, #43	; 0x2b
    10fc:	e644      	b.n	d88 <CONFIG_ISR_STACK_SIZE+0x588>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    10fe:	f240 70ff 	movw	r0, #2047	; 0x7ff
    1102:	4285      	cmp	r5, r0
    1104:	d12d      	bne.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
		if (fract == 0) {
    1106:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    1108:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    110c:	d11b      	bne.n	1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
			if (isupper((int)c)) {
    110e:	2a19      	cmp	r2, #25
    1110:	d811      	bhi.n	1136 <CONFIG_FPROTECT_BLOCK_SIZE+0x136>
				*buf++ = 'I';
    1112:	2349      	movs	r3, #73	; 0x49
    1114:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    1118:	234e      	movs	r3, #78	; 0x4e
    111a:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    111e:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    1120:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    1124:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    1128:	f36f 1386 	bfc	r3, #6, #1
    112c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    1130:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    1134:	e704      	b.n	f40 <CONFIG_ISR_STACK_SIZE+0x740>
				*buf++ = 'i';
    1136:	2369      	movs	r3, #105	; 0x69
    1138:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    113c:	236e      	movs	r3, #110	; 0x6e
    113e:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    1142:	2366      	movs	r3, #102	; 0x66
    1144:	e7ec      	b.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
			if (isupper((int)c)) {
    1146:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    1148:	bf99      	ittee	ls
    114a:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    114c:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    114e:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    1150:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    1152:	bf94      	ite	ls
    1154:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    1158:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    115c:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    1160:	e7de      	b.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
	bool is_subnormal = (expo == 0) && (fract != 0);
    1162:	2000      	movs	r0, #0
    1164:	e61e      	b.n	da4 <CONFIG_ISR_STACK_SIZE+0x5a4>
				expo--;
    1166:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    1168:	1849      	adds	r1, r1, r1
    116a:	415b      	adcs	r3, r3
    116c:	2b00      	cmp	r3, #0
    116e:	dafa      	bge.n	1166 <CONFIG_FPROTECT_BLOCK_SIZE+0x166>
    1170:	e9cd 1308 	strd	r1, r3, [sp, #32]
    1174:	e62a      	b.n	dcc <CONFIG_ISR_STACK_SIZE+0x5cc>
			fract >>= 1;
    1176:	0840      	lsrs	r0, r0, #1
    1178:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    117c:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    117e:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    1182:	46ac      	mov	ip, r5
			expo++;
    1184:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    1188:	d2f5      	bcs.n	1176 <CONFIG_FPROTECT_BLOCK_SIZE+0x176>
		fract *= 5U;
    118a:	fb0e f501 	mul.w	r5, lr, r1
    118e:	fba0 010e 	umull	r0, r1, r0, lr
    1192:	4429      	add	r1, r5
		decexp--;
    1194:	3b01      	subs	r3, #1
		expo++;
    1196:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    119a:	f04f 0c01 	mov.w	ip, #1
    119e:	e621      	b.n	de4 <CONFIG_ISR_STACK_SIZE+0x5e4>
		fract += 2;
    11a0:	3102      	adds	r1, #2
    11a2:	f140 0000 	adc.w	r0, r0, #0
    11a6:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    11aa:	a808      	add	r0, sp, #32
    11ac:	e9cd 2303 	strd	r2, r3, [sp, #12]
    11b0:	f004 fa94 	bl	56dc <_ldiv5>
		decexp++;
    11b4:	9b04      	ldr	r3, [sp, #16]
    11b6:	9a03      	ldr	r2, [sp, #12]
    11b8:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    11bc:	3d01      	subs	r5, #1
		decexp++;
    11be:	3301      	adds	r3, #1
			fract <<= 1;
    11c0:	1849      	adds	r1, r1, r1
    11c2:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    11c4:	2800      	cmp	r0, #0
			expo--;
    11c6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    11ca:	daf9      	bge.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
    11cc:	e9cd 1008 	strd	r1, r0, [sp, #32]
    11d0:	e611      	b.n	df6 <CONFIG_ISR_STACK_SIZE+0x5f6>
    11d2:	2300      	movs	r3, #0
    11d4:	461d      	mov	r5, r3
    11d6:	e613      	b.n	e00 <CONFIG_ISR_STACK_SIZE+0x600>
			precision -= decexp;
    11d8:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    11dc:	2266      	movs	r2, #102	; 0x66
    11de:	e634      	b.n	e4a <CONFIG_ISR_STACK_SIZE+0x64a>
	bool prune_zero = false;
    11e0:	2100      	movs	r1, #0
    11e2:	e63c      	b.n	e5e <CONFIG_ISR_STACK_SIZE+0x65e>
		decimals = precision + 1;
    11e4:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    11e8:	2d10      	cmp	r5, #16
    11ea:	bfa8      	it	ge
    11ec:	2510      	movge	r5, #16
    11ee:	2110      	movs	r1, #16
    11f0:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    11f2:	2000      	movs	r0, #0
    11f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    11f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    11fc:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    1200:	b9a5      	cbnz	r5, 122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
	fract += round;
    1202:	9d08      	ldr	r5, [sp, #32]
    1204:	1949      	adds	r1, r1, r5
    1206:	9d09      	ldr	r5, [sp, #36]	; 0x24
    1208:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    120c:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    1210:	d21b      	bcs.n	124a <CONFIG_FPROTECT_BLOCK_SIZE+0x24a>
	fract += round;
    1212:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    1216:	2a66      	cmp	r2, #102	; 0x66
    1218:	f040 8099 	bne.w	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
		if (decexp > 0) {
    121c:	2b00      	cmp	r3, #0
    121e:	dc23      	bgt.n	1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>
			*buf++ = '0';
    1220:	2130      	movs	r1, #48	; 0x30
    1222:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    1226:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    122a:	e02f      	b.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
	*v >>= 1;
    122c:	0849      	lsrs	r1, r1, #1
    122e:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    1232:	0840      	lsrs	r0, r0, #1
    1234:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    1238:	a80a      	add	r0, sp, #40	; 0x28
    123a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    123e:	3d01      	subs	r5, #1
    1240:	f004 fa4c 	bl	56dc <_ldiv5>
    1244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    1248:	e7d8      	b.n	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
	*v >>= 1;
    124a:	0849      	lsrs	r1, r1, #1
    124c:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    1250:	a808      	add	r0, sp, #32
	*v >>= 1;
    1252:	086d      	lsrs	r5, r5, #1
    1254:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1258:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    125c:	f004 fa3e 	bl	56dc <_ldiv5>
		decexp++;
    1260:	9b05      	ldr	r3, [sp, #20]
    1262:	9a04      	ldr	r2, [sp, #16]
    1264:	3301      	adds	r3, #1
    1266:	e7d6      	b.n	1216 <CONFIG_FPROTECT_BLOCK_SIZE+0x216>
	char *buf = bps;
    1268:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    126a:	9907      	ldr	r1, [sp, #28]
    126c:	2900      	cmp	r1, #0
    126e:	dd0b      	ble.n	1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
				*buf++ = _get_digit(&fract, &digit_count);
    1270:	a907      	add	r1, sp, #28
    1272:	a808      	add	r0, sp, #32
    1274:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1278:	f004 fa48 	bl	570c <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    127c:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    127e:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    1282:	3b01      	subs	r3, #1
    1284:	9a04      	ldr	r2, [sp, #16]
    1286:	d1f0      	bne.n	126a <CONFIG_FPROTECT_BLOCK_SIZE+0x26a>
			conv->pad0_value = decexp;
    1288:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    128a:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    128c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    1290:	0689      	lsls	r1, r1, #26
    1292:	d402      	bmi.n	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
    1294:	f1b8 0f00 	cmp.w	r8, #0
    1298:	dd1d      	ble.n	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
			*buf++ = '.';
    129a:	212e      	movs	r1, #46	; 0x2e
    129c:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    12a0:	b19b      	cbz	r3, 12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
    12a2:	f1b8 0f00 	cmp.w	r8, #0
    12a6:	dd16      	ble.n	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
			conv->pad0_value = -decexp;
    12a8:	4259      	negs	r1, r3
    12aa:	4541      	cmp	r1, r8
    12ac:	bfa8      	it	ge
    12ae:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    12b0:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    12b4:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    12b6:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    12b8:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    12bc:	bfd4      	ite	le
    12be:	2100      	movle	r1, #0
    12c0:	2101      	movgt	r1, #1
    12c2:	f361 1045 	bfi	r0, r1, #5, #1
    12c6:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    12ca:	f1b8 0f00 	cmp.w	r8, #0
    12ce:	dd02      	ble.n	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
    12d0:	9907      	ldr	r1, [sp, #28]
    12d2:	2900      	cmp	r1, #0
    12d4:	dc56      	bgt.n	1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
	if (prune_zero) {
    12d6:	9903      	ldr	r1, [sp, #12]
    12d8:	2900      	cmp	r1, #0
    12da:	d163      	bne.n	13a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a4>
	conv->pad0_pre_exp = precision;
    12dc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    12e0:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    12e4:	2945      	cmp	r1, #69	; 0x45
    12e6:	d121      	bne.n	132c <CONFIG_FPROTECT_BLOCK_SIZE+0x32c>
		if (decexp < 0) {
    12e8:	2b00      	cmp	r3, #0
		*buf++ = c;
    12ea:	4629      	mov	r1, r5
			decexp = -decexp;
    12ec:	bfb8      	it	lt
    12ee:	425b      	neglt	r3, r3
		*buf++ = c;
    12f0:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    12f4:	bfb4      	ite	lt
    12f6:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    12f8:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    12fa:	2b63      	cmp	r3, #99	; 0x63
    12fc:	706a      	strb	r2, [r5, #1]
    12fe:	dd09      	ble.n	1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>
			*buf++ = (decexp / 100) + '0';
    1300:	2064      	movs	r0, #100	; 0x64
    1302:	fbb3 f2f0 	udiv	r2, r3, r0
    1306:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    130a:	1ce9      	adds	r1, r5, #3
    130c:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    1310:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    1314:	200a      	movs	r0, #10
    1316:	460d      	mov	r5, r1
    1318:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    131c:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    1320:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    1324:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    1326:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    132a:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    132c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    132e:	2b00      	cmp	r3, #0
    1330:	dc43      	bgt.n	13ba <CONFIG_FPROTECT_BLOCK_SIZE+0x3ba>
    1332:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1334:	2b00      	cmp	r3, #0
    1336:	bfd4      	ite	le
    1338:	2300      	movle	r3, #0
    133a:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    133c:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    1340:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    1344:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    1346:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    134a:	702b      	strb	r3, [r5, #0]
	return bps;
    134c:	e5f8      	b.n	f40 <CONFIG_ISR_STACK_SIZE+0x740>
		*buf = _get_digit(&fract, &digit_count);
    134e:	a907      	add	r1, sp, #28
    1350:	a808      	add	r0, sp, #32
    1352:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1356:	f004 f9d9 	bl	570c <_get_digit>
		if (*buf++ != '0') {
    135a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    135e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    1362:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    1366:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    1368:	bf18      	it	ne
    136a:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    136e:	0688      	lsls	r0, r1, #26
    1370:	d402      	bmi.n	1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>
    1372:	f1b8 0f00 	cmp.w	r8, #0
    1376:	dd12      	ble.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
			*buf++ = '.';
    1378:	212e      	movs	r1, #46	; 0x2e
    137a:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    137e:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    1382:	e7a2      	b.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
		*buf++ = _get_digit(&fract, &digit_count);
    1384:	a907      	add	r1, sp, #28
    1386:	a808      	add	r0, sp, #32
    1388:	e9cd 2304 	strd	r2, r3, [sp, #16]
    138c:	f004 f9be 	bl	570c <_get_digit>
		precision--;
    1390:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    1394:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    1398:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    139c:	e795      	b.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
		if (*buf++ != '0') {
    139e:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    13a2:	e798      	b.n	12d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d6>
		conv->pad0_pre_exp = 0;
    13a4:	2100      	movs	r1, #0
    13a6:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    13a8:	4628      	mov	r0, r5
    13aa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    13ae:	2930      	cmp	r1, #48	; 0x30
    13b0:	d0fa      	beq.n	13a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a8>
		if (*buf != '.') {
    13b2:	292e      	cmp	r1, #46	; 0x2e
    13b4:	bf18      	it	ne
    13b6:	4605      	movne	r5, r0
    13b8:	e792      	b.n	12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>
		|| (conv->pad0_pre_exp > 0);
    13ba:	2301      	movs	r3, #1
    13bc:	e7be      	b.n	133c <CONFIG_FPROTECT_BLOCK_SIZE+0x33c>
			bpe = bps + 5;
    13be:	4d4b      	ldr	r5, [pc, #300]	; (14ec <CONFIG_FPROTECT_BLOCK_SIZE+0x4ec>)
		char sign = 0;
    13c0:	4607      	mov	r7, r0
			bps = "(nil)";
    13c2:	1f6a      	subs	r2, r5, #5
    13c4:	e5bd      	b.n	f42 <CONFIG_ISR_STACK_SIZE+0x742>
		} else if (conv->altform_0) {
    13c6:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    13c8:	bf48      	it	mi
    13ca:	3301      	addmi	r3, #1
    13cc:	e5c2      	b.n	f54 <CONFIG_ISR_STACK_SIZE+0x754>
					OUTC(pad);
    13ce:	4651      	mov	r1, sl
    13d0:	4640      	mov	r0, r8
    13d2:	9203      	str	r2, [sp, #12]
    13d4:	47c8      	blx	r9
    13d6:	2800      	cmp	r0, #0
    13d8:	9a03      	ldr	r2, [sp, #12]
    13da:	f6bf addf 	bge.w	f9c <CONFIG_ISR_STACK_SIZE+0x79c>
#undef OUTS
#undef OUTC
}
    13de:	b01b      	add	sp, #108	; 0x6c
    13e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    13e4:	f04f 0820 	mov.w	r8, #32
    13e8:	e5d7      	b.n	f9a <CONFIG_ISR_STACK_SIZE+0x79a>
					pad = '0';
    13ea:	f04f 0830 	mov.w	r8, #48	; 0x30
    13ee:	e5d4      	b.n	f9a <CONFIG_ISR_STACK_SIZE+0x79a>
			if (conv->specifier_a) {
    13f0:	4690      	mov	r8, r2
    13f2:	9b03      	ldr	r3, [sp, #12]
    13f4:	4647      	mov	r7, r8
    13f6:	4443      	add	r3, r8
				while (*cp != 'p') {
    13f8:	f818 0b01 	ldrb.w	r0, [r8], #1
    13fc:	2870      	cmp	r0, #112	; 0x70
    13fe:	d11e      	bne.n	143e <CONFIG_FPROTECT_BLOCK_SIZE+0x43e>
			while (pad_len-- > 0) {
    1400:	461e      	mov	r6, r3
    1402:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1404:	eb03 0806 	add.w	r8, r3, r6
    1408:	eba8 0306 	sub.w	r3, r8, r6
    140c:	2b00      	cmp	r3, #0
    140e:	dc3b      	bgt.n	1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>
			OUTS(cp, bpe);
    1410:	462b      	mov	r3, r5
    1412:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    1414:	4651      	mov	r1, sl
    1416:	4648      	mov	r0, r9
    1418:	f004 f9d5 	bl	57c6 <outs>
    141c:	2800      	cmp	r0, #0
    141e:	dbde      	blt.n	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
    1420:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    1422:	4606      	mov	r6, r0
    1424:	4483      	add	fp, r0
		while (width > 0) {
    1426:	ebab 0306 	sub.w	r3, fp, r6
    142a:	2b00      	cmp	r3, #0
    142c:	f77f ac41 	ble.w	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
			OUTC(' ');
    1430:	4651      	mov	r1, sl
    1432:	2020      	movs	r0, #32
    1434:	47c8      	blx	r9
    1436:	2800      	cmp	r0, #0
    1438:	dbd1      	blt.n	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
    143a:	3601      	adds	r6, #1
			--width;
    143c:	e7f3      	b.n	1426 <CONFIG_FPROTECT_BLOCK_SIZE+0x426>
					OUTC(*cp++);
    143e:	4651      	mov	r1, sl
    1440:	47c8      	blx	r9
    1442:	2800      	cmp	r0, #0
    1444:	dad5      	bge.n	13f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f2>
    1446:	e7ca      	b.n	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
					OUTC(*cp++);
    1448:	4651      	mov	r1, sl
    144a:	47c8      	blx	r9
    144c:	2800      	cmp	r0, #0
    144e:	f6bf adc6 	bge.w	fde <CONFIG_ISR_STACK_SIZE+0x7de>
    1452:	e7c4      	b.n	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
						OUTC('0');
    1454:	4651      	mov	r1, sl
    1456:	2030      	movs	r0, #48	; 0x30
    1458:	47c8      	blx	r9
    145a:	2800      	cmp	r0, #0
    145c:	f6bf add1 	bge.w	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
    1460:	e7bd      	b.n	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
						OUTC('0');
    1462:	4651      	mov	r1, sl
    1464:	2030      	movs	r0, #48	; 0x30
    1466:	47c8      	blx	r9
    1468:	3f01      	subs	r7, #1
    146a:	e5d8      	b.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
					OUTC(*cp++);
    146c:	4651      	mov	r1, sl
    146e:	47c8      	blx	r9
    1470:	2800      	cmp	r0, #0
    1472:	dbb4      	blt.n	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
    1474:	4647      	mov	r7, r8
    1476:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    147a:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    147e:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    1482:	2a09      	cmp	r2, #9
    1484:	d9f2      	bls.n	146c <CONFIG_FPROTECT_BLOCK_SIZE+0x46c>
    1486:	e7bb      	b.n	1400 <CONFIG_FPROTECT_BLOCK_SIZE+0x400>
				OUTC('0');
    1488:	4651      	mov	r1, sl
    148a:	2030      	movs	r0, #48	; 0x30
    148c:	47c8      	blx	r9
    148e:	2800      	cmp	r0, #0
    1490:	dba5      	blt.n	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
    1492:	3601      	adds	r6, #1
    1494:	e7b8      	b.n	1408 <CONFIG_FPROTECT_BLOCK_SIZE+0x408>
			if (conv->altform_0c | conv->altform_0) {
    1496:	06d8      	lsls	r0, r3, #27
    1498:	d401      	bmi.n	149e <CONFIG_FPROTECT_BLOCK_SIZE+0x49e>
    149a:	0719      	lsls	r1, r3, #28
    149c:	d507      	bpl.n	14ae <CONFIG_FPROTECT_BLOCK_SIZE+0x4ae>
				OUTC('0');
    149e:	4651      	mov	r1, sl
    14a0:	2030      	movs	r0, #48	; 0x30
    14a2:	9203      	str	r2, [sp, #12]
    14a4:	47c8      	blx	r9
    14a6:	2800      	cmp	r0, #0
    14a8:	db99      	blt.n	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
    14aa:	9a03      	ldr	r2, [sp, #12]
    14ac:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    14ae:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    14b2:	06db      	lsls	r3, r3, #27
    14b4:	d508      	bpl.n	14c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c8>
				OUTC(conv->specifier);
    14b6:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    14ba:	9203      	str	r2, [sp, #12]
    14bc:	4651      	mov	r1, sl
    14be:	47c8      	blx	r9
    14c0:	2800      	cmp	r0, #0
    14c2:	db8c      	blt.n	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
    14c4:	9a03      	ldr	r2, [sp, #12]
    14c6:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    14c8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    14ca:	4437      	add	r7, r6
    14cc:	1bbb      	subs	r3, r7, r6
    14ce:	2b00      	cmp	r3, #0
    14d0:	dc01      	bgt.n	14d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d6>
			OUTS(bps, bpe);
    14d2:	462b      	mov	r3, r5
    14d4:	e79e      	b.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
				OUTC('0');
    14d6:	4651      	mov	r1, sl
    14d8:	2030      	movs	r0, #48	; 0x30
    14da:	9203      	str	r2, [sp, #12]
    14dc:	47c8      	blx	r9
    14de:	2800      	cmp	r0, #0
    14e0:	f6ff af7d 	blt.w	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
    14e4:	9a03      	ldr	r2, [sp, #12]
    14e6:	3601      	adds	r6, #1
    14e8:	e7f0      	b.n	14cc <CONFIG_FPROTECT_BLOCK_SIZE+0x4cc>
    14ea:	bf00      	nop
    14ec:	000068dc 	.word	0x000068dc

000014f0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    14f0:	b508      	push	{r3, lr}
    14f2:	f04f 0220 	mov.w	r2, #32
    14f6:	f3ef 8311 	mrs	r3, BASEPRI
    14fa:	f382 8812 	msr	BASEPRI_MAX, r2
    14fe:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1502:	f000 fe19 	bl	2138 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1506:	4803      	ldr	r0, [pc, #12]	; (1514 <sys_reboot+0x24>)
    1508:	f004 f826 	bl	5558 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    150c:	f000 fa32 	bl	1974 <arch_cpu_idle>
    1510:	e7fc      	b.n	150c <sys_reboot+0x1c>
    1512:	bf00      	nop
    1514:	000068dd 	.word	0x000068dd

00001518 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    151c:	4605      	mov	r5, r0
    151e:	f04f 0320 	mov.w	r3, #32
    1522:	f3ef 8611 	mrs	r6, BASEPRI
    1526:	f383 8812 	msr	BASEPRI_MAX, r3
    152a:	f3bf 8f6f 	isb	sy
	return list->head;
    152e:	4b0e      	ldr	r3, [pc, #56]	; (1568 <pm_state_notify+0x50>)
    1530:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1532:	b19c      	cbz	r4, 155c <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1534:	4f0d      	ldr	r7, [pc, #52]	; (156c <pm_state_notify+0x54>)
    1536:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1570 <pm_state_notify+0x58>
    153a:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    153e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1542:	2d00      	cmp	r5, #0
    1544:	bf08      	it	eq
    1546:	4613      	moveq	r3, r2
		if (callback) {
    1548:	b12b      	cbz	r3, 1556 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    154a:	f898 2014 	ldrb.w	r2, [r8, #20]
    154e:	fb09 f202 	mul.w	r2, r9, r2
    1552:	5cb8      	ldrb	r0, [r7, r2]
    1554:	4798      	blx	r3
	return node->next;
    1556:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1558:	2c00      	cmp	r4, #0
    155a:	d1f0      	bne.n	153e <pm_state_notify+0x26>
	__asm__ volatile(
    155c:	f386 8811 	msr	BASEPRI, r6
    1560:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1568:	20000430 	.word	0x20000430
    156c:	20000438 	.word	0x20000438
    1570:	20000b10 	.word	0x20000b10

00001574 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1574:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    1576:	2301      	movs	r3, #1
    1578:	f000 001f 	and.w	r0, r0, #31
    157c:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1580:	4b07      	ldr	r3, [pc, #28]	; (15a0 <atomic_clear_bit.constprop.0+0x2c>)
    1582:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1586:	43c0      	mvns	r0, r0
    1588:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    158c:	e853 2f00 	ldrex	r2, [r3]
    1590:	4002      	ands	r2, r0
    1592:	e843 2100 	strex	r1, r2, [r3]
    1596:	2900      	cmp	r1, #0
    1598:	d1f8      	bne.n	158c <atomic_clear_bit.constprop.0+0x18>
    159a:	f3bf 8f5b 	dmb	ish
}
    159e:	4770      	bx	lr
    15a0:	20000444 	.word	0x20000444

000015a4 <pm_system_resume>:

void pm_system_resume(void)
{
    15a4:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    15a6:	4b1a      	ldr	r3, [pc, #104]	; (1610 <pm_system_resume+0x6c>)
    15a8:	7d1c      	ldrb	r4, [r3, #20]
    15aa:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    15ae:	f004 031f 	and.w	r3, r4, #31
    15b2:	2201      	movs	r2, #1
    15b4:	409a      	lsls	r2, r3
    15b6:	4b17      	ldr	r3, [pc, #92]	; (1614 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    15b8:	0961      	lsrs	r1, r4, #5
    15ba:	43d0      	mvns	r0, r2
    15bc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    15c0:	e853 1f00 	ldrex	r1, [r3]
    15c4:	ea01 0500 	and.w	r5, r1, r0
    15c8:	e843 5c00 	strex	ip, r5, [r3]
    15cc:	f1bc 0f00 	cmp.w	ip, #0
    15d0:	d1f6      	bne.n	15c0 <pm_system_resume+0x1c>
    15d2:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    15d6:	4211      	tst	r1, r2
    15d8:	d013      	beq.n	1602 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    15da:	4b0f      	ldr	r3, [pc, #60]	; (1618 <pm_system_resume+0x74>)
    15dc:	4d0f      	ldr	r5, [pc, #60]	; (161c <pm_system_resume+0x78>)
    15de:	b18b      	cbz	r3, 1604 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    15e0:	230c      	movs	r3, #12
    15e2:	4363      	muls	r3, r4
    15e4:	18ea      	adds	r2, r5, r3
    15e6:	5ce8      	ldrb	r0, [r5, r3]
    15e8:	7851      	ldrb	r1, [r2, #1]
    15ea:	f004 f955 	bl	5898 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    15ee:	2000      	movs	r0, #0
    15f0:	f7ff ff92 	bl	1518 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    15f4:	230c      	movs	r3, #12
    15f6:	435c      	muls	r4, r3
    15f8:	192a      	adds	r2, r5, r4
    15fa:	2300      	movs	r3, #0
    15fc:	512b      	str	r3, [r5, r4]
    15fe:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1602:	bd38      	pop	{r3, r4, r5, pc}
    1604:	f383 8811 	msr	BASEPRI, r3
    1608:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    160c:	e7ef      	b.n	15ee <pm_system_resume+0x4a>
    160e:	bf00      	nop
    1610:	20000b10 	.word	0x20000b10
    1614:	20000448 	.word	0x20000448
    1618:	00005899 	.word	0x00005899
    161c:	20000438 	.word	0x20000438

00001620 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1624:	4b32      	ldr	r3, [pc, #200]	; (16f0 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1626:	4a33      	ldr	r2, [pc, #204]	; (16f4 <pm_system_suspend+0xd4>)
    1628:	7d1c      	ldrb	r4, [r3, #20]
    162a:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    162e:	0963      	lsrs	r3, r4, #5
    1630:	ea4f 0983 	mov.w	r9, r3, lsl #2
    1634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1638:	4e2f      	ldr	r6, [pc, #188]	; (16f8 <pm_system_suspend+0xd8>)
    163a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    163e:	f004 081f 	and.w	r8, r4, #31
    1642:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1646:	f013 0f01 	tst.w	r3, #1
{
    164a:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    164c:	d10a      	bne.n	1664 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    164e:	4601      	mov	r1, r0
    1650:	4620      	mov	r0, r4
    1652:	f000 f869 	bl	1728 <pm_policy_next_state>
		if (info != NULL) {
    1656:	b128      	cbz	r0, 1664 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    1658:	c807      	ldmia	r0, {r0, r1, r2}
    165a:	230c      	movs	r3, #12
    165c:	fb03 6304 	mla	r3, r3, r4, r6
    1660:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1664:	230c      	movs	r3, #12
    1666:	4363      	muls	r3, r4
    1668:	18f2      	adds	r2, r6, r3
    166a:	5cf5      	ldrb	r5, [r6, r3]
    166c:	b92d      	cbnz	r5, 167a <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    166e:	4620      	mov	r0, r4
    1670:	f7ff ff80 	bl	1574 <atomic_clear_bit.constprop.0>
		ret = false;
    1674:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    1676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    167a:	1c7b      	adds	r3, r7, #1
    167c:	d00f      	beq.n	169e <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    167e:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1682:	481e      	ldr	r0, [pc, #120]	; (16fc <pm_system_suspend+0xdc>)
    1684:	4a1e      	ldr	r2, [pc, #120]	; (1700 <pm_system_suspend+0xe0>)
    1686:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    168a:	2100      	movs	r1, #0
    168c:	2300      	movs	r3, #0
    168e:	fbec 0105 	umlal	r0, r1, ip, r5
    1692:	f7fe fd35 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1696:	2101      	movs	r1, #1
    1698:	1a38      	subs	r0, r7, r0
    169a:	f004 fe11 	bl	62c0 <z_set_timeout_expiry>
	k_sched_lock();
    169e:	f003 f8f3 	bl	4888 <k_sched_lock>
	pm_state_notify(true);
    16a2:	2001      	movs	r0, #1
    16a4:	f7ff ff38 	bl	1518 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    16a8:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    16ac:	2301      	movs	r3, #1
    16ae:	fa03 f808 	lsl.w	r8, r3, r8
    16b2:	4b14      	ldr	r3, [pc, #80]	; (1704 <pm_system_suspend+0xe4>)
    16b4:	4499      	add	r9, r3
    16b6:	e859 3f00 	ldrex	r3, [r9]
    16ba:	ea43 0308 	orr.w	r3, r3, r8
    16be:	e849 3200 	strex	r2, r3, [r9]
    16c2:	2a00      	cmp	r2, #0
    16c4:	d1f7      	bne.n	16b6 <pm_system_suspend+0x96>
    16c6:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    16ca:	4b0f      	ldr	r3, [pc, #60]	; (1708 <pm_system_suspend+0xe8>)
    16cc:	b133      	cbz	r3, 16dc <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    16ce:	230c      	movs	r3, #12
    16d0:	4363      	muls	r3, r4
    16d2:	18f2      	adds	r2, r6, r3
    16d4:	5cf0      	ldrb	r0, [r6, r3]
    16d6:	7851      	ldrb	r1, [r2, #1]
    16d8:	f004 f8d2 	bl	5880 <pm_state_set>
	pm_system_resume();
    16dc:	f7ff ff62 	bl	15a4 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    16e0:	4620      	mov	r0, r4
    16e2:	f7ff ff47 	bl	1574 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    16e6:	f003 fa9f 	bl	4c28 <k_sched_unlock>
	bool ret = true;
    16ea:	2001      	movs	r0, #1
    16ec:	e7c3      	b.n	1676 <pm_system_suspend+0x56>
    16ee:	bf00      	nop
    16f0:	20000b10 	.word	0x20000b10
    16f4:	20000444 	.word	0x20000444
    16f8:	20000438 	.word	0x20000438
    16fc:	000f423f 	.word	0x000f423f
    1700:	000f4240 	.word	0x000f4240
    1704:	20000448 	.word	0x20000448
    1708:	00005881 	.word	0x00005881

0000170c <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    170c:	4b05      	ldr	r3, [pc, #20]	; (1724 <pm_policy_state_lock_is_active+0x18>)
    170e:	f3bf 8f5b 	dmb	ish
    1712:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1716:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    171a:	3800      	subs	r0, #0
    171c:	bf18      	it	ne
    171e:	2001      	movne	r0, #1
    1720:	4770      	bx	lr
    1722:	bf00      	nop
    1724:	2000044c 	.word	0x2000044c

00001728 <pm_policy_next_state>:
{
    1728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    172c:	b085      	sub	sp, #20
    172e:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1730:	a903      	add	r1, sp, #12
    1732:	f000 f847 	bl	17c4 <pm_state_cpu_get_all>
    1736:	f8df 8080 	ldr.w	r8, [pc, #128]	; 17b8 <pm_policy_next_state+0x90>
    173a:	f8df a080 	ldr.w	sl, [pc, #128]	; 17bc <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    173e:	1e44      	subs	r4, r0, #1
    1740:	b224      	sxth	r4, r4
    1742:	f04f 0b00 	mov.w	fp, #0
    1746:	1c63      	adds	r3, r4, #1
    1748:	d104      	bne.n	1754 <pm_policy_next_state+0x2c>
	return NULL;
    174a:	2600      	movs	r6, #0
}
    174c:	4630      	mov	r0, r6
    174e:	b005      	add	sp, #20
    1750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    1754:	9a03      	ldr	r2, [sp, #12]
    1756:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    175a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    175e:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    1762:	f7ff ffd3 	bl	170c <pm_policy_state_lock_is_active>
    1766:	4605      	mov	r5, r0
    1768:	bb10      	cbnz	r0, 17b0 <pm_policy_next_state+0x88>
    176a:	6870      	ldr	r0, [r6, #4]
    176c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    1770:	46c4      	mov	ip, r8
    1772:	4629      	mov	r1, r5
    1774:	fbe0 c109 	umlal	ip, r1, r0, r9
    1778:	4652      	mov	r2, sl
    177a:	465b      	mov	r3, fp
    177c:	4660      	mov	r0, ip
    177e:	f7fe fcbf 	bl	100 <__aeabi_uldivmod>
    1782:	9001      	str	r0, [sp, #4]
    1784:	68b0      	ldr	r0, [r6, #8]
    1786:	46c4      	mov	ip, r8
    1788:	4629      	mov	r1, r5
    178a:	fbe0 c109 	umlal	ip, r1, r0, r9
    178e:	465b      	mov	r3, fp
    1790:	4652      	mov	r2, sl
    1792:	4660      	mov	r0, ip
    1794:	f7fe fcb4 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1798:	4b09      	ldr	r3, [pc, #36]	; (17c0 <pm_policy_next_state+0x98>)
    179a:	681b      	ldr	r3, [r3, #0]
    179c:	1c59      	adds	r1, r3, #1
    179e:	d001      	beq.n	17a4 <pm_policy_next_state+0x7c>
    17a0:	4283      	cmp	r3, r0
    17a2:	d905      	bls.n	17b0 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    17a4:	1c7a      	adds	r2, r7, #1
    17a6:	d0d1      	beq.n	174c <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    17a8:	9b01      	ldr	r3, [sp, #4]
    17aa:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    17ac:	42b8      	cmp	r0, r7
    17ae:	d9cd      	bls.n	174c <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    17b0:	3c01      	subs	r4, #1
    17b2:	b224      	sxth	r4, r4
    17b4:	e7c7      	b.n	1746 <pm_policy_next_state+0x1e>
    17b6:	bf00      	nop
    17b8:	000f423f 	.word	0x000f423f
    17bc:	000f4240 	.word	0x000f4240
    17c0:	20000004 	.word	0x20000004

000017c4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    17c4:	b908      	cbnz	r0, 17ca <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    17c6:	4b02      	ldr	r3, [pc, #8]	; (17d0 <pm_state_cpu_get_all+0xc>)
    17c8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    17ca:	2000      	movs	r0, #0
    17cc:	4770      	bx	lr
    17ce:	bf00      	nop
    17d0:	000065b8 	.word	0x000065b8

000017d4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    17d4:	4801      	ldr	r0, [pc, #4]	; (17dc <nrf_cc3xx_platform_abort_init+0x8>)
    17d6:	f003 bcef 	b.w	51b8 <nrf_cc3xx_platform_set_abort>
    17da:	bf00      	nop
    17dc:	000065b8 	.word	0x000065b8

000017e0 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    17e0:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    17e2:	4604      	mov	r4, r0
    17e4:	b918      	cbnz	r0, 17ee <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    17e6:	4b0d      	ldr	r3, [pc, #52]	; (181c <mutex_free_platform+0x3c>)
    17e8:	480d      	ldr	r0, [pc, #52]	; (1820 <mutex_free_platform+0x40>)
    17ea:	685b      	ldr	r3, [r3, #4]
    17ec:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    17ee:	6861      	ldr	r1, [r4, #4]
    17f0:	2908      	cmp	r1, #8
    17f2:	d00d      	beq.n	1810 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    17f4:	f031 0304 	bics.w	r3, r1, #4
    17f8:	d00a      	beq.n	1810 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    17fa:	f011 0102 	ands.w	r1, r1, #2
    17fe:	d008      	beq.n	1812 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1800:	4808      	ldr	r0, [pc, #32]	; (1824 <mutex_free_platform+0x44>)
    1802:	4621      	mov	r1, r4
    1804:	f004 fc4f 	bl	60a6 <k_mem_slab_free>
        mutex->mutex = NULL;
    1808:	2300      	movs	r3, #0
    180a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    180c:	2300      	movs	r3, #0
    180e:	6063      	str	r3, [r4, #4]
}
    1810:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1812:	6820      	ldr	r0, [r4, #0]
    1814:	2214      	movs	r2, #20
    1816:	f004 f827 	bl	5868 <memset>
    181a:	e7f7      	b.n	180c <mutex_free_platform+0x2c>
    181c:	20000108 	.word	0x20000108
    1820:	00006906 	.word	0x00006906
    1824:	20000468 	.word	0x20000468

00001828 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1828:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    182a:	b308      	cbz	r0, 1870 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    182c:	6843      	ldr	r3, [r0, #4]
    182e:	2b04      	cmp	r3, #4
    1830:	d110      	bne.n	1854 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1832:	2201      	movs	r2, #1
    1834:	6803      	ldr	r3, [r0, #0]
    1836:	f3bf 8f5b 	dmb	ish
    183a:	e853 1f00 	ldrex	r1, [r3]
    183e:	2900      	cmp	r1, #0
    1840:	d103      	bne.n	184a <mutex_lock_platform+0x22>
    1842:	e843 2000 	strex	r0, r2, [r3]
    1846:	2800      	cmp	r0, #0
    1848:	d1f7      	bne.n	183a <mutex_lock_platform+0x12>
    184a:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    184e:	d10b      	bne.n	1868 <mutex_lock_platform+0x40>
    1850:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    1852:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1854:	b153      	cbz	r3, 186c <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1856:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    185c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1860:	f002 feb8 	bl	45d4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1864:	2800      	cmp	r0, #0
    1866:	d0f3      	beq.n	1850 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1868:	4803      	ldr	r0, [pc, #12]	; (1878 <mutex_lock_platform+0x50>)
    186a:	e7f2      	b.n	1852 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    186c:	4803      	ldr	r0, [pc, #12]	; (187c <mutex_lock_platform+0x54>)
    186e:	e7f0      	b.n	1852 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1870:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1874:	e7ed      	b.n	1852 <mutex_lock_platform+0x2a>
    1876:	bf00      	nop
    1878:	ffff8fe9 	.word	0xffff8fe9
    187c:	ffff8fea 	.word	0xffff8fea

00001880 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1880:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1882:	b1d0      	cbz	r0, 18ba <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1884:	6843      	ldr	r3, [r0, #4]
    1886:	2b04      	cmp	r3, #4
    1888:	d111      	bne.n	18ae <mutex_unlock_platform+0x2e>
    188a:	2200      	movs	r2, #0
    188c:	6803      	ldr	r3, [r0, #0]
    188e:	f3bf 8f5b 	dmb	ish
    1892:	e853 1f00 	ldrex	r1, [r3]
    1896:	2901      	cmp	r1, #1
    1898:	d103      	bne.n	18a2 <mutex_unlock_platform+0x22>
    189a:	e843 2000 	strex	r0, r2, [r3]
    189e:	2800      	cmp	r0, #0
    18a0:	d1f7      	bne.n	1892 <mutex_unlock_platform+0x12>
    18a2:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    18a6:	4807      	ldr	r0, [pc, #28]	; (18c4 <mutex_unlock_platform+0x44>)
    18a8:	bf08      	it	eq
    18aa:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    18ac:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    18ae:	b13b      	cbz	r3, 18c0 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    18b0:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    18b2:	f002 ff07 	bl	46c4 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    18b6:	2000      	movs	r0, #0
    18b8:	e7f8      	b.n	18ac <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    18ba:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    18be:	e7f5      	b.n	18ac <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    18c0:	4801      	ldr	r0, [pc, #4]	; (18c8 <mutex_unlock_platform+0x48>)
    18c2:	e7f3      	b.n	18ac <mutex_unlock_platform+0x2c>
    18c4:	ffff8fe9 	.word	0xffff8fe9
    18c8:	ffff8fea 	.word	0xffff8fea

000018cc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    18cc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    18ce:	4604      	mov	r4, r0
    18d0:	b918      	cbnz	r0, 18da <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    18d2:	4b16      	ldr	r3, [pc, #88]	; (192c <mutex_init_platform+0x60>)
    18d4:	4816      	ldr	r0, [pc, #88]	; (1930 <mutex_init_platform+0x64>)
    18d6:	685b      	ldr	r3, [r3, #4]
    18d8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    18da:	6863      	ldr	r3, [r4, #4]
    18dc:	2b04      	cmp	r3, #4
    18de:	d023      	beq.n	1928 <mutex_init_platform+0x5c>
    18e0:	2b08      	cmp	r3, #8
    18e2:	d021      	beq.n	1928 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    18e4:	b9cb      	cbnz	r3, 191a <mutex_init_platform+0x4e>
    18e6:	6823      	ldr	r3, [r4, #0]
    18e8:	b9bb      	cbnz	r3, 191a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    18ea:	4812      	ldr	r0, [pc, #72]	; (1934 <mutex_init_platform+0x68>)
    18ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    18f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    18f4:	4621      	mov	r1, r4
    18f6:	f002 fd69 	bl	43cc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    18fa:	b908      	cbnz	r0, 1900 <mutex_init_platform+0x34>
    18fc:	6823      	ldr	r3, [r4, #0]
    18fe:	b91b      	cbnz	r3, 1908 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1900:	4b0a      	ldr	r3, [pc, #40]	; (192c <mutex_init_platform+0x60>)
    1902:	480d      	ldr	r0, [pc, #52]	; (1938 <mutex_init_platform+0x6c>)
    1904:	685b      	ldr	r3, [r3, #4]
    1906:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1908:	6820      	ldr	r0, [r4, #0]
    190a:	2214      	movs	r2, #20
    190c:	2100      	movs	r1, #0
    190e:	f003 ffab 	bl	5868 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1912:	6863      	ldr	r3, [r4, #4]
    1914:	f043 0302 	orr.w	r3, r3, #2
    1918:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    191a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    191c:	f004 fc01 	bl	6122 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1920:	6863      	ldr	r3, [r4, #4]
    1922:	f043 0301 	orr.w	r3, r3, #1
    1926:	6063      	str	r3, [r4, #4]
}
    1928:	bd10      	pop	{r4, pc}
    192a:	bf00      	nop
    192c:	20000108 	.word	0x20000108
    1930:	00006906 	.word	0x00006906
    1934:	20000468 	.word	0x20000468
    1938:	0000692c 	.word	0x0000692c

0000193c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    193c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    193e:	4906      	ldr	r1, [pc, #24]	; (1958 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1940:	4806      	ldr	r0, [pc, #24]	; (195c <nrf_cc3xx_platform_mutex_init+0x20>)
    1942:	2340      	movs	r3, #64	; 0x40
    1944:	2214      	movs	r2, #20
    1946:	f004 fb93 	bl	6070 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    194a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    194e:	4904      	ldr	r1, [pc, #16]	; (1960 <nrf_cc3xx_platform_mutex_init+0x24>)
    1950:	4804      	ldr	r0, [pc, #16]	; (1964 <nrf_cc3xx_platform_mutex_init+0x28>)
    1952:	f003 bc91 	b.w	5278 <nrf_cc3xx_platform_set_mutexes>
    1956:	bf00      	nop
    1958:	20000484 	.word	0x20000484
    195c:	20000468 	.word	0x20000468
    1960:	000065d0 	.word	0x000065d0
    1964:	000065c0 	.word	0x000065c0

00001968 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1968:	4901      	ldr	r1, [pc, #4]	; (1970 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    196a:	2210      	movs	r2, #16
	str	r2, [r1]
    196c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    196e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1970:	e000ed10 	.word	0xe000ed10

00001974 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1974:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1976:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1978:	f380 8811 	msr	BASEPRI, r0
	isb
    197c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1980:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1984:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1986:	b662      	cpsie	i
	isb
    1988:	f3bf 8f6f 	isb	sy

	bx	lr
    198c:	4770      	bx	lr
    198e:	bf00      	nop

00001990 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1990:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1992:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1994:	f381 8811 	msr	BASEPRI, r1

	wfe
    1998:	bf20      	wfe

	msr	BASEPRI, r0
    199a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    199e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    19a0:	4770      	bx	lr
    19a2:	bf00      	nop

000019a4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    19a4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    19a6:	2b00      	cmp	r3, #0
    19a8:	db08      	blt.n	19bc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19aa:	2201      	movs	r2, #1
    19ac:	f000 001f 	and.w	r0, r0, #31
    19b0:	fa02 f000 	lsl.w	r0, r2, r0
    19b4:	095b      	lsrs	r3, r3, #5
    19b6:	4a02      	ldr	r2, [pc, #8]	; (19c0 <arch_irq_enable+0x1c>)
    19b8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    19bc:	4770      	bx	lr
    19be:	bf00      	nop
    19c0:	e000e100 	.word	0xe000e100

000019c4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    19c4:	4b05      	ldr	r3, [pc, #20]	; (19dc <arch_irq_is_enabled+0x18>)
    19c6:	0942      	lsrs	r2, r0, #5
    19c8:	f000 001f 	and.w	r0, r0, #31
    19cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    19d0:	2301      	movs	r3, #1
    19d2:	fa03 f000 	lsl.w	r0, r3, r0
}
    19d6:	4010      	ands	r0, r2
    19d8:	4770      	bx	lr
    19da:	bf00      	nop
    19dc:	e000e100 	.word	0xe000e100

000019e0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    19e0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    19e2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19e4:	bfa8      	it	ge
    19e6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    19ea:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19ee:	bfb8      	it	lt
    19f0:	4b06      	ldrlt	r3, [pc, #24]	; (1a0c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19f2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    19f6:	bfac      	ite	ge
    19f8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19fc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a00:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a02:	bfb4      	ite	lt
    1a04:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a06:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1a0a:	4770      	bx	lr
    1a0c:	e000ed14 	.word	0xe000ed14

00001a10 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1a10:	bf30      	wfi
    b z_SysNmiOnReset
    1a12:	f7ff bffd 	b.w	1a10 <z_SysNmiOnReset>
    1a16:	bf00      	nop

00001a18 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1a18:	4a0b      	ldr	r2, [pc, #44]	; (1a48 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1a1a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1a1c:	4b0b      	ldr	r3, [pc, #44]	; (1a4c <z_arm_prep_c+0x34>)
    1a1e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1a22:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1a24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a28:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1a2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1a30:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1a38:	f002 fbf8 	bl	422c <z_bss_zero>
	z_data_copy();
    1a3c:	f003 fa16 	bl	4e6c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1a40:	f000 f9d0 	bl	1de4 <z_arm_interrupt_init>
	z_cstart();
    1a44:	f002 fc36 	bl	42b4 <z_cstart>
    1a48:	00000000 	.word	0x00000000
    1a4c:	e000ed00 	.word	0xe000ed00

00001a50 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1a50:	4a09      	ldr	r2, [pc, #36]	; (1a78 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1a52:	490a      	ldr	r1, [pc, #40]	; (1a7c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1a54:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1a56:	6809      	ldr	r1, [r1, #0]
    1a58:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a5a:	4909      	ldr	r1, [pc, #36]	; (1a80 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1a5c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a5e:	684b      	ldr	r3, [r1, #4]
    1a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1a64:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1a66:	2300      	movs	r3, #0
    1a68:	f383 8811 	msr	BASEPRI, r3
    1a6c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1a70:	6893      	ldr	r3, [r2, #8]
}
    1a72:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1a74:	4770      	bx	lr
    1a76:	bf00      	nop
    1a78:	20000b10 	.word	0x20000b10
    1a7c:	00006760 	.word	0x00006760
    1a80:	e000ed00 	.word	0xe000ed00

00001a84 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1a84:	4912      	ldr	r1, [pc, #72]	; (1ad0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1a86:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1a88:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1a8c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1a8e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1a92:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a96:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1a98:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1a9c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1aa0:	4f0c      	ldr	r7, [pc, #48]	; (1ad4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1aa2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1aa6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1aa8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1aaa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1aac:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1aae:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1ab0:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1ab2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1ab6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1ab8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1aba:	f000 fa4d 	bl	1f58 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1abe:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1ac2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1ac6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1aca:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1ace:	4770      	bx	lr
    ldr r1, =_kernel
    1ad0:	20000b10 	.word	0x20000b10
    ldr v4, =_SCS_ICSR
    1ad4:	e000ed04 	.word	0xe000ed04

00001ad8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1ad8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1adc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1ade:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1ae2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1ae6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1ae8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1aec:	2902      	cmp	r1, #2
    beq _oops
    1aee:	d0ff      	beq.n	1af0 <_oops>

00001af0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1af0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1af2:	f003 fe85 	bl	5800 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1af6:	bd01      	pop	{r0, pc}

00001af8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1af8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1afc:	9b00      	ldr	r3, [sp, #0]
    1afe:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1b02:	490a      	ldr	r1, [pc, #40]	; (1b2c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1b04:	9b01      	ldr	r3, [sp, #4]
    1b06:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1b0a:	9b02      	ldr	r3, [sp, #8]
    1b0c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1b10:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1b18:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1b1c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1b20:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1b22:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1b24:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1b26:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1b28:	4770      	bx	lr
    1b2a:	bf00      	nop
    1b2c:	000056c9 	.word	0x000056c9

00001b30 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1b30:	4a09      	ldr	r2, [pc, #36]	; (1b58 <z_check_thread_stack_fail+0x28>)
{
    1b32:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1b34:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1b36:	b170      	cbz	r0, 1b56 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1b38:	f113 0f16 	cmn.w	r3, #22
    1b3c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1b3e:	d005      	beq.n	1b4c <z_check_thread_stack_fail+0x1c>
    1b40:	f1a0 0220 	sub.w	r2, r0, #32
    1b44:	429a      	cmp	r2, r3
    1b46:	d805      	bhi.n	1b54 <z_check_thread_stack_fail+0x24>
    1b48:	4283      	cmp	r3, r0
    1b4a:	d203      	bcs.n	1b54 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1b4c:	4281      	cmp	r1, r0
    1b4e:	bf28      	it	cs
    1b50:	2000      	movcs	r0, #0
    1b52:	4770      	bx	lr
    1b54:	2000      	movs	r0, #0
}
    1b56:	4770      	bx	lr
    1b58:	20000b10 	.word	0x20000b10

00001b5c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1b5c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1b5e:	4b09      	ldr	r3, [pc, #36]	; (1b84 <arch_switch_to_main_thread+0x28>)
    1b60:	6098      	str	r0, [r3, #8]
{
    1b62:	460d      	mov	r5, r1
    1b64:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1b66:	f000 f9f7 	bl	1f58 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1b6a:	4620      	mov	r0, r4
    1b6c:	f385 8809 	msr	PSP, r5
    1b70:	2100      	movs	r1, #0
    1b72:	b663      	cpsie	if
    1b74:	f381 8811 	msr	BASEPRI, r1
    1b78:	f3bf 8f6f 	isb	sy
    1b7c:	2200      	movs	r2, #0
    1b7e:	2300      	movs	r3, #0
    1b80:	f003 fda2 	bl	56c8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1b84:	20000b10 	.word	0x20000b10

00001b88 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1b88:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1b8a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1b8c:	4a0b      	ldr	r2, [pc, #44]	; (1bbc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1b8e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1b90:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1b92:	bf1e      	ittt	ne
	movne	r1, #0
    1b94:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1b96:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1b98:	f004 fab4 	blne	6104 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1b9c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1b9e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1ba2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1ba6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1baa:	4905      	ldr	r1, [pc, #20]	; (1bc0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1bac:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1bae:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1bb0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1bb2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1bb6:	4903      	ldr	r1, [pc, #12]	; (1bc4 <_isr_wrapper+0x3c>)
	bx r1
    1bb8:	4708      	bx	r1
    1bba:	0000      	.short	0x0000
	ldr r2, =_kernel
    1bbc:	20000b10 	.word	0x20000b10
	ldr r1, =_sw_isr_table
    1bc0:	0000640c 	.word	0x0000640c
	ldr r1, =z_arm_int_exit
    1bc4:	00001bc9 	.word	0x00001bc9

00001bc8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1bc8:	4b04      	ldr	r3, [pc, #16]	; (1bdc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1bca:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1bcc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1bce:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1bd0:	d003      	beq.n	1bda <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1bd2:	4903      	ldr	r1, [pc, #12]	; (1be0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1bd8:	600a      	str	r2, [r1, #0]

00001bda <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1bda:	4770      	bx	lr
	ldr r3, =_kernel
    1bdc:	20000b10 	.word	0x20000b10
	ldr r1, =_SCS_ICSR
    1be0:	e000ed04 	.word	0xe000ed04

00001be4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1be4:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1be6:	4b1c      	ldr	r3, [pc, #112]	; (1c58 <mem_manage_fault+0x74>)
{
    1be8:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1bf0:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1bf2:	0790      	lsls	r0, r2, #30
    1bf4:	d520      	bpl.n	1c38 <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1bf6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bfa:	0612      	lsls	r2, r2, #24
    1bfc:	d51c      	bpl.n	1c38 <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1bfe:	b119      	cbz	r1, 1c08 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1c06:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c0e:	06d2      	lsls	r2, r2, #27
    1c10:	d415      	bmi.n	1c3e <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1c14:	079b      	lsls	r3, r3, #30
    1c16:	d412      	bmi.n	1c3e <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1c18:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1c1a:	4b0f      	ldr	r3, [pc, #60]	; (1c58 <mem_manage_fault+0x74>)
    1c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c1e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1c20:	bf42      	ittt	mi
    1c22:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1c24:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1c28:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1c2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c2c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1c30:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1c32:	2300      	movs	r3, #0
    1c34:	7023      	strb	r3, [r4, #0]

	return reason;
}
    1c36:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    1c38:	f06f 0015 	mvn.w	r0, #21
    1c3c:	e7e4      	b.n	1c08 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1c3e:	4b06      	ldr	r3, [pc, #24]	; (1c58 <mem_manage_fault+0x74>)
    1c40:	685b      	ldr	r3, [r3, #4]
    1c42:	0519      	lsls	r1, r3, #20
    1c44:	d5e8      	bpl.n	1c18 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1c46:	4629      	mov	r1, r5
    1c48:	f7ff ff72 	bl	1b30 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1c4c:	2800      	cmp	r0, #0
    1c4e:	d0e3      	beq.n	1c18 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1c50:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1c54:	2002      	movs	r0, #2
    1c56:	e7e0      	b.n	1c1a <mem_manage_fault+0x36>
    1c58:	e000ed00 	.word	0xe000ed00

00001c5c <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1c5c:	4b0d      	ldr	r3, [pc, #52]	; (1c94 <bus_fault.constprop.0+0x38>)
    1c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1c62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c64:	0592      	lsls	r2, r2, #22
    1c66:	d508      	bpl.n	1c7a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1c6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c6c:	0412      	lsls	r2, r2, #16
    1c6e:	d504      	bpl.n	1c7a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1c70:	b118      	cbz	r0, 1c7a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1c78:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1c7a:	4b06      	ldr	r3, [pc, #24]	; (1c94 <bus_fault.constprop.0+0x38>)
    1c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c80:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1c82:	bf58      	it	pl
    1c84:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1c88:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1c8a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1c8e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1c90:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1c92:	4770      	bx	lr
    1c94:	e000ed00 	.word	0xe000ed00

00001c98 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1c98:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1c9a:	4b48      	ldr	r3, [pc, #288]	; (1dbc <z_arm_fault+0x124>)
    1c9c:	685b      	ldr	r3, [r3, #4]
{
    1c9e:	b08a      	sub	sp, #40	; 0x28
    1ca0:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1ca6:	2600      	movs	r6, #0
    1ca8:	f386 8811 	msr	BASEPRI, r6
    1cac:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1cb0:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    1cb4:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    1cb8:	d111      	bne.n	1cde <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1cba:	f002 010c 	and.w	r1, r2, #12
    1cbe:	2908      	cmp	r1, #8
    1cc0:	d00d      	beq.n	1cde <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1cc2:	0711      	lsls	r1, r2, #28
    1cc4:	d401      	bmi.n	1cca <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    1cc6:	4605      	mov	r5, r0
			*nested_exc = true;
    1cc8:	2601      	movs	r6, #1
	*recoverable = false;
    1cca:	2200      	movs	r2, #0
	switch (fault) {
    1ccc:	3b03      	subs	r3, #3
	*recoverable = false;
    1cce:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1cd2:	2b03      	cmp	r3, #3
    1cd4:	d86b      	bhi.n	1dae <z_arm_fault+0x116>
    1cd6:	e8df f003 	tbb	[pc, r3]
    1cda:	5504      	.short	0x5504
    1cdc:	5d59      	.short	0x5d59
		return NULL;
    1cde:	4635      	mov	r5, r6
    1ce0:	e7f3      	b.n	1cca <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1ce2:	4b36      	ldr	r3, [pc, #216]	; (1dbc <z_arm_fault+0x124>)
    1ce4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1ce6:	f014 0402 	ands.w	r4, r4, #2
    1cea:	d160      	bne.n	1dae <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1cee:	2a00      	cmp	r2, #0
    1cf0:	db15      	blt.n	1d1e <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1cf4:	0052      	lsls	r2, r2, #1
    1cf6:	d512      	bpl.n	1d1e <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    1cf8:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1cfa:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    1cfe:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1d02:	4291      	cmp	r1, r2
    1d04:	d00a      	beq.n	1d1c <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    1d06:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    1d0a:	b30a      	cbz	r2, 1d50 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    1d0c:	f10d 0207 	add.w	r2, sp, #7
    1d10:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1d12:	4628      	mov	r0, r5
    1d14:	f7ff ff66 	bl	1be4 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    1d18:	4604      	mov	r4, r0
		break;
    1d1a:	e000      	b.n	1d1e <z_arm_fault+0x86>
			reason = esf->basic.r0;
    1d1c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1d1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1d22:	b99b      	cbnz	r3, 1d4c <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1d24:	2220      	movs	r2, #32
    1d26:	4629      	mov	r1, r5
    1d28:	a802      	add	r0, sp, #8
    1d2a:	f003 fd92 	bl	5852 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d30:	2e00      	cmp	r6, #0
    1d32:	d03e      	beq.n	1db2 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1d34:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1d38:	b922      	cbnz	r2, 1d44 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1d3a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1d3e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1d42:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1d44:	a902      	add	r1, sp, #8
    1d46:	4620      	mov	r0, r4
    1d48:	f003 fd58 	bl	57fc <z_arm_fatal_error>
}
    1d4c:	b00a      	add	sp, #40	; 0x28
    1d4e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1d50:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    1d54:	b12a      	cbz	r2, 1d62 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    1d56:	f10d 0107 	add.w	r1, sp, #7
    1d5a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1d5c:	f7ff ff7e 	bl	1c5c <bus_fault.constprop.0>
    1d60:	e7da      	b.n	1d18 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    1d62:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    1d64:	b292      	uxth	r2, r2
    1d66:	2a00      	cmp	r2, #0
    1d68:	d0d9      	beq.n	1d1e <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1d72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1d76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d78:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1d7c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1d80:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    1d82:	e7cc      	b.n	1d1e <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    1d84:	f10d 0207 	add.w	r2, sp, #7
    1d88:	2100      	movs	r1, #0
    1d8a:	e7c2      	b.n	1d12 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    1d8c:	f10d 0107 	add.w	r1, sp, #7
    1d90:	2000      	movs	r0, #0
    1d92:	e7e3      	b.n	1d5c <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d94:	4b09      	ldr	r3, [pc, #36]	; (1dbc <z_arm_fault+0x124>)
    1d96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1d9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1da2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1da4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1da8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1dac:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1dae:	2400      	movs	r4, #0
    1db0:	e7b5      	b.n	1d1e <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1db2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1db6:	f023 0301 	bic.w	r3, r3, #1
    1dba:	e7c2      	b.n	1d42 <z_arm_fault+0xaa>
    1dbc:	e000ed00 	.word	0xe000ed00

00001dc0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1dc0:	4a02      	ldr	r2, [pc, #8]	; (1dcc <z_arm_fault_init+0xc>)
    1dc2:	6953      	ldr	r3, [r2, #20]
    1dc4:	f043 0310 	orr.w	r3, r3, #16
    1dc8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1dca:	4770      	bx	lr
    1dcc:	e000ed00 	.word	0xe000ed00

00001dd0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1dd0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1dd4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1dd8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1dda:	4672      	mov	r2, lr
	bl z_arm_fault
    1ddc:	f7ff ff5c 	bl	1c98 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1de0:	bd01      	pop	{r0, pc}
    1de2:	bf00      	nop

00001de4 <z_arm_interrupt_init>:
    1de4:	4804      	ldr	r0, [pc, #16]	; (1df8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1de6:	2300      	movs	r3, #0
    1de8:	2120      	movs	r1, #32
    1dea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1dec:	3301      	adds	r3, #1
    1dee:	2b30      	cmp	r3, #48	; 0x30
    1df0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1df4:	d1f9      	bne.n	1dea <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1df6:	4770      	bx	lr
    1df8:	e000e100 	.word	0xe000e100

00001dfc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1dfc:	2000      	movs	r0, #0
    msr CONTROL, r0
    1dfe:	f380 8814 	msr	CONTROL, r0
    isb
    1e02:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1e06:	f004 fa7f 	bl	6308 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1e0a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1e0c:	490d      	ldr	r1, [pc, #52]	; (1e44 <__start+0x48>)
    str r0, [r1]
    1e0e:	6008      	str	r0, [r1, #0]
    dsb
    1e10:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1e14:	480c      	ldr	r0, [pc, #48]	; (1e48 <__start+0x4c>)
    msr msp, r0
    1e16:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1e1a:	f000 f82b 	bl	1e74 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1e1e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1e20:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1e24:	4809      	ldr	r0, [pc, #36]	; (1e4c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1e26:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1e2a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1e2c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1e30:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1e34:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1e36:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1e38:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1e3c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1e40:	f7ff fdea 	bl	1a18 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1e44:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1e48:	20001d80 	.word	0x20001d80
    ldr r0, =z_interrupt_stacks
    1e4c:	20001f00 	.word	0x20001f00

00001e50 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1e50:	4907      	ldr	r1, [pc, #28]	; (1e70 <z_arm_clear_arm_mpu_config+0x20>)
    1e52:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1e56:	2300      	movs	r3, #0
	int num_regions =
    1e58:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1e5c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1e5e:	4293      	cmp	r3, r2
    1e60:	d100      	bne.n	1e64 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1e62:	4770      	bx	lr
  MPU->RNR = rnr;
    1e64:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1e68:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1e6c:	3301      	adds	r3, #1
    1e6e:	e7f6      	b.n	1e5e <z_arm_clear_arm_mpu_config+0xe>
    1e70:	e000ed00 	.word	0xe000ed00

00001e74 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1e74:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1e76:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1e78:	2300      	movs	r3, #0
    1e7a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1e7e:	f7ff ffe7 	bl	1e50 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1e82:	4b14      	ldr	r3, [pc, #80]	; (1ed4 <z_arm_init_arch_hw_at_boot+0x60>)
    1e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1e90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1e94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1e98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1e9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1ea0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1ea4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1ea8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1eac:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1eb0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1eb4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1eb8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1ebc:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1ec0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1ec4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1ec8:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1eca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ece:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1ed2:	bd08      	pop	{r3, pc}
    1ed4:	e000e100 	.word	0xe000e100

00001ed8 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1ed8:	4b08      	ldr	r3, [pc, #32]	; (1efc <z_impl_k_thread_abort+0x24>)
    1eda:	689b      	ldr	r3, [r3, #8]
    1edc:	4283      	cmp	r3, r0
    1ede:	d10b      	bne.n	1ef8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1ee0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1ee4:	b143      	cbz	r3, 1ef8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1ee6:	4b06      	ldr	r3, [pc, #24]	; (1f00 <z_impl_k_thread_abort+0x28>)
    1ee8:	685a      	ldr	r2, [r3, #4]
    1eea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1eee:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1ef2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1ef6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1ef8:	f002 bf66 	b.w	4dc8 <z_thread_abort>
    1efc:	20000b10 	.word	0x20000b10
    1f00:	e000ed00 	.word	0xe000ed00

00001f04 <arch_timing_init>:
 * @return 0
 */
static inline int z_arm_dwt_init(void)
{
	/* Enable tracing */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    1f04:	4a07      	ldr	r2, [pc, #28]	; (1f24 <arch_timing_init+0x20>)
    1f06:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    1f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1f0e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 * @return 0
 */
static inline int z_arm_dwt_init_cycle_counter(void)
{
	/* Clear and enable the cycle counter */
	DWT->CYCCNT = 0;
    1f12:	4b05      	ldr	r3, [pc, #20]	; (1f28 <arch_timing_init+0x24>)
    1f14:	2200      	movs	r2, #0
    1f16:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    1f18:	681a      	ldr	r2, [r3, #0]
    1f1a:	f042 0201 	orr.w	r2, r2, #1
    1f1e:	601a      	str	r2, [r3, #0]

void arch_timing_init(void)
{
	z_arm_dwt_init();
	z_arm_dwt_init_cycle_counter();
}
    1f20:	4770      	bx	lr
    1f22:	bf00      	nop
    1f24:	e000ed00 	.word	0xe000ed00
    1f28:	e0001000 	.word	0xe0001000

00001f2c <arch_timing_start>:
 *
 * This routine starts the cycle counter and resets its value to zero.
 */
static inline void z_arm_dwt_cycle_count_start(void)
{
	DWT->CYCCNT = 0;
    1f2c:	4b03      	ldr	r3, [pc, #12]	; (1f3c <arch_timing_start+0x10>)
    1f2e:	2200      	movs	r2, #0
    1f30:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    1f32:	681a      	ldr	r2, [r3, #0]
    1f34:	f042 0201 	orr.w	r2, r2, #1
    1f38:	601a      	str	r2, [r3, #0]

void arch_timing_start(void)
{
	z_arm_dwt_cycle_count_start();
}
    1f3a:	4770      	bx	lr
    1f3c:	e0001000 	.word	0xe0001000

00001f40 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1f40:	4b02      	ldr	r3, [pc, #8]	; (1f4c <z_arm_configure_static_mpu_regions+0xc>)
    1f42:	4a03      	ldr	r2, [pc, #12]	; (1f50 <z_arm_configure_static_mpu_regions+0x10>)
    1f44:	4803      	ldr	r0, [pc, #12]	; (1f54 <z_arm_configure_static_mpu_regions+0x14>)
    1f46:	2101      	movs	r1, #1
    1f48:	f000 b86e 	b.w	2028 <arm_core_mpu_configure_static_mpu_regions>
    1f4c:	20040000 	.word	0x20040000
    1f50:	20000000 	.word	0x20000000
    1f54:	000065e4 	.word	0x000065e4

00001f58 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1f58:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1f5a:	4b05      	ldr	r3, [pc, #20]	; (1f70 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1f5c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    1f5e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1f60:	4a04      	ldr	r2, [pc, #16]	; (1f74 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1f62:	2120      	movs	r1, #32
    1f64:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1f68:	4618      	mov	r0, r3
    1f6a:	2101      	movs	r1, #1
    1f6c:	f000 b866 	b.w	203c <arm_core_mpu_configure_dynamic_mpu_regions>
    1f70:	20000984 	.word	0x20000984
    1f74:	150b0000 	.word	0x150b0000

00001f78 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1f78:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1f7a:	4f1f      	ldr	r7, [pc, #124]	; (1ff8 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1f7c:	2600      	movs	r6, #0
    1f7e:	428e      	cmp	r6, r1
    1f80:	db01      	blt.n	1f86 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1f82:	4610      	mov	r0, r2
    1f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1f86:	6844      	ldr	r4, [r0, #4]
    1f88:	b39c      	cbz	r4, 1ff2 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    1f8a:	b153      	cbz	r3, 1fa2 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1f8c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1f90:	ea14 0f0c 	tst.w	r4, ip
    1f94:	d118      	bne.n	1fc8 <mpu_configure_regions+0x50>
		&&
    1f96:	2c1f      	cmp	r4, #31
    1f98:	d916      	bls.n	1fc8 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    1f9a:	6805      	ldr	r5, [r0, #0]
		&&
    1f9c:	ea1c 0f05 	tst.w	ip, r5
    1fa0:	d112      	bne.n	1fc8 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1fa2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1fa4:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1fa6:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1faa:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    1fac:	d90f      	bls.n	1fce <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    1fae:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1fb2:	d80e      	bhi.n	1fd2 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1fb4:	3c01      	subs	r4, #1
    1fb6:	fab4 f484 	clz	r4, r4
    1fba:	f1c4 041f 	rsb	r4, r4, #31
    1fbe:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1fc0:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1fc2:	ea4c 0404 	orr.w	r4, ip, r4
    1fc6:	d906      	bls.n	1fd6 <mpu_configure_regions+0x5e>
			return -EINVAL;
    1fc8:	f06f 0215 	mvn.w	r2, #21
    1fcc:	e7d9      	b.n	1f82 <mpu_configure_regions+0xa>
		return REGION_32B;
    1fce:	2408      	movs	r4, #8
    1fd0:	e7f6      	b.n	1fc0 <mpu_configure_regions+0x48>
		return REGION_4G;
    1fd2:	243e      	movs	r4, #62	; 0x3e
    1fd4:	e7f4      	b.n	1fc0 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1fd6:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    1fda:	4315      	orrs	r5, r2
    1fdc:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1fe0:	f044 0401 	orr.w	r4, r4, #1
    1fe4:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1fe8:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    1fec:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1fee:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    1ff2:	3601      	adds	r6, #1
    1ff4:	300c      	adds	r0, #12
    1ff6:	e7c2      	b.n	1f7e <mpu_configure_regions+0x6>
    1ff8:	e000ed00 	.word	0xe000ed00

00001ffc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1ffc:	4b04      	ldr	r3, [pc, #16]	; (2010 <arm_core_mpu_enable+0x14>)
    1ffe:	2205      	movs	r2, #5
    2000:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2004:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2008:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    200c:	4770      	bx	lr
    200e:	bf00      	nop
    2010:	e000ed00 	.word	0xe000ed00

00002014 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2014:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2018:	4b02      	ldr	r3, [pc, #8]	; (2024 <arm_core_mpu_disable+0x10>)
    201a:	2200      	movs	r2, #0
    201c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2020:	4770      	bx	lr
    2022:	bf00      	nop
    2024:	e000ed00 	.word	0xe000ed00

00002028 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2028:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    202a:	4c03      	ldr	r4, [pc, #12]	; (2038 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    202c:	2301      	movs	r3, #1
    202e:	7822      	ldrb	r2, [r4, #0]
    2030:	f7ff ffa2 	bl	1f78 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2034:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2036:	bd10      	pop	{r4, pc}
    2038:	20000d21 	.word	0x20000d21

0000203c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    203c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    203e:	4a09      	ldr	r2, [pc, #36]	; (2064 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    2040:	2300      	movs	r3, #0
    2042:	7812      	ldrb	r2, [r2, #0]
    2044:	f7ff ff98 	bl	1f78 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2048:	f110 0f16 	cmn.w	r0, #22
    204c:	d002      	beq.n	2054 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    204e:	4a06      	ldr	r2, [pc, #24]	; (2068 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2050:	2807      	cmp	r0, #7
    2052:	dd00      	ble.n	2056 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2054:	bd08      	pop	{r3, pc}
    2056:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    205a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    205e:	3001      	adds	r0, #1
    2060:	e7f6      	b.n	2050 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    2062:	bf00      	nop
    2064:	20000d21 	.word	0x20000d21
    2068:	e000ed00 	.word	0xe000ed00

0000206c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    206c:	4914      	ldr	r1, [pc, #80]	; (20c0 <z_arm_mpu_init+0x54>)
    206e:	6808      	ldr	r0, [r1, #0]
    2070:	2808      	cmp	r0, #8
{
    2072:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2074:	d821      	bhi.n	20ba <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2076:	f7ff ffcd 	bl	2014 <arm_core_mpu_disable>
    207a:	4c12      	ldr	r4, [pc, #72]	; (20c4 <z_arm_mpu_init+0x58>)
    207c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    207e:	2200      	movs	r2, #0
    2080:	4290      	cmp	r0, r2
    2082:	f101 010c 	add.w	r1, r1, #12
    2086:	d105      	bne.n	2094 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2088:	4b0f      	ldr	r3, [pc, #60]	; (20c8 <z_arm_mpu_init+0x5c>)
    208a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    208c:	f7ff ffb6 	bl	1ffc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2090:	2000      	movs	r0, #0
}
    2092:	bd10      	pop	{r4, pc}
    2094:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2098:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    209c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    20a0:	4313      	orrs	r3, r2
    20a2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    20a6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    20aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
    20ae:	f043 0301 	orr.w	r3, r3, #1
    20b2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    20b6:	3201      	adds	r2, #1
    20b8:	e7e2      	b.n	2080 <z_arm_mpu_init+0x14>
		return -1;
    20ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    20be:	e7e8      	b.n	2092 <z_arm_mpu_init+0x26>
    20c0:	000065f0 	.word	0x000065f0
    20c4:	e000ed00 	.word	0xe000ed00
    20c8:	20000d21 	.word	0x20000d21

000020cc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    20cc:	4b01      	ldr	r3, [pc, #4]	; (20d4 <__stdout_hook_install+0x8>)
    20ce:	6018      	str	r0, [r3, #0]
}
    20d0:	4770      	bx	lr
    20d2:	bf00      	nop
    20d4:	20000028 	.word	0x20000028

000020d8 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    20d8:	b510      	push	{r4, lr}
	__asm__ volatile(
    20da:	f04f 0320 	mov.w	r3, #32
    20de:	f3ef 8011 	mrs	r0, BASEPRI
    20e2:	f383 8812 	msr	BASEPRI_MAX, r3
    20e6:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    20ea:	4a11      	ldr	r2, [pc, #68]	; (2130 <nordicsemi_nrf52_init+0x58>)
    20ec:	2301      	movs	r3, #1
    20ee:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    20f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    20f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    20fa:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    20fe:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    2102:	2c08      	cmp	r4, #8
    2104:	d108      	bne.n	2118 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2106:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    210a:	2905      	cmp	r1, #5
    210c:	d804      	bhi.n	2118 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    210e:	4c09      	ldr	r4, [pc, #36]	; (2134 <nordicsemi_nrf52_init+0x5c>)
    2110:	5c61      	ldrb	r1, [r4, r1]
    2112:	b109      	cbz	r1, 2118 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2114:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    211c:	2201      	movs	r2, #1
    211e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2122:	f380 8811 	msr	BASEPRI, r0
    2126:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    212a:	2000      	movs	r0, #0
    212c:	bd10      	pop	{r4, pc}
    212e:	bf00      	nop
    2130:	4001e000 	.word	0x4001e000
    2134:	00006968 	.word	0x00006968

00002138 <sys_arch_reboot>:
    *p_gpregret = val;
    2138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    213c:	b2c0      	uxtb	r0, r0
    213e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2142:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2146:	4905      	ldr	r1, [pc, #20]	; (215c <sys_arch_reboot+0x24>)
    2148:	4b05      	ldr	r3, [pc, #20]	; (2160 <sys_arch_reboot+0x28>)
    214a:	68ca      	ldr	r2, [r1, #12]
    214c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2150:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2152:	60cb      	str	r3, [r1, #12]
    2154:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2158:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    215a:	e7fd      	b.n	2158 <sys_arch_reboot+0x20>
    215c:	e000ed00 	.word	0xe000ed00
    2160:	05fa0004 	.word	0x05fa0004

00002164 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2164:	b120      	cbz	r0, 2170 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2166:	4b03      	ldr	r3, [pc, #12]	; (2174 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2168:	0180      	lsls	r0, r0, #6
    216a:	f043 0301 	orr.w	r3, r3, #1
    216e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2170:	4770      	bx	lr
    2172:	bf00      	nop
    2174:	000065b0 	.word	0x000065b0

00002178 <timing_init>:

static bool has_inited;
static atomic_val_t started_ref;

void timing_init(void)
{
    2178:	b510      	push	{r4, lr}
	if (has_inited) {
    217a:	4c04      	ldr	r4, [pc, #16]	; (218c <timing_init+0x14>)
    217c:	7823      	ldrb	r3, [r4, #0]
    217e:	b91b      	cbnz	r3, 2188 <timing_init+0x10>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_init();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_init();
#else
	arch_timing_init();
    2180:	f7ff fec0 	bl	1f04 <arch_timing_init>
#endif

	has_inited = true;
    2184:	2301      	movs	r3, #1
    2186:	7023      	strb	r3, [r4, #0]
}
    2188:	bd10      	pop	{r4, pc}
    218a:	bf00      	nop
    218c:	20000d22 	.word	0x20000d22

00002190 <timing_start>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2190:	4b07      	ldr	r3, [pc, #28]	; (21b0 <timing_start+0x20>)
    2192:	f3bf 8f5b 	dmb	ish
    2196:	e853 2f00 	ldrex	r2, [r3]
    219a:	1c51      	adds	r1, r2, #1
    219c:	e843 1000 	strex	r0, r1, [r3]
    21a0:	2800      	cmp	r0, #0
    21a2:	d1f8      	bne.n	2196 <timing_start+0x6>
    21a4:	f3bf 8f5b 	dmb	ish

void timing_start(void)
{
	if (atomic_inc(&started_ref) != 0) {
    21a8:	b90a      	cbnz	r2, 21ae <timing_start+0x1e>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_start();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_start();
#else
	arch_timing_start();
    21aa:	f7ff bebf 	b.w	1f2c <arch_timing_start>
#endif
}
    21ae:	4770      	bx	lr
    21b0:	20000990 	.word	0x20000990

000021b4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    21b4:	4b08      	ldr	r3, [pc, #32]	; (21d8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    21b6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    21b8:	1ac3      	subs	r3, r0, r3
{
    21ba:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    21bc:	4907      	ldr	r1, [pc, #28]	; (21dc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    21be:	109b      	asrs	r3, r3, #2
{
    21c0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    21c2:	4359      	muls	r1, r3
    21c4:	4806      	ldr	r0, [pc, #24]	; (21e0 <onoff_stop+0x2c>)
    21c6:	2240      	movs	r2, #64	; 0x40
    21c8:	f003 fb88 	bl	58dc <stop>
	notify(mgr, res);
    21cc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    21ce:	4601      	mov	r1, r0
	notify(mgr, res);
    21d0:	4620      	mov	r0, r4
}
    21d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    21d6:	4718      	bx	r3
    21d8:	200009a4 	.word	0x200009a4
    21dc:	b6db6db7 	.word	0xb6db6db7
    21e0:	0000637c 	.word	0x0000637c

000021e4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    21e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    21e6:	4c0c      	ldr	r4, [pc, #48]	; (2218 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    21e8:	4a0c      	ldr	r2, [pc, #48]	; (221c <onoff_start+0x38>)
    21ea:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    21ec:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    21ee:	9300      	str	r3, [sp, #0]
{
    21f0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    21f2:	460b      	mov	r3, r1
    21f4:	490a      	ldr	r1, [pc, #40]	; (2220 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    21f6:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    21f8:	4361      	muls	r1, r4
{
    21fa:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    21fc:	4809      	ldr	r0, [pc, #36]	; (2224 <onoff_start+0x40>)
    21fe:	f003 fb99 	bl	5934 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2202:	1e01      	subs	r1, r0, #0
    2204:	da05      	bge.n	2212 <onoff_start+0x2e>
		notify(mgr, err);
    2206:	4630      	mov	r0, r6
    2208:	462b      	mov	r3, r5
	}
}
    220a:	b002      	add	sp, #8
    220c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2210:	4718      	bx	r3
}
    2212:	b002      	add	sp, #8
    2214:	bd70      	pop	{r4, r5, r6, pc}
    2216:	bf00      	nop
    2218:	200009a4 	.word	0x200009a4
    221c:	000059a5 	.word	0x000059a5
    2220:	b6db6db7 	.word	0xb6db6db7
    2224:	0000637c 	.word	0x0000637c

00002228 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2228:	2200      	movs	r2, #0
{
    222a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    222c:	2101      	movs	r1, #1
{
    222e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2230:	4610      	mov	r0, r2
    2232:	f7ff fbd5 	bl	19e0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2236:	480f      	ldr	r0, [pc, #60]	; (2274 <clk_init+0x4c>)
    2238:	f001 f934 	bl	34a4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    223c:	4b0e      	ldr	r3, [pc, #56]	; (2278 <clk_init+0x50>)
    223e:	4298      	cmp	r0, r3
    2240:	d115      	bne.n	226e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2242:	f003 fd8c 	bl	5d5e <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2246:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2248:	490c      	ldr	r1, [pc, #48]	; (227c <clk_init+0x54>)
    224a:	4630      	mov	r0, r6
    224c:	f003 f9e0 	bl	5610 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2250:	2800      	cmp	r0, #0
    2252:	db0b      	blt.n	226c <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    2254:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2256:	4909      	ldr	r1, [pc, #36]	; (227c <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2258:	2501      	movs	r5, #1
    225a:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    225c:	f104 001c 	add.w	r0, r4, #28
    2260:	f003 f9d6 	bl	5610 <onoff_manager_init>
		if (err < 0) {
    2264:	2800      	cmp	r0, #0
    2266:	db01      	blt.n	226c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2268:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    226a:	2000      	movs	r0, #0
}
    226c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    226e:	f06f 0004 	mvn.w	r0, #4
    2272:	e7fb      	b.n	226c <clk_init+0x44>
    2274:	000022b5 	.word	0x000022b5
    2278:	0bad0000 	.word	0x0bad0000
    227c:	00006638 	.word	0x00006638

00002280 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2280:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2282:	230c      	movs	r3, #12
    2284:	4809      	ldr	r0, [pc, #36]	; (22ac <clkstarted_handle.constprop.0+0x2c>)
    2286:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2288:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    228a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    228c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2290:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2292:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2294:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2296:	4418      	add	r0, r3
    2298:	f003 fb0d 	bl	58b6 <set_on_state>
	if (callback) {
    229c:	b12d      	cbz	r5, 22aa <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    229e:	4632      	mov	r2, r6
    22a0:	462b      	mov	r3, r5
    22a2:	4803      	ldr	r0, [pc, #12]	; (22b0 <clkstarted_handle.constprop.0+0x30>)
}
    22a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    22a8:	4718      	bx	r3
}
    22aa:	bd70      	pop	{r4, r5, r6, pc}
    22ac:	200009a4 	.word	0x200009a4
    22b0:	0000637c 	.word	0x0000637c

000022b4 <clock_event_handler>:
	switch (event) {
    22b4:	b110      	cbz	r0, 22bc <clock_event_handler+0x8>
    22b6:	2801      	cmp	r0, #1
    22b8:	d004      	beq.n	22c4 <clock_event_handler+0x10>
    22ba:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    22bc:	4b03      	ldr	r3, [pc, #12]	; (22cc <clock_event_handler+0x18>)
    22be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    22c0:	075b      	lsls	r3, r3, #29
    22c2:	d101      	bne.n	22c8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    22c4:	f7ff bfdc 	b.w	2280 <clkstarted_handle.constprop.0>
}
    22c8:	4770      	bx	lr
    22ca:	bf00      	nop
    22cc:	200009a4 	.word	0x200009a4

000022d0 <generic_hfclk_start>:
{
    22d0:	b508      	push	{r3, lr}
	__asm__ volatile(
    22d2:	f04f 0320 	mov.w	r3, #32
    22d6:	f3ef 8111 	mrs	r1, BASEPRI
    22da:	f383 8812 	msr	BASEPRI_MAX, r3
    22de:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    22e2:	4a12      	ldr	r2, [pc, #72]	; (232c <generic_hfclk_start+0x5c>)
    22e4:	6813      	ldr	r3, [r2, #0]
    22e6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    22ea:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    22ee:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    22f0:	d00c      	beq.n	230c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    22f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    22f6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    22fa:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    22fe:	f013 0301 	ands.w	r3, r3, #1
    2302:	d003      	beq.n	230c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2304:	480a      	ldr	r0, [pc, #40]	; (2330 <generic_hfclk_start+0x60>)
    2306:	f003 fad6 	bl	58b6 <set_on_state>
			already_started = true;
    230a:	2301      	movs	r3, #1
	__asm__ volatile(
    230c:	f381 8811 	msr	BASEPRI, r1
    2310:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2314:	b123      	cbz	r3, 2320 <generic_hfclk_start+0x50>
}
    2316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    231a:	2000      	movs	r0, #0
    231c:	f7ff bfb0 	b.w	2280 <clkstarted_handle.constprop.0>
}
    2320:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2324:	2001      	movs	r0, #1
    2326:	f003 bd27 	b.w	5d78 <nrfx_clock_start>
    232a:	bf00      	nop
    232c:	200009f4 	.word	0x200009f4
    2330:	200009e4 	.word	0x200009e4

00002334 <api_blocking_start>:
{
    2334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2336:	2200      	movs	r2, #0
    2338:	2301      	movs	r3, #1
    233a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    233e:	4a09      	ldr	r2, [pc, #36]	; (2364 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2340:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2344:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2346:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    234a:	f003 fb24 	bl	5996 <api_start>
	if (err < 0) {
    234e:	2800      	cmp	r0, #0
    2350:	db05      	blt.n	235e <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2352:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2356:	2300      	movs	r3, #0
    2358:	4668      	mov	r0, sp
    235a:	f002 fa15 	bl	4788 <z_impl_k_sem_take>
}
    235e:	b005      	add	sp, #20
    2360:	f85d fb04 	ldr.w	pc, [sp], #4
    2364:	000059c3 	.word	0x000059c3

00002368 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2368:	4b09      	ldr	r3, [pc, #36]	; (2390 <generic_hfclk_stop+0x28>)
    236a:	f3bf 8f5b 	dmb	ish
    236e:	e853 2f00 	ldrex	r2, [r3]
    2372:	f022 0102 	bic.w	r1, r2, #2
    2376:	e843 1000 	strex	r0, r1, [r3]
    237a:	2800      	cmp	r0, #0
    237c:	d1f7      	bne.n	236e <generic_hfclk_stop+0x6>
    237e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2382:	07d3      	lsls	r3, r2, #31
    2384:	d402      	bmi.n	238c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2386:	2001      	movs	r0, #1
    2388:	f003 bd33 	b.w	5df2 <nrfx_clock_stop>
}
    238c:	4770      	bx	lr
    238e:	bf00      	nop
    2390:	200009f4 	.word	0x200009f4

00002394 <z_nrf_clock_control_lf_on>:
{
    2394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2398:	4939      	ldr	r1, [pc, #228]	; (2480 <z_nrf_clock_control_lf_on+0xec>)
    239a:	f3bf 8f5b 	dmb	ish
    239e:	4607      	mov	r7, r0
    23a0:	2201      	movs	r2, #1
    23a2:	e851 3f00 	ldrex	r3, [r1]
    23a6:	e841 2000 	strex	r0, r2, [r1]
    23aa:	2800      	cmp	r0, #0
    23ac:	d1f9      	bne.n	23a2 <z_nrf_clock_control_lf_on+0xe>
    23ae:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    23b2:	b933      	cbnz	r3, 23c2 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    23b4:	4933      	ldr	r1, [pc, #204]	; (2484 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    23b6:	4834      	ldr	r0, [pc, #208]	; (2488 <z_nrf_clock_control_lf_on+0xf4>)
    23b8:	604b      	str	r3, [r1, #4]
    23ba:	60cb      	str	r3, [r1, #12]
    23bc:	608a      	str	r2, [r1, #8]
    23be:	f003 f93a 	bl	5636 <onoff_request>
	switch (start_mode) {
    23c2:	1e7b      	subs	r3, r7, #1
    23c4:	2b01      	cmp	r3, #1
    23c6:	d82f      	bhi.n	2428 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    23c8:	2f01      	cmp	r7, #1
    23ca:	d107      	bne.n	23dc <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    23cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23d0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    23d4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    23d8:	2b01      	cmp	r3, #1
    23da:	d025      	beq.n	2428 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    23dc:	f003 fe8c 	bl	60f8 <k_is_in_isr>
    23e0:	4604      	mov	r4, r0
    23e2:	b918      	cbnz	r0, 23ec <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    23e4:	4b29      	ldr	r3, [pc, #164]	; (248c <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    23e6:	781b      	ldrb	r3, [r3, #0]
    23e8:	2b00      	cmp	r3, #0
    23ea:	d141      	bne.n	2470 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    23ec:	f04f 0320 	mov.w	r3, #32
    23f0:	f3ef 8611 	mrs	r6, BASEPRI
    23f4:	f383 8812 	msr	BASEPRI_MAX, r3
    23f8:	f3bf 8f6f 	isb	sy
    23fc:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23fe:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2490 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2402:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2406:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    240a:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    240e:	03d2      	lsls	r2, r2, #15
    2410:	d50c      	bpl.n	242c <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2412:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2416:	2b01      	cmp	r3, #1
    2418:	d001      	beq.n	241e <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    241a:	2f01      	cmp	r7, #1
    241c:	d106      	bne.n	242c <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    241e:	b30c      	cbz	r4, 2464 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    2420:	f386 8811 	msr	BASEPRI, r6
    2424:	f3bf 8f6f 	isb	sy
}
    2428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    242c:	b1ac      	cbz	r4, 245a <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    242e:	4630      	mov	r0, r6
    2430:	f7ff faae 	bl	1990 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2434:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2438:	2b00      	cmp	r3, #0
    243a:	d1e4      	bne.n	2406 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    243c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2440:	2a00      	cmp	r2, #0
    2442:	d0e0      	beq.n	2406 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2444:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2448:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    244c:	2301      	movs	r3, #1
    244e:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    2452:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2456:	60ab      	str	r3, [r5, #8]
}
    2458:	e7d5      	b.n	2406 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    245a:	2100      	movs	r1, #0
    245c:	2021      	movs	r0, #33	; 0x21
    245e:	f002 fc93 	bl	4d88 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2462:	e7e7      	b.n	2434 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    2464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2468:	2202      	movs	r2, #2
    246a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    246e:	e7db      	b.n	2428 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    2470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2474:	2202      	movs	r2, #2
    2476:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    247a:	4606      	mov	r6, r0
}
    247c:	e7bf      	b.n	23fe <z_nrf_clock_control_lf_on+0x6a>
    247e:	bf00      	nop
    2480:	200009f8 	.word	0x200009f8
    2484:	20000994 	.word	0x20000994
    2488:	200009c0 	.word	0x200009c0
    248c:	20001133 	.word	0x20001133
    2490:	e000e100 	.word	0xe000e100

00002494 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2494:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2496:	4b08      	ldr	r3, [pc, #32]	; (24b8 <uart_console_init+0x24>)
    2498:	4808      	ldr	r0, [pc, #32]	; (24bc <uart_console_init+0x28>)
    249a:	6018      	str	r0, [r3, #0]
    249c:	f003 fdbf 	bl	601e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    24a0:	b138      	cbz	r0, 24b2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    24a2:	4807      	ldr	r0, [pc, #28]	; (24c0 <uart_console_init+0x2c>)
    24a4:	f7ff fe12 	bl	20cc <__stdout_hook_install>
	__printk_hook_install(console_out);
    24a8:	4805      	ldr	r0, [pc, #20]	; (24c0 <uart_console_init+0x2c>)
    24aa:	f7fe f8a9 	bl	600 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    24ae:	2000      	movs	r0, #0
}
    24b0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    24b2:	f06f 0012 	mvn.w	r0, #18
    24b6:	e7fb      	b.n	24b0 <uart_console_init+0x1c>
    24b8:	200009fc 	.word	0x200009fc
    24bc:	000063dc 	.word	0x000063dc
    24c0:	000024c5 	.word	0x000024c5

000024c4 <console_out>:
	if ('\n' == c) {
    24c4:	280a      	cmp	r0, #10
{
    24c6:	b538      	push	{r3, r4, r5, lr}
    24c8:	4d07      	ldr	r5, [pc, #28]	; (24e8 <console_out+0x24>)
    24ca:	4604      	mov	r4, r0
	if ('\n' == c) {
    24cc:	d104      	bne.n	24d8 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    24ce:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    24d0:	6883      	ldr	r3, [r0, #8]
    24d2:	210d      	movs	r1, #13
    24d4:	685b      	ldr	r3, [r3, #4]
    24d6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    24d8:	6828      	ldr	r0, [r5, #0]
    24da:	6883      	ldr	r3, [r0, #8]
    24dc:	b2e1      	uxtb	r1, r4
    24de:	685b      	ldr	r3, [r3, #4]
    24e0:	4798      	blx	r3
}
    24e2:	4620      	mov	r0, r4
    24e4:	bd38      	pop	{r3, r4, r5, pc}
    24e6:	bf00      	nop
    24e8:	200009fc 	.word	0x200009fc

000024ec <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    24ec:	b530      	push	{r4, r5, lr}
	return port->config;
    24ee:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    24f0:	7b04      	ldrb	r4, [r0, #12]
    24f2:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    24f6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    24fa:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    24fe:	b085      	sub	sp, #20
    2500:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    2504:	d104      	bne.n	2510 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    2506:	4628      	mov	r0, r5
    2508:	f001 fa4e 	bl	39a8 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    250c:	2000      	movs	r0, #0
    250e:	e032      	b.n	2576 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2510:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2514:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2518:	d12f      	bne.n	257a <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    251a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    251e:	bf0c      	ite	eq
    2520:	2304      	moveq	r3, #4
    2522:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2524:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2528:	6883      	ldr	r3, [r0, #8]
    252a:	fa23 f101 	lsr.w	r1, r3, r1
    252e:	07c9      	lsls	r1, r1, #31
    2530:	d42f      	bmi.n	2592 <gpio_nrfx_pin_interrupt_configure+0xa6>
    2532:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2536:	d12c      	bne.n	2592 <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    2538:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    253a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    253c:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    2540:	4a1c      	ldr	r2, [pc, #112]	; (25b4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2542:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    2546:	bf18      	it	ne
    2548:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    254c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2550:	07db      	lsls	r3, r3, #31
    2552:	d41e      	bmi.n	2592 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2554:	f10d 0407 	add.w	r4, sp, #7
    2558:	4621      	mov	r1, r4
    255a:	4628      	mov	r0, r5
    255c:	f001 f988 	bl	3870 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2560:	4b15      	ldr	r3, [pc, #84]	; (25b8 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    2562:	4298      	cmp	r0, r3
    2564:	d114      	bne.n	2590 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    2566:	4620      	mov	r0, r4
    2568:	f001 f9d0 	bl	390c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    256c:	4b13      	ldr	r3, [pc, #76]	; (25bc <gpio_nrfx_pin_interrupt_configure+0xd0>)
    256e:	4298      	cmp	r0, r3
    2570:	d00e      	beq.n	2590 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    2572:	f06f 000b 	mvn.w	r0, #11
}
    2576:	b005      	add	sp, #20
    2578:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    257a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    257e:	d005      	beq.n	258c <gpio_nrfx_pin_interrupt_configure+0xa0>
    2580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2584:	bf0c      	ite	eq
    2586:	2302      	moveq	r3, #2
    2588:	2301      	movne	r3, #1
    258a:	e7cb      	b.n	2524 <gpio_nrfx_pin_interrupt_configure+0x38>
    258c:	2303      	movs	r3, #3
    258e:	e7c9      	b.n	2524 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    2590:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2592:	2300      	movs	r3, #0
    2594:	4619      	mov	r1, r3
    2596:	aa02      	add	r2, sp, #8
    2598:	4628      	mov	r0, r5
    259a:	f001 f843 	bl	3624 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    259e:	4b07      	ldr	r3, [pc, #28]	; (25bc <gpio_nrfx_pin_interrupt_configure+0xd0>)
    25a0:	4298      	cmp	r0, r3
    25a2:	d104      	bne.n	25ae <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    25a4:	2101      	movs	r1, #1
    25a6:	4628      	mov	r0, r5
    25a8:	f001 f9b6 	bl	3918 <nrfx_gpiote_trigger_enable>
    25ac:	e7ae      	b.n	250c <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    25ae:	f06f 0004 	mvn.w	r0, #4
    25b2:	e7e0      	b.n	2576 <gpio_nrfx_pin_interrupt_configure+0x8a>
    25b4:	50000300 	.word	0x50000300
    25b8:	0bad0004 	.word	0x0bad0004
    25bc:	0bad0000 	.word	0x0bad0000

000025c0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    25c0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    25c2:	f001 f993 	bl	38ec <nrfx_gpiote_is_init>
    25c6:	4604      	mov	r4, r0
    25c8:	b968      	cbnz	r0, 25e6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    25ca:	f001 f967 	bl	389c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    25ce:	4b08      	ldr	r3, [pc, #32]	; (25f0 <gpio_nrfx_init+0x30>)
    25d0:	4298      	cmp	r0, r3
    25d2:	d10a      	bne.n	25ea <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    25d4:	4807      	ldr	r0, [pc, #28]	; (25f4 <gpio_nrfx_init+0x34>)
    25d6:	4621      	mov	r1, r4
    25d8:	f001 f944 	bl	3864 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    25dc:	4622      	mov	r2, r4
    25de:	2105      	movs	r1, #5
    25e0:	2006      	movs	r0, #6
    25e2:	f7ff f9fd 	bl	19e0 <z_arm_irq_priority_set>
		return 0;
    25e6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    25e8:	bd10      	pop	{r4, pc}
		return -EIO;
    25ea:	f06f 0004 	mvn.w	r0, #4
    25ee:	e7fb      	b.n	25e8 <gpio_nrfx_init+0x28>
    25f0:	0bad0000 	.word	0x0bad0000
    25f4:	000025f9 	.word	0x000025f9

000025f8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    25f8:	0942      	lsrs	r2, r0, #5
{
    25fa:	b570      	push	{r4, r5, r6, lr}
    25fc:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    25fe:	d002      	beq.n	2606 <nrfx_gpio_handler+0xe>
    2600:	2a01      	cmp	r2, #1
    2602:	d015      	beq.n	2630 <nrfx_gpio_handler+0x38>
}
    2604:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2606:	4e0b      	ldr	r6, [pc, #44]	; (2634 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2608:	6932      	ldr	r2, [r6, #16]
    260a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    260c:	2900      	cmp	r1, #0
    260e:	d0f9      	beq.n	2604 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    2610:	f003 031f 	and.w	r3, r3, #31
    2614:	2501      	movs	r5, #1
    2616:	680c      	ldr	r4, [r1, #0]
    2618:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    261a:	688a      	ldr	r2, [r1, #8]
    261c:	402a      	ands	r2, r5
    261e:	d002      	beq.n	2626 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2620:	684b      	ldr	r3, [r1, #4]
    2622:	4630      	mov	r0, r6
    2624:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2626:	2c00      	cmp	r4, #0
    2628:	d0ec      	beq.n	2604 <nrfx_gpio_handler+0xc>
    262a:	4621      	mov	r1, r4
    262c:	6824      	ldr	r4, [r4, #0]
    262e:	e7f4      	b.n	261a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2630:	4e01      	ldr	r6, [pc, #4]	; (2638 <nrfx_gpio_handler+0x40>)
    2632:	e7e9      	b.n	2608 <nrfx_gpio_handler+0x10>
    2634:	00006394 	.word	0x00006394
    2638:	000063ac 	.word	0x000063ac

0000263c <gpio_nrfx_pin_configure>:
{
    263c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    2640:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2642:	7b3b      	ldrb	r3, [r7, #12]
    2644:	f001 051f 	and.w	r5, r1, #31
{
    2648:	b085      	sub	sp, #20
    264a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    264c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2650:	4614      	mov	r4, r2
    2652:	b9ca      	cbnz	r2, 2688 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2654:	a902      	add	r1, sp, #8
    2656:	4628      	mov	r0, r5
    2658:	f001 f90a 	bl	3870 <nrfx_gpiote_channel_get>
    265c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    265e:	4628      	mov	r0, r5
    2660:	f001 f9ca 	bl	39f8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2664:	4b4a      	ldr	r3, [pc, #296]	; (2790 <gpio_nrfx_pin_configure+0x154>)
    2666:	4298      	cmp	r0, r3
    2668:	d004      	beq.n	2674 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    266a:	f06f 0004 	mvn.w	r0, #4
}
    266e:	b005      	add	sp, #20
    2670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2674:	4284      	cmp	r4, r0
    2676:	d105      	bne.n	2684 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2678:	f89d 0008 	ldrb.w	r0, [sp, #8]
    267c:	f001 f940 	bl	3900 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2680:	42a0      	cmp	r0, r4
    2682:	d1f2      	bne.n	266a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2684:	2000      	movs	r0, #0
    2686:	e7f2      	b.n	266e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2688:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    268c:	f10d 0103 	add.w	r1, sp, #3
    2690:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2692:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2696:	f001 f8eb 	bl	3870 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    269a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    269c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    269e:	aa02      	add	r2, sp, #8
    26a0:	4649      	mov	r1, r9
    26a2:	4628      	mov	r0, r5
    26a4:	f000 ffbe 	bl	3624 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    26a8:	4b39      	ldr	r3, [pc, #228]	; (2790 <gpio_nrfx_pin_configure+0x154>)
    26aa:	4298      	cmp	r0, r3
    26ac:	d002      	beq.n	26b4 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    26ae:	f06f 0015 	mvn.w	r0, #21
    26b2:	e7dc      	b.n	266e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    26b4:	4580      	cmp	r8, r0
    26b6:	d103      	bne.n	26c0 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    26b8:	f89d 0003 	ldrb.w	r0, [sp, #3]
    26bc:	f001 f920 	bl	3900 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    26c0:	03a3      	lsls	r3, r4, #14
    26c2:	d551      	bpl.n	2768 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    26c4:	f240 6306 	movw	r3, #1542	; 0x606
    26c8:	4023      	ands	r3, r4
    26ca:	f240 2206 	movw	r2, #518	; 0x206
    26ce:	4293      	cmp	r3, r2
    26d0:	d03b      	beq.n	274a <gpio_nrfx_pin_configure+0x10e>
    26d2:	d80c      	bhi.n	26ee <gpio_nrfx_pin_configure+0xb2>
    26d4:	2b06      	cmp	r3, #6
    26d6:	d015      	beq.n	2704 <gpio_nrfx_pin_configure+0xc8>
    26d8:	d804      	bhi.n	26e4 <gpio_nrfx_pin_configure+0xa8>
    26da:	b19b      	cbz	r3, 2704 <gpio_nrfx_pin_configure+0xc8>
    26dc:	2b02      	cmp	r3, #2
    26de:	d1e6      	bne.n	26ae <gpio_nrfx_pin_configure+0x72>
    26e0:	2304      	movs	r3, #4
    26e2:	e00f      	b.n	2704 <gpio_nrfx_pin_configure+0xc8>
    26e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    26e8:	d1e1      	bne.n	26ae <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    26ea:	2301      	movs	r3, #1
    26ec:	e00a      	b.n	2704 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    26ee:	f240 4202 	movw	r2, #1026	; 0x402
    26f2:	4293      	cmp	r3, r2
    26f4:	d02b      	beq.n	274e <gpio_nrfx_pin_configure+0x112>
    26f6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    26fa:	d02a      	beq.n	2752 <gpio_nrfx_pin_configure+0x116>
    26fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2700:	d1d5      	bne.n	26ae <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2702:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2704:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2708:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    270c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2710:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2712:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2716:	bf54      	ite	pl
    2718:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    271c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    271e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2720:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2724:	d517      	bpl.n	2756 <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	2101      	movs	r1, #1
    272a:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    272e:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2732:	2200      	movs	r2, #0
    2734:	a901      	add	r1, sp, #4
    2736:	4628      	mov	r0, r5
    2738:	f001 f822 	bl	3780 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    273c:	4b14      	ldr	r3, [pc, #80]	; (2790 <gpio_nrfx_pin_configure+0x154>)
    273e:	4298      	cmp	r0, r3
    2740:	bf14      	ite	ne
    2742:	f06f 0015 	mvnne.w	r0, #21
    2746:	2000      	moveq	r0, #0
    2748:	e791      	b.n	266e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    274a:	2307      	movs	r3, #7
    274c:	e7da      	b.n	2704 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    274e:	2305      	movs	r3, #5
    2750:	e7d8      	b.n	2704 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    2752:	2303      	movs	r3, #3
    2754:	e7d6      	b.n	2704 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2756:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2758:	bf41      	itttt	mi
    275a:	687b      	ldrmi	r3, [r7, #4]
    275c:	2101      	movmi	r1, #1
    275e:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2762:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2766:	e7e4      	b.n	2732 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    2768:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    276a:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    276e:	bf54      	ite	pl
    2770:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2774:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2776:	461a      	mov	r2, r3
    2778:	a901      	add	r1, sp, #4
    277a:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    277c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2780:	f000 ff50 	bl	3624 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2784:	4b02      	ldr	r3, [pc, #8]	; (2790 <gpio_nrfx_pin_configure+0x154>)
    2786:	4298      	cmp	r0, r3
    2788:	f43f af7c 	beq.w	2684 <gpio_nrfx_pin_configure+0x48>
    278c:	e78f      	b.n	26ae <gpio_nrfx_pin_configure+0x72>
    278e:	bf00      	nop
    2790:	0bad0000 	.word	0x0bad0000

00002794 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    2794:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
    2796:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    2798:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    279c:	f001 fc72 	bl	4084 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twi_bus_recover(config->config.scl,
					      config->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    27a0:	4b03      	ldr	r3, [pc, #12]	; (27b0 <i2c_nrfx_twi_recover_bus+0x1c>)
    27a2:	4298      	cmp	r0, r3
}
    27a4:	bf14      	ite	ne
    27a6:	f06f 000f 	mvnne.w	r0, #15
    27aa:	2000      	moveq	r0, #0
    27ac:	bd08      	pop	{r3, pc}
    27ae:	bf00      	nop
    27b0:	0bad0000 	.word	0x0bad0000

000027b4 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    27b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    27b6:	4604      	mov	r4, r0
    27b8:	2200      	movs	r2, #0
    27ba:	2101      	movs	r1, #1
    27bc:	2003      	movs	r0, #3
    27be:	f7ff f90f 	bl	19e0 <z_arm_irq_priority_set>
    27c2:	6863      	ldr	r3, [r4, #4]
    27c4:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    27c6:	aa01      	add	r2, sp, #4
    27c8:	2100      	movs	r1, #0
    27ca:	4628      	mov	r0, r5
    27cc:	f003 f9f0 	bl	5bb0 <pinctrl_lookup_state>
	if (ret < 0) {
    27d0:	2800      	cmp	r0, #0
    27d2:	db14      	blt.n	27fe <twi_0_init+0x4a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    27d4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    27d6:	682a      	ldr	r2, [r5, #0]
    27d8:	7919      	ldrb	r1, [r3, #4]
    27da:	6818      	ldr	r0, [r3, #0]
    27dc:	f003 fa05 	bl	5bea <pinctrl_configure_pins>
    27e0:	2800      	cmp	r0, #0
    27e2:	db0c      	blt.n	27fe <twi_0_init+0x4a>
	const struct i2c_nrfx_twi_config *config = dev->config;
    27e4:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    27e6:	6923      	ldr	r3, [r4, #16]
    27e8:	4a06      	ldr	r2, [pc, #24]	; (2804 <twi_0_init+0x50>)
    27ea:	f100 0108 	add.w	r1, r0, #8
    27ee:	f001 fae3 	bl	3db8 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    27f2:	4b05      	ldr	r3, [pc, #20]	; (2808 <twi_0_init+0x54>)
		return -EBUSY;
    27f4:	4298      	cmp	r0, r3
    27f6:	bf0c      	ite	eq
    27f8:	2000      	moveq	r0, #0
    27fa:	f06f 000f 	mvnne.w	r0, #15
I2C_NRFX_TWI_DEVICE(0);
    27fe:	b003      	add	sp, #12
    2800:	bd30      	pop	{r4, r5, pc}
    2802:	bf00      	nop
    2804:	0000280d 	.word	0x0000280d
    2808:	0bad0000 	.word	0x0bad0000

0000280c <event_handler>:
	switch (p_event->type) {
    280c:	7803      	ldrb	r3, [r0, #0]
    280e:	2b01      	cmp	r3, #1
    2810:	d008      	beq.n	2824 <event_handler+0x18>
    2812:	2b02      	cmp	r3, #2
    2814:	d008      	beq.n	2828 <event_handler+0x1c>
    2816:	b94b      	cbnz	r3, 282c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    2818:	4b05      	ldr	r3, [pc, #20]	; (2830 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    281a:	620b      	str	r3, [r1, #32]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    281c:	f101 0010 	add.w	r0, r1, #16
    2820:	f001 bf92 	b.w	4748 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2824:	4b03      	ldr	r3, [pc, #12]	; (2834 <event_handler+0x28>)
    2826:	e7f8      	b.n	281a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    2828:	4b03      	ldr	r3, [pc, #12]	; (2838 <event_handler+0x2c>)
    282a:	e7f6      	b.n	281a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    282c:	4b03      	ldr	r3, [pc, #12]	; (283c <event_handler+0x30>)
    282e:	e7f4      	b.n	281a <event_handler+0xe>
    2830:	0bad0000 	.word	0x0bad0000
    2834:	0bae0001 	.word	0x0bae0001
    2838:	0bae0002 	.word	0x0bae0002
    283c:	0bad0001 	.word	0x0bad0001

00002840 <i2c_nrfx_twi_transfer>:
{
    2840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2844:	460c      	mov	r4, r1
    2846:	b089      	sub	sp, #36	; 0x24
    2848:	4617      	mov	r7, r2
    284a:	4699      	mov	r9, r3
	const struct i2c_nrfx_twi_config *config = dev->config;
    284c:	6845      	ldr	r5, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    284e:	6906      	ldr	r6, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    2850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2858:	4630      	mov	r0, r6
    285a:	f001 ff95 	bl	4788 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    285e:	f106 0a10 	add.w	sl, r6, #16
    2862:	2200      	movs	r2, #0
    2864:	2300      	movs	r3, #0
    2866:	4650      	mov	r0, sl
    2868:	f001 ff8e 	bl	4788 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    286c:	4628      	mov	r0, r5
    286e:	f001 fb01 	bl	3e74 <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
    2872:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 2930 <i2c_nrfx_twi_transfer+0xf0>
	for (size_t i = 0; i < num_msgs; i++) {
    2876:	f04f 0800 	mov.w	r8, #0
    287a:	45b8      	cmp	r8, r7
    287c:	d301      	bcc.n	2882 <i2c_nrfx_twi_transfer+0x42>
    287e:	2400      	movs	r4, #0
    2880:	e02b      	b.n	28da <i2c_nrfx_twi_transfer+0x9a>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    2882:	7a23      	ldrb	r3, [r4, #8]
    2884:	9301      	str	r3, [sp, #4]
    2886:	f013 0108 	ands.w	r1, r3, #8
    288a:	d14b      	bne.n	2924 <i2c_nrfx_twi_transfer+0xe4>
		nrfx_twi_xfer_desc_t cur_xfer = {
    288c:	2214      	movs	r2, #20
    288e:	a803      	add	r0, sp, #12
    2890:	9100      	str	r1, [sp, #0]
    2892:	f002 ffe9 	bl	5868 <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    2896:	9b01      	ldr	r3, [sp, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
    2898:	6860      	ldr	r0, [r4, #4]
    289a:	9004      	str	r0, [sp, #16]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    289c:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    28a0:	6820      	ldr	r0, [r4, #0]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    28a2:	9900      	ldr	r1, [sp, #0]
		nrfx_twi_xfer_desc_t cur_xfer = {
    28a4:	f88d 200c 	strb.w	r2, [sp, #12]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    28a8:	f013 0f02 	tst.w	r3, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
    28ac:	f88d 900d 	strb.w	r9, [sp, #13]
    28b0:	9006      	str	r0, [sp, #24]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    28b2:	d11c      	bne.n	28ee <i2c_nrfx_twi_transfer+0xae>
			if ((i < (num_msgs - 1)) &&
    28b4:	1e7b      	subs	r3, r7, #1
    28b6:	4543      	cmp	r3, r8
    28b8:	d902      	bls.n	28c0 <i2c_nrfx_twi_transfer+0x80>
    28ba:	7d23      	ldrb	r3, [r4, #20]
    28bc:	075b      	lsls	r3, r3, #29
    28be:	d518      	bpl.n	28f2 <i2c_nrfx_twi_transfer+0xb2>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    28c0:	bb82      	cbnz	r2, 2924 <i2c_nrfx_twi_transfer+0xe4>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    28c2:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    28c4:	a903      	add	r1, sp, #12
    28c6:	4628      	mov	r0, r5
    28c8:	f001 fb02 	bl	3ed0 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    28cc:	4558      	cmp	r0, fp
    28ce:	d012      	beq.n	28f6 <i2c_nrfx_twi_transfer+0xb6>
			if (res == NRFX_ERROR_BUSY) {
    28d0:	4b18      	ldr	r3, [pc, #96]	; (2934 <i2c_nrfx_twi_transfer+0xf4>)
    28d2:	4298      	cmp	r0, r3
    28d4:	d029      	beq.n	292a <i2c_nrfx_twi_transfer+0xea>
			ret = -EIO;
    28d6:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
    28da:	4628      	mov	r0, r5
    28dc:	f001 fada 	bl	3e94 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    28e0:	4630      	mov	r0, r6
    28e2:	f001 ff31 	bl	4748 <z_impl_k_sem_give>
}
    28e6:	4620      	mov	r0, r4
    28e8:	b009      	add	sp, #36	; 0x24
    28ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    28ee:	460a      	mov	r2, r1
    28f0:	e7e8      	b.n	28c4 <i2c_nrfx_twi_transfer+0x84>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    28f2:	2240      	movs	r2, #64	; 0x40
    28f4:	e7e6      	b.n	28c4 <i2c_nrfx_twi_transfer+0x84>
	return z_impl_k_sem_take(sem, timeout);
    28f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    28fa:	2300      	movs	r3, #0
    28fc:	4650      	mov	r0, sl
    28fe:	f001 ff43 	bl	4788 <z_impl_k_sem_take>
		if (ret != 0) {
    2902:	b138      	cbz	r0, 2914 <i2c_nrfx_twi_transfer+0xd4>
			nrfx_twi_disable(&config->twi);
    2904:	4628      	mov	r0, r5
    2906:	f001 fac5 	bl	3e94 <nrfx_twi_disable>
    290a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    290e:	f001 fbb9 	bl	4084 <nrfx_twi_twim_bus_recover>
    2912:	e7e0      	b.n	28d6 <i2c_nrfx_twi_transfer+0x96>
		res = data->res;
    2914:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    2916:	455b      	cmp	r3, fp
    2918:	f104 040c 	add.w	r4, r4, #12
    291c:	d1db      	bne.n	28d6 <i2c_nrfx_twi_transfer+0x96>
	for (size_t i = 0; i < num_msgs; i++) {
    291e:	f108 0801 	add.w	r8, r8, #1
    2922:	e7aa      	b.n	287a <i2c_nrfx_twi_transfer+0x3a>
			ret = -ENOTSUP;
    2924:	f06f 0485 	mvn.w	r4, #133	; 0x85
    2928:	e7d7      	b.n	28da <i2c_nrfx_twi_transfer+0x9a>
				ret = -EBUSY;
    292a:	f06f 040f 	mvn.w	r4, #15
    292e:	e7d4      	b.n	28da <i2c_nrfx_twi_transfer+0x9a>
    2930:	0bad0000 	.word	0x0bad0000
    2934:	0bad000b 	.word	0x0bad000b

00002938 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2938:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    293a:	794b      	ldrb	r3, [r1, #5]
    293c:	2b01      	cmp	r3, #1
    293e:	d026      	beq.n	298e <uarte_nrfx_configure+0x56>
    2940:	2b03      	cmp	r3, #3
    2942:	d121      	bne.n	2988 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2944:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2946:	798b      	ldrb	r3, [r1, #6]
    2948:	2b03      	cmp	r3, #3
    294a:	d11d      	bne.n	2988 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    294c:	79cc      	ldrb	r4, [r1, #7]
    294e:	b10c      	cbz	r4, 2954 <uarte_nrfx_configure+0x1c>
    2950:	2c01      	cmp	r4, #1
    2952:	d119      	bne.n	2988 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2954:	790a      	ldrb	r2, [r1, #4]
    2956:	b112      	cbz	r2, 295e <uarte_nrfx_configure+0x26>
    2958:	2a02      	cmp	r2, #2
    295a:	d115      	bne.n	2988 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    295c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    295e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2960:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2962:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2966:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2968:	d065      	beq.n	2a36 <uarte_nrfx_configure+0xfe>
    296a:	d82d      	bhi.n	29c8 <uarte_nrfx_configure+0x90>
    296c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2970:	d064      	beq.n	2a3c <uarte_nrfx_configure+0x104>
    2972:	d816      	bhi.n	29a2 <uarte_nrfx_configure+0x6a>
    2974:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2978:	d062      	beq.n	2a40 <uarte_nrfx_configure+0x108>
    297a:	d80a      	bhi.n	2992 <uarte_nrfx_configure+0x5a>
    297c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2980:	d061      	beq.n	2a46 <uarte_nrfx_configure+0x10e>
    2982:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2986:	d061      	beq.n	2a4c <uarte_nrfx_configure+0x114>
    2988:	f06f 0085 	mvn.w	r0, #133	; 0x85
    298c:	e052      	b.n	2a34 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    298e:	2600      	movs	r6, #0
    2990:	e7d9      	b.n	2946 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2992:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2996:	d05c      	beq.n	2a52 <uarte_nrfx_configure+0x11a>
    2998:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    299c:	d1f4      	bne.n	2988 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    299e:	4b37      	ldr	r3, [pc, #220]	; (2a7c <uarte_nrfx_configure+0x144>)
    29a0:	e03c      	b.n	2a1c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    29a2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    29a6:	d057      	beq.n	2a58 <uarte_nrfx_configure+0x120>
    29a8:	d807      	bhi.n	29ba <uarte_nrfx_configure+0x82>
    29aa:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    29ae:	d055      	beq.n	2a5c <uarte_nrfx_configure+0x124>
    29b0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    29b4:	d1e8      	bne.n	2988 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    29b6:	4b32      	ldr	r3, [pc, #200]	; (2a80 <uarte_nrfx_configure+0x148>)
    29b8:	e030      	b.n	2a1c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    29ba:	f647 2712 	movw	r7, #31250	; 0x7a12
    29be:	42bb      	cmp	r3, r7
    29c0:	d1e2      	bne.n	2988 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    29c2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    29c6:	e029      	b.n	2a1c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    29c8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    29cc:	d048      	beq.n	2a60 <uarte_nrfx_configure+0x128>
    29ce:	d813      	bhi.n	29f8 <uarte_nrfx_configure+0xc0>
    29d0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    29d4:	d047      	beq.n	2a66 <uarte_nrfx_configure+0x12e>
    29d6:	d809      	bhi.n	29ec <uarte_nrfx_configure+0xb4>
    29d8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    29dc:	42bb      	cmp	r3, r7
    29de:	d044      	beq.n	2a6a <uarte_nrfx_configure+0x132>
    29e0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    29e4:	d1d0      	bne.n	2988 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    29e6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    29ea:	e017      	b.n	2a1c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    29ec:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    29f0:	d1ca      	bne.n	2988 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    29f2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    29f6:	e011      	b.n	2a1c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    29f8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    29fc:	d038      	beq.n	2a70 <uarte_nrfx_configure+0x138>
    29fe:	d808      	bhi.n	2a12 <uarte_nrfx_configure+0xda>
    2a00:	4f20      	ldr	r7, [pc, #128]	; (2a84 <uarte_nrfx_configure+0x14c>)
    2a02:	42bb      	cmp	r3, r7
    2a04:	d037      	beq.n	2a76 <uarte_nrfx_configure+0x13e>
    2a06:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2a0a:	d1bd      	bne.n	2988 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2a0c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2a10:	e004      	b.n	2a1c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2a12:	4f1d      	ldr	r7, [pc, #116]	; (2a88 <uarte_nrfx_configure+0x150>)
    2a14:	42bb      	cmp	r3, r7
    2a16:	d1b7      	bne.n	2988 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2a18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2a1c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2a1e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    2a22:	1d03      	adds	r3, r0, #4
    2a24:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2a26:	4334      	orrs	r4, r6
    2a28:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2a2a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2a2e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2a32:	2000      	movs	r0, #0
}
    2a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2a36:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2a3a:	e7ef      	b.n	2a1c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2a3c:	4b13      	ldr	r3, [pc, #76]	; (2a8c <uarte_nrfx_configure+0x154>)
    2a3e:	e7ed      	b.n	2a1c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2a40:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2a44:	e7ea      	b.n	2a1c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2a46:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2a4a:	e7e7      	b.n	2a1c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2a4c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2a50:	e7e4      	b.n	2a1c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2a52:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2a56:	e7e1      	b.n	2a1c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2a58:	4b0d      	ldr	r3, [pc, #52]	; (2a90 <uarte_nrfx_configure+0x158>)
    2a5a:	e7df      	b.n	2a1c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2a5c:	4b0d      	ldr	r3, [pc, #52]	; (2a94 <uarte_nrfx_configure+0x15c>)
    2a5e:	e7dd      	b.n	2a1c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2a60:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2a64:	e7da      	b.n	2a1c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2a66:	4b0c      	ldr	r3, [pc, #48]	; (2a98 <uarte_nrfx_configure+0x160>)
    2a68:	e7d8      	b.n	2a1c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2a6a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2a6e:	e7d5      	b.n	2a1c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2a70:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2a74:	e7d2      	b.n	2a1c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2a76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2a7a:	e7cf      	b.n	2a1c <uarte_nrfx_configure+0xe4>
    2a7c:	0013b000 	.word	0x0013b000
    2a80:	004ea000 	.word	0x004ea000
    2a84:	0003d090 	.word	0x0003d090
    2a88:	000f4240 	.word	0x000f4240
    2a8c:	00275000 	.word	0x00275000
    2a90:	0075c000 	.word	0x0075c000
    2a94:	003af000 	.word	0x003af000
    2a98:	013a9000 	.word	0x013a9000

00002a9c <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2a9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    2aa0:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    2aa4:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    2aa6:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2aaa:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2aae:	2100      	movs	r1, #0
    2ab0:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    2ab4:	4607      	mov	r7, r0
	data->dev = dev;
    2ab6:	6030      	str	r0, [r6, #0]
	ret = pinctrl_lookup_state(config, id, &state);
    2ab8:	aa01      	add	r2, sp, #4
    2aba:	4648      	mov	r0, r9
    2abc:	f003 f878 	bl	5bb0 <pinctrl_lookup_state>
	if (ret < 0) {
    2ac0:	1e05      	subs	r5, r0, #0
    2ac2:	db56      	blt.n	2b72 <uarte_instance_init.constprop.0+0xd6>
	return pinctrl_apply_state_direct(config, state);
    2ac4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2ac6:	f8d9 2000 	ldr.w	r2, [r9]
    2aca:	7919      	ldrb	r1, [r3, #4]
    2acc:	6818      	ldr	r0, [r3, #0]
    2ace:	f003 f88c 	bl	5bea <pinctrl_configure_pins>
	if (err < 0) {
    2ad2:	1e05      	subs	r5, r0, #0
    2ad4:	db4d      	blt.n	2b72 <uarte_instance_init.constprop.0+0xd6>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    2ad6:	1d31      	adds	r1, r6, #4
    2ad8:	4638      	mov	r0, r7
    2ada:	f7ff ff2d 	bl	2938 <uarte_nrfx_configure>
	if (err) {
    2ade:	4605      	mov	r5, r0
    2ae0:	2800      	cmp	r0, #0
    2ae2:	d146      	bne.n	2b72 <uarte_instance_init.constprop.0+0xd6>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2ae4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2ae8:	0799      	lsls	r1, r3, #30
    2aea:	d519      	bpl.n	2b20 <uarte_instance_init.constprop.0+0x84>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2aec:	f106 0012 	add.w	r0, r6, #18
    2af0:	f001 f87c 	bl	3bec <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2af4:	4b22      	ldr	r3, [pc, #136]	; (2b80 <uarte_instance_init.constprop.0+0xe4>)
    2af6:	4298      	cmp	r0, r3
    2af8:	d13f      	bne.n	2b7a <uarte_instance_init.constprop.0+0xde>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2afa:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2afc:	00c3      	lsls	r3, r0, #3
    2afe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2b02:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2b06:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2b0a:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2b0e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2b12:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    2b16:	4a1b      	ldr	r2, [pc, #108]	; (2b84 <uarte_instance_init.constprop.0+0xe8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2b18:	2301      	movs	r3, #1
    2b1a:	4083      	lsls	r3, r0
    2b1c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2b20:	2308      	movs	r3, #8
    2b22:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    2b26:	f898 3008 	ldrb.w	r3, [r8, #8]
    2b2a:	b95b      	cbnz	r3, 2b44 <uarte_instance_init.constprop.0+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b2c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2b30:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2b34:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2b38:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2b3c:	2301      	movs	r3, #1
    2b3e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b42:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2b44:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2b48:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2b4a:	bf5c      	itt	pl
    2b4c:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2b50:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2b54:	06db      	lsls	r3, r3, #27
    2b56:	bf44      	itt	mi
    2b58:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2b5c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2b60:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    2b62:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2b64:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2b68:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b6c:	2301      	movs	r3, #1
    2b6e:	60a3      	str	r3, [r4, #8]
    2b70:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    2b72:	4628      	mov	r0, r5
    2b74:	b003      	add	sp, #12
    2b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    2b7a:	f06f 0504 	mvn.w	r5, #4
    2b7e:	e7f8      	b.n	2b72 <uarte_instance_init.constprop.0+0xd6>
    2b80:	0bad0000 	.word	0x0bad0000
    2b84:	4001f000 	.word	0x4001f000

00002b88 <uarte_nrfx_poll_out>:
{
    2b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    2b8a:	6906      	ldr	r6, [r0, #16]
{
    2b8c:	4605      	mov	r5, r0
    2b8e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2b90:	f003 fab2 	bl	60f8 <k_is_in_isr>
    2b94:	b910      	cbnz	r0, 2b9c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2b96:	4b2c      	ldr	r3, [pc, #176]	; (2c48 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
    2b98:	781b      	ldrb	r3, [r3, #0]
    2b9a:	b983      	cbnz	r3, 2bbe <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2b9c:	f04f 0320 	mov.w	r3, #32
    2ba0:	f3ef 8411 	mrs	r4, BASEPRI
    2ba4:	f383 8812 	msr	BASEPRI_MAX, r3
    2ba8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2bac:	6868      	ldr	r0, [r5, #4]
    2bae:	f002 ff97 	bl	5ae0 <is_tx_ready.isra.0>
    2bb2:	bb28      	cbnz	r0, 2c00 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    2bb4:	f384 8811 	msr	BASEPRI, r4
    2bb8:	f3bf 8f6f 	isb	sy
}
    2bbc:	e7ee      	b.n	2b9c <uarte_nrfx_poll_out+0x14>
{
    2bbe:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2bc0:	6868      	ldr	r0, [r5, #4]
    2bc2:	f002 ff8d 	bl	5ae0 <is_tx_ready.isra.0>
    2bc6:	b970      	cbnz	r0, 2be6 <uarte_nrfx_poll_out+0x5e>
    2bc8:	2001      	movs	r0, #1
    2bca:	f003 f8c6 	bl	5d5a <nrfx_busy_wait>
    2bce:	3c01      	subs	r4, #1
    2bd0:	d1f6      	bne.n	2bc0 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    2bd2:	2100      	movs	r1, #0
    2bd4:	2021      	movs	r0, #33	; 0x21
    2bd6:	f002 f8d7 	bl	4d88 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2bda:	e7f0      	b.n	2bbe <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2bdc:	f384 8811 	msr	BASEPRI, r4
    2be0:	f3bf 8f6f 	isb	sy
}
    2be4:	e7f5      	b.n	2bd2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    2be6:	f04f 0320 	mov.w	r3, #32
    2bea:	f3ef 8411 	mrs	r4, BASEPRI
    2bee:	f383 8812 	msr	BASEPRI_MAX, r3
    2bf2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2bf6:	6868      	ldr	r0, [r5, #4]
    2bf8:	f002 ff72 	bl	5ae0 <is_tx_ready.isra.0>
    2bfc:	2800      	cmp	r0, #0
    2bfe:	d0ed      	beq.n	2bdc <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    2c00:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    2c04:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    2c06:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    2c08:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2c0a:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2c0e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c12:	2200      	movs	r2, #0
    2c14:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2c18:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2c1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2c20:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2c24:	684a      	ldr	r2, [r1, #4]
    2c26:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2c28:	bf41      	itttt	mi
    2c2a:	2208      	movmi	r2, #8
    2c2c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2c30:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2c34:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2c38:	2201      	movs	r2, #1
    2c3a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2c3c:	f384 8811 	msr	BASEPRI, r4
    2c40:	f3bf 8f6f 	isb	sy
}
    2c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c46:	bf00      	nop
    2c48:	20001133 	.word	0x20001133

00002c4c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2c4c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2c4e:	2301      	movs	r3, #1
    2c50:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2c52:	4a11      	ldr	r2, [pc, #68]	; (2c98 <compare_int_lock+0x4c>)
    2c54:	f3bf 8f5b 	dmb	ish
    2c58:	43dc      	mvns	r4, r3
    2c5a:	e852 1f00 	ldrex	r1, [r2]
    2c5e:	ea01 0c04 	and.w	ip, r1, r4
    2c62:	e842 ce00 	strex	lr, ip, [r2]
    2c66:	f1be 0f00 	cmp.w	lr, #0
    2c6a:	d1f6      	bne.n	2c5a <compare_int_lock+0xe>
    2c6c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2c70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2c74:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    2c78:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2c7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2c80:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2c84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c88:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2c8c:	420b      	tst	r3, r1
}
    2c8e:	bf14      	ite	ne
    2c90:	2001      	movne	r0, #1
    2c92:	2000      	moveq	r0, #0
    2c94:	bd10      	pop	{r4, pc}
    2c96:	bf00      	nop
    2c98:	20000a1c 	.word	0x20000a1c

00002c9c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2c9c:	4919      	ldr	r1, [pc, #100]	; (2d04 <sys_clock_timeout_handler+0x68>)
{
    2c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ca0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    2ca2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2ca6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2ca8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2cac:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2cb0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    2cb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2cb6:	d222      	bcs.n	2cfe <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2cb8:	4b13      	ldr	r3, [pc, #76]	; (2d08 <sys_clock_timeout_handler+0x6c>)
    2cba:	681b      	ldr	r3, [r3, #0]
    2cbc:	0a1a      	lsrs	r2, r3, #8
    2cbe:	061b      	lsls	r3, r3, #24
    2cc0:	195e      	adds	r6, r3, r5
    2cc2:	4b12      	ldr	r3, [pc, #72]	; (2d0c <sys_clock_timeout_handler+0x70>)
    2cc4:	f142 0700 	adc.w	r7, r2, #0
    2cc8:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    2ccc:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2cce:	f002 f9ab 	bl	5028 <sys_clock_announce>
    return p_reg->CC[ch];
    2cd2:	00a3      	lsls	r3, r4, #2
    2cd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2cd8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    2cdc:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2ce0:	42aa      	cmp	r2, r5
    2ce2:	d10b      	bne.n	2cfc <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    2ce4:	b91e      	cbnz	r6, 2cee <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    2ce6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    2cea:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2cee:	4b08      	ldr	r3, [pc, #32]	; (2d10 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2cf0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2cf4:	fa00 f404 	lsl.w	r4, r0, r4
    2cf8:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    2cfe:	2600      	movs	r6, #0
    2d00:	e7e5      	b.n	2cce <sys_clock_timeout_handler+0x32>
    2d02:	bf00      	nop
    2d04:	200002e8 	.word	0x200002e8
    2d08:	20000a20 	.word	0x20000a20
    2d0c:	200002d0 	.word	0x200002d0
    2d10:	40011000 	.word	0x40011000

00002d14 <compare_int_unlock>:
	if (key) {
    2d14:	b319      	cbz	r1, 2d5e <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2d16:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    2d1a:	2301      	movs	r3, #1
    2d1c:	4a10      	ldr	r2, [pc, #64]	; (2d60 <compare_int_unlock+0x4c>)
    2d1e:	4083      	lsls	r3, r0
    2d20:	e852 1f00 	ldrex	r1, [r2]
    2d24:	4319      	orrs	r1, r3
    2d26:	e842 1c00 	strex	ip, r1, [r2]
    2d2a:	f1bc 0f00 	cmp.w	ip, #0
    2d2e:	d1f7      	bne.n	2d20 <compare_int_unlock+0xc>
    2d30:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    2d34:	4a0b      	ldr	r2, [pc, #44]	; (2d64 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2d3a:	4083      	lsls	r3, r0
    2d3c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2d40:	4b09      	ldr	r3, [pc, #36]	; (2d68 <compare_int_unlock+0x54>)
    2d42:	f3bf 8f5b 	dmb	ish
    2d46:	681b      	ldr	r3, [r3, #0]
    2d48:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2d4c:	fa23 f000 	lsr.w	r0, r3, r0
    2d50:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d52:	bf42      	ittt	mi
    2d54:	4b05      	ldrmi	r3, [pc, #20]	; (2d6c <compare_int_unlock+0x58>)
    2d56:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    2d5a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    2d5e:	4770      	bx	lr
    2d60:	20000a1c 	.word	0x20000a1c
    2d64:	40011000 	.word	0x40011000
    2d68:	20000a18 	.word	0x20000a18
    2d6c:	e000e100 	.word	0xe000e100

00002d70 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2d70:	4b0d      	ldr	r3, [pc, #52]	; (2da8 <z_nrf_rtc_timer_read+0x38>)
    2d72:	6818      	ldr	r0, [r3, #0]
    2d74:	0a01      	lsrs	r1, r0, #8
    2d76:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2d78:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    2d7c:	4b0b      	ldr	r3, [pc, #44]	; (2dac <z_nrf_rtc_timer_read+0x3c>)
    2d7e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    2d82:	1818      	adds	r0, r3, r0
    2d84:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2d8c:	d20a      	bcs.n	2da4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    2d8e:	4b08      	ldr	r3, [pc, #32]	; (2db0 <z_nrf_rtc_timer_read+0x40>)
    2d90:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d94:	4290      	cmp	r0, r2
    2d96:	eb71 0303 	sbcs.w	r3, r1, r3
    2d9a:	d203      	bcs.n	2da4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    2d9c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2da0:	f141 0100 	adc.w	r1, r1, #0
}
    2da4:	4770      	bx	lr
    2da6:	bf00      	nop
    2da8:	20000a20 	.word	0x20000a20
    2dac:	40011000 	.word	0x40011000
    2db0:	200002d0 	.word	0x200002d0

00002db4 <compare_set>:
{
    2db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2db8:	b085      	sub	sp, #20
    2dba:	4616      	mov	r6, r2
    2dbc:	4698      	mov	r8, r3
    2dbe:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    2dc0:	f7ff ff44 	bl	2c4c <compare_int_lock>
    2dc4:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2dc6:	f7ff ffd3 	bl	2d70 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2dca:	42b0      	cmp	r0, r6
    2dcc:	eb71 0308 	sbcs.w	r3, r1, r8
    2dd0:	d278      	bcs.n	2ec4 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    2dd2:	4b46      	ldr	r3, [pc, #280]	; (2eec <compare_set+0x138>)
    2dd4:	1a30      	subs	r0, r6, r0
    2dd6:	eb68 0101 	sbc.w	r1, r8, r1
    2dda:	4298      	cmp	r0, r3
    2ddc:	f171 0300 	sbcs.w	r3, r1, #0
    2de0:	f080 8081 	bcs.w	2ee6 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    2de4:	4b42      	ldr	r3, [pc, #264]	; (2ef0 <compare_set+0x13c>)
    2de6:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2dea:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    2dee:	45d8      	cmp	r8, fp
    2df0:	bf08      	it	eq
    2df2:	4556      	cmpeq	r6, sl
    2df4:	d051      	beq.n	2e9a <compare_set+0xe6>
    2df6:	ea4f 0985 	mov.w	r9, r5, lsl #2
    2dfa:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2dfe:	f105 0750 	add.w	r7, r5, #80	; 0x50
    2e02:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    2e06:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2e08:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2e0c:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2e10:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    2e12:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    2e16:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2e1a:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    2e1c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    2e20:	4b34      	ldr	r3, [pc, #208]	; (2ef4 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2e22:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    2e26:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    2e28:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2e2c:	1a40      	subs	r0, r0, r1
    2e2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2e32:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    2e36:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    2e38:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    2e3c:	d107      	bne.n	2e4e <compare_set+0x9a>
    2e3e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    2e42:	2013      	movs	r0, #19
    2e44:	f003 fa5c 	bl	6300 <z_impl_k_busy_wait>
    2e48:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2e4c:	4b29      	ldr	r3, [pc, #164]	; (2ef4 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    2e4e:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    2e52:	eba4 000c 	sub.w	r0, r4, ip
    2e56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    2e5a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2e5e:	bf88      	it	hi
    2e60:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2e62:	2000      	movs	r0, #0
    2e64:	6038      	str	r0, [r7, #0]
    2e66:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    2e68:	9801      	ldr	r0, [sp, #4]
    2e6a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2e6e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    2e72:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    2e76:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    2e7a:	4281      	cmp	r1, r0
    2e7c:	d006      	beq.n	2e8c <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    2e7e:	1a20      	subs	r0, r4, r0
    2e80:	3802      	subs	r0, #2
    2e82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    2e86:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2e8a:	d819      	bhi.n	2ec0 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    2e8c:	1aa4      	subs	r4, r4, r2
    2e8e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    2e92:	eb14 0a06 	adds.w	sl, r4, r6
    2e96:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    2e9a:	4915      	ldr	r1, [pc, #84]	; (2ef0 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    2e9c:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    2e9e:	012b      	lsls	r3, r5, #4
    2ea0:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    2ea4:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    2ea8:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    2eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2eac:	6053      	str	r3, [r2, #4]
	return ret;
    2eae:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    2eb0:	4628      	mov	r0, r5
    2eb2:	9900      	ldr	r1, [sp, #0]
    2eb4:	f7ff ff2e 	bl	2d14 <compare_int_unlock>
}
    2eb8:	4620      	mov	r0, r4
    2eba:	b005      	add	sp, #20
    2ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ec0:	4620      	mov	r0, r4
    2ec2:	e7b1      	b.n	2e28 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    2ec4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2ec6:	4a0c      	ldr	r2, [pc, #48]	; (2ef8 <compare_set+0x144>)
    2ec8:	f3bf 8f5b 	dmb	ish
    2ecc:	40ab      	lsls	r3, r5
    2ece:	e852 1f00 	ldrex	r1, [r2]
    2ed2:	4319      	orrs	r1, r3
    2ed4:	e842 1000 	strex	r0, r1, [r2]
    2ed8:	2800      	cmp	r0, #0
    2eda:	d1f8      	bne.n	2ece <compare_set+0x11a>
    2edc:	f3bf 8f5b 	dmb	ish
    2ee0:	46b2      	mov	sl, r6
    2ee2:	46c3      	mov	fp, r8
    2ee4:	e7d9      	b.n	2e9a <compare_set+0xe6>
			return -EINVAL;
    2ee6:	f06f 0415 	mvn.w	r4, #21
    2eea:	e7e1      	b.n	2eb0 <compare_set+0xfc>
    2eec:	01000001 	.word	0x01000001
    2ef0:	200002d8 	.word	0x200002d8
    2ef4:	40011000 	.word	0x40011000
    2ef8:	20000a18 	.word	0x20000a18

00002efc <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2efc:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2efe:	4b19      	ldr	r3, [pc, #100]	; (2f64 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    2f00:	4d19      	ldr	r5, [pc, #100]	; (2f68 <sys_clock_driver_init+0x6c>)
    2f02:	2400      	movs	r4, #0
    2f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2f08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2f0c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    2f10:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2f18:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f1c:	4b13      	ldr	r3, [pc, #76]	; (2f6c <sys_clock_driver_init+0x70>)
    2f1e:	2602      	movs	r6, #2
    2f20:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2f24:	2101      	movs	r1, #1
    2f26:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    2f2a:	2011      	movs	r0, #17
    2f2c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2f30:	4622      	mov	r2, r4
    2f32:	f7fe fd55 	bl	19e0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2f36:	2011      	movs	r0, #17
    2f38:	f7fe fd34 	bl	19a4 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2f3c:	4a0c      	ldr	r2, [pc, #48]	; (2f70 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2f3e:	2301      	movs	r3, #1
    2f40:	60ab      	str	r3, [r5, #8]
    2f42:	602b      	str	r3, [r5, #0]
    2f44:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2f46:	4b0b      	ldr	r3, [pc, #44]	; (2f74 <sys_clock_driver_init+0x78>)
    2f48:	4a0b      	ldr	r2, [pc, #44]	; (2f78 <sys_clock_driver_init+0x7c>)
    2f4a:	9300      	str	r3, [sp, #0]
    2f4c:	9401      	str	r4, [sp, #4]
    2f4e:	2300      	movs	r3, #0
    2f50:	4620      	mov	r0, r4
    2f52:	f7ff ff2f 	bl	2db4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2f56:	4630      	mov	r0, r6
    2f58:	f7ff fa1c 	bl	2394 <z_nrf_clock_control_lf_on>

	return 0;
}
    2f5c:	4620      	mov	r0, r4
    2f5e:	b002      	add	sp, #8
    2f60:	bd70      	pop	{r4, r5, r6, pc}
    2f62:	bf00      	nop
    2f64:	200002d8 	.word	0x200002d8
    2f68:	40011000 	.word	0x40011000
    2f6c:	e000e100 	.word	0xe000e100
    2f70:	20000a1c 	.word	0x20000a1c
    2f74:	00002c9d 	.word	0x00002c9d
    2f78:	007fffff 	.word	0x007fffff

00002f7c <rtc_nrf_isr>:
{
    2f7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    2f80:	4c35      	ldr	r4, [pc, #212]	; (3058 <rtc_nrf_isr+0xdc>)
    2f82:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2f86:	079a      	lsls	r2, r3, #30
    2f88:	d50b      	bpl.n	2fa2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f8a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2f8e:	b143      	cbz	r3, 2fa2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    2f90:	4a32      	ldr	r2, [pc, #200]	; (305c <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2f92:	2300      	movs	r3, #0
    2f94:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    2f98:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2f9c:	6813      	ldr	r3, [r2, #0]
    2f9e:	3301      	adds	r3, #1
    2fa0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    2fa2:	f04f 0320 	mov.w	r3, #32
    2fa6:	f3ef 8211 	mrs	r2, BASEPRI
    2faa:	f383 8812 	msr	BASEPRI_MAX, r3
    2fae:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    2fb2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2fb6:	03db      	lsls	r3, r3, #15
    2fb8:	d512      	bpl.n	2fe0 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2fba:	f3bf 8f5b 	dmb	ish
    2fbe:	4b28      	ldr	r3, [pc, #160]	; (3060 <rtc_nrf_isr+0xe4>)
    2fc0:	e853 1f00 	ldrex	r1, [r3]
    2fc4:	f021 0001 	bic.w	r0, r1, #1
    2fc8:	e843 0600 	strex	r6, r0, [r3]
    2fcc:	2e00      	cmp	r6, #0
    2fce:	d1f7      	bne.n	2fc0 <rtc_nrf_isr+0x44>
    2fd0:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2fd4:	2900      	cmp	r1, #0
    2fd6:	d136      	bne.n	3046 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2fd8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d132      	bne.n	3046 <rtc_nrf_isr+0xca>
{
    2fe0:	2300      	movs	r3, #0
	__asm__ volatile(
    2fe2:	f382 8811 	msr	BASEPRI, r2
    2fe6:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    2fea:	b34b      	cbz	r3, 3040 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    2fec:	f7ff fec0 	bl	2d70 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2ff0:	f04f 0320 	mov.w	r3, #32
    2ff4:	f3ef 8c11 	mrs	ip, BASEPRI
    2ff8:	f383 8812 	msr	BASEPRI_MAX, r3
    2ffc:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3000:	4b18      	ldr	r3, [pc, #96]	; (3064 <rtc_nrf_isr+0xe8>)
    3002:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3006:	42b0      	cmp	r0, r6
    3008:	eb71 0207 	sbcs.w	r2, r1, r7
    300c:	f04f 0200 	mov.w	r2, #0
    3010:	d320      	bcc.n	3054 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3012:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3016:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    301a:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    301e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3022:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3028:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    302c:	f38c 8811 	msr	BASEPRI, ip
    3030:	f3bf 8f6f 	isb	sy
		if (handler) {
    3034:	b121      	cbz	r1, 3040 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    3036:	9500      	str	r5, [sp, #0]
    3038:	4632      	mov	r2, r6
    303a:	463b      	mov	r3, r7
    303c:	2000      	movs	r0, #0
    303e:	4788      	blx	r1
}
    3040:	b003      	add	sp, #12
    3042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3046:	2300      	movs	r3, #0
    3048:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    304c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3050:	2301      	movs	r3, #1
}
    3052:	e7c6      	b.n	2fe2 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3054:	4611      	mov	r1, r2
    3056:	e7e9      	b.n	302c <rtc_nrf_isr+0xb0>
    3058:	40011000 	.word	0x40011000
    305c:	20000a20 	.word	0x20000a20
    3060:	20000a18 	.word	0x20000a18
    3064:	200002d8 	.word	0x200002d8

00003068 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3068:	1c43      	adds	r3, r0, #1
{
    306a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    306c:	d021      	beq.n	30b2 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    306e:	2801      	cmp	r0, #1
    3070:	dd21      	ble.n	30b6 <sys_clock_set_timeout+0x4e>
    3072:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3076:	da20      	bge.n	30ba <sys_clock_set_timeout+0x52>
    3078:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    307a:	f7ff fe79 	bl	2d70 <z_nrf_rtc_timer_read>
    307e:	4b10      	ldr	r3, [pc, #64]	; (30c0 <sys_clock_set_timeout+0x58>)
    3080:	e9d3 1300 	ldrd	r1, r3, [r3]
    3084:	1a40      	subs	r0, r0, r1
		ticks = 0;
    3086:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    308a:	bf28      	it	cs
    308c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    308e:	3001      	adds	r0, #1
    3090:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    3092:	480c      	ldr	r0, [pc, #48]	; (30c4 <sys_clock_set_timeout+0x5c>)
    3094:	4282      	cmp	r2, r0
    3096:	bf28      	it	cs
    3098:	4602      	movcs	r2, r0
    309a:	1852      	adds	r2, r2, r1
    309c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    30a0:	4909      	ldr	r1, [pc, #36]	; (30c8 <sys_clock_set_timeout+0x60>)
    30a2:	9001      	str	r0, [sp, #4]
    30a4:	9100      	str	r1, [sp, #0]
    30a6:	f143 0300 	adc.w	r3, r3, #0
    30aa:	f7ff fe83 	bl	2db4 <compare_set>
}
    30ae:	b002      	add	sp, #8
    30b0:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    30b2:	4804      	ldr	r0, [pc, #16]	; (30c4 <sys_clock_set_timeout+0x5c>)
    30b4:	e7e0      	b.n	3078 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    30b6:	2400      	movs	r4, #0
    30b8:	e7df      	b.n	307a <sys_clock_set_timeout+0x12>
    30ba:	4c02      	ldr	r4, [pc, #8]	; (30c4 <sys_clock_set_timeout+0x5c>)
    30bc:	e7dd      	b.n	307a <sys_clock_set_timeout+0x12>
    30be:	bf00      	nop
    30c0:	200002e8 	.word	0x200002e8
    30c4:	007fffff 	.word	0x007fffff
    30c8:	00002c9d 	.word	0x00002c9d

000030cc <sys_clock_elapsed>:
{
    30cc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    30ce:	f7ff fe4f 	bl	2d70 <z_nrf_rtc_timer_read>
    30d2:	4b02      	ldr	r3, [pc, #8]	; (30dc <sys_clock_elapsed+0x10>)
    30d4:	681b      	ldr	r3, [r3, #0]
}
    30d6:	1ac0      	subs	r0, r0, r3
    30d8:	bd08      	pop	{r3, pc}
    30da:	bf00      	nop
    30dc:	200002e8 	.word	0x200002e8

000030e0 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    30e0:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    30e4:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    30e6:	2801      	cmp	r0, #1
    30e8:	4b04      	ldr	r3, [pc, #16]	; (30fc <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    30ea:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    30ee:	bf18      	it	ne
    30f0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    30f4:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    30f6:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    30fa:	4770      	bx	lr
    30fc:	50000300 	.word	0x50000300

00003100 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    3100:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3104:	2b00      	cmp	r3, #0
{
    3106:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3108:	bf07      	ittee	eq
    310a:	4614      	moveq	r4, r2
    310c:	460d      	moveq	r5, r1
    310e:	2401      	movne	r4, #1
    3110:	2500      	movne	r5, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    3112:	f3c0 1281 	ubfx	r2, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    3116:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
    311a:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    311e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3122:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
        case 1: return NRF_P1;
    3126:	4b06      	ldr	r3, [pc, #24]	; (3140 <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3128:	ea42 0205 	orr.w	r2, r2, r5
        case 1: return NRF_P1;
    312c:	bf08      	it	eq
    312e:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3132:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3136:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    313a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    313e:	bd30      	pop	{r4, r5, pc}
    3140:	50000300 	.word	0x50000300

00003144 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    3144:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3148:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    314a:	2801      	cmp	r0, #1
    314c:	4b04      	ldr	r3, [pc, #16]	; (3160 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    314e:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    3152:	bf18      	it	ne
    3154:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3158:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    315a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    315e:	4770      	bx	lr
    3160:	50000300 	.word	0x50000300

00003164 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3164:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3168:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    316c:	2a08      	cmp	r2, #8
    316e:	d106      	bne.n	317e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3170:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    3174:	2b05      	cmp	r3, #5
    3176:	d802      	bhi.n	317e <nrf52_errata_103+0x1a>
    3178:	4a02      	ldr	r2, [pc, #8]	; (3184 <nrf52_errata_103+0x20>)
    317a:	5cd0      	ldrb	r0, [r2, r3]
    317c:	4770      	bx	lr
        return false;
    317e:	2000      	movs	r0, #0
}
    3180:	4770      	bx	lr
    3182:	bf00      	nop
    3184:	0000699c 	.word	0x0000699c

00003188 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3188:	4a02      	ldr	r2, [pc, #8]	; (3194 <nvmc_wait+0xc>)
    318a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    318e:	2b00      	cmp	r3, #0
    3190:	d0fb      	beq.n	318a <nvmc_wait+0x2>
}
    3192:	4770      	bx	lr
    3194:	4001e000 	.word	0x4001e000

00003198 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3198:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    319a:	f002 fdd4 	bl	5d46 <nrf52_errata_136>
    319e:	b140      	cbz	r0, 31b2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    31a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31a4:	2200      	movs	r2, #0
    31a6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    31aa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    31ae:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    31b2:	f002 fdc8 	bl	5d46 <nrf52_errata_136>
    31b6:	2800      	cmp	r0, #0
    31b8:	d046      	beq.n	3248 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    31ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    31be:	4b60      	ldr	r3, [pc, #384]	; (3340 <SystemInit+0x1a8>)
    31c0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    31c4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    31c8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    31cc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    31d0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    31d4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    31d8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    31dc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    31e0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    31e4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    31e8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    31ec:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    31f0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    31f4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    31f8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    31fc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3200:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3204:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3208:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    320c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3210:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3214:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3218:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    321c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3220:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3224:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3228:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    322c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3230:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3234:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3238:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    323c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3240:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3244:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    3248:	f7ff ff8c 	bl	3164 <nrf52_errata_103>
    324c:	b118      	cbz	r0, 3256 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    324e:	4b3d      	ldr	r3, [pc, #244]	; (3344 <SystemInit+0x1ac>)
    3250:	4a3d      	ldr	r2, [pc, #244]	; (3348 <SystemInit+0x1b0>)
    3252:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    3256:	f7ff ff85 	bl	3164 <nrf52_errata_103>
    325a:	b118      	cbz	r0, 3264 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    325c:	4b3b      	ldr	r3, [pc, #236]	; (334c <SystemInit+0x1b4>)
    325e:	22fb      	movs	r2, #251	; 0xfb
    3260:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    3264:	f7ff ff7e 	bl	3164 <nrf52_errata_103>
    3268:	b170      	cbz	r0, 3288 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    326a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    326e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3272:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    3276:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    327a:	f022 020f 	bic.w	r2, r2, #15
    327e:	f003 030f 	and.w	r3, r3, #15
    3282:	4313      	orrs	r3, r2
    3284:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    3288:	f7ff ff6c 	bl	3164 <nrf52_errata_103>
    328c:	b120      	cbz	r0, 3298 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    328e:	4b30      	ldr	r3, [pc, #192]	; (3350 <SystemInit+0x1b8>)
    3290:	f44f 7200 	mov.w	r2, #512	; 0x200
    3294:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3298:	f002 fd55 	bl	5d46 <nrf52_errata_136>
    329c:	b148      	cbz	r0, 32b2 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    329e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32a2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    32a6:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    32a8:	bf44      	itt	mi
    32aa:	f06f 0201 	mvnmi.w	r2, #1
    32ae:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    32b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    32b6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    32ba:	2a08      	cmp	r2, #8
    32bc:	d10e      	bne.n	32dc <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    32be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    32c2:	2b05      	cmp	r3, #5
    32c4:	d802      	bhi.n	32cc <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    32c6:	4a23      	ldr	r2, [pc, #140]	; (3354 <SystemInit+0x1bc>)
    32c8:	5cd3      	ldrb	r3, [r2, r3]
    32ca:	b13b      	cbz	r3, 32dc <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    32cc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    32d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    32d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32d8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    32dc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    32e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    32e4:	2a00      	cmp	r2, #0
    32e6:	db03      	blt.n	32f0 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    32e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    32ec:	2b00      	cmp	r3, #0
    32ee:	da22      	bge.n	3336 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    32f0:	4919      	ldr	r1, [pc, #100]	; (3358 <SystemInit+0x1c0>)
    32f2:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    32f4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    32f8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    32fc:	2412      	movs	r4, #18
    nvmc_wait();
    32fe:	f7ff ff43 	bl	3188 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3302:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    3306:	f7ff ff3f 	bl	3188 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    330a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    330e:	f7ff ff3b 	bl	3188 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3312:	2300      	movs	r3, #0
    3314:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3318:	f7ff ff36 	bl	3188 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    331c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3320:	490e      	ldr	r1, [pc, #56]	; (335c <SystemInit+0x1c4>)
    3322:	4b0f      	ldr	r3, [pc, #60]	; (3360 <SystemInit+0x1c8>)
    3324:	68ca      	ldr	r2, [r1, #12]
    3326:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    332a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    332c:	60cb      	str	r3, [r1, #12]
    332e:	f3bf 8f4f 	dsb	sy
    __NOP();
    3332:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3334:	e7fd      	b.n	3332 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3336:	4b0b      	ldr	r3, [pc, #44]	; (3364 <SystemInit+0x1cc>)
    3338:	4a0b      	ldr	r2, [pc, #44]	; (3368 <SystemInit+0x1d0>)
    333a:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    333c:	bd10      	pop	{r4, pc}
    333e:	bf00      	nop
    3340:	4000c000 	.word	0x4000c000
    3344:	40005000 	.word	0x40005000
    3348:	00038148 	.word	0x00038148
    334c:	4000f000 	.word	0x4000f000
    3350:	40029000 	.word	0x40029000
    3354:	00006996 	.word	0x00006996
    3358:	4001e000 	.word	0x4001e000
    335c:	e000ed00 	.word	0xe000ed00
    3360:	05fa0004 	.word	0x05fa0004
    3364:	2000007c 	.word	0x2000007c
    3368:	03d09000 	.word	0x03d09000

0000336c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    336c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    336e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3370:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3372:	fab2 f382 	clz	r3, r2
    3376:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    337a:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    337c:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    337e:	d014      	beq.n	33aa <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3380:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3384:	fa05 f303 	lsl.w	r3, r5, r3
    3388:	ea22 0303 	bic.w	r3, r2, r3
    338c:	e850 6f00 	ldrex	r6, [r0]
    3390:	4296      	cmp	r6, r2
    3392:	d104      	bne.n	339e <nrfx_flag32_alloc+0x32>
    3394:	e840 3c00 	strex	ip, r3, [r0]
    3398:	f1bc 0f00 	cmp.w	ip, #0
    339c:	d1f6      	bne.n	338c <nrfx_flag32_alloc+0x20>
    339e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    33a2:	d1e5      	bne.n	3370 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    33a4:	4802      	ldr	r0, [pc, #8]	; (33b0 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    33a6:	700c      	strb	r4, [r1, #0]
}
    33a8:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    33aa:	4802      	ldr	r0, [pc, #8]	; (33b4 <nrfx_flag32_alloc+0x48>)
    33ac:	e7fc      	b.n	33a8 <nrfx_flag32_alloc+0x3c>
    33ae:	bf00      	nop
    33b0:	0bad0000 	.word	0x0bad0000
    33b4:	0bad0002 	.word	0x0bad0002

000033b8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    33b8:	6803      	ldr	r3, [r0, #0]
    33ba:	40cb      	lsrs	r3, r1
    33bc:	07db      	lsls	r3, r3, #31
{
    33be:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    33c0:	d415      	bmi.n	33ee <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    33c2:	2301      	movs	r3, #1
    33c4:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    33c8:	6803      	ldr	r3, [r0, #0]
    33ca:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    33ce:	ea41 0203 	orr.w	r2, r1, r3
    33d2:	e850 4f00 	ldrex	r4, [r0]
    33d6:	429c      	cmp	r4, r3
    33d8:	d104      	bne.n	33e4 <nrfx_flag32_free+0x2c>
    33da:	e840 2c00 	strex	ip, r2, [r0]
    33de:	f1bc 0f00 	cmp.w	ip, #0
    33e2:	d1f6      	bne.n	33d2 <nrfx_flag32_free+0x1a>
    33e4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    33e8:	d1ee      	bne.n	33c8 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    33ea:	4802      	ldr	r0, [pc, #8]	; (33f4 <nrfx_flag32_free+0x3c>)
}
    33ec:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    33ee:	4802      	ldr	r0, [pc, #8]	; (33f8 <nrfx_flag32_free+0x40>)
    33f0:	e7fc      	b.n	33ec <nrfx_flag32_free+0x34>
    33f2:	bf00      	nop
    33f4:	0bad0000 	.word	0x0bad0000
    33f8:	0bad0004 	.word	0x0bad0004

000033fc <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    33fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    33fe:	4604      	mov	r4, r0
    3400:	b118      	cbz	r0, 340a <clock_stop+0xe>
    3402:	2801      	cmp	r0, #1
    3404:	d029      	beq.n	345a <clock_stop+0x5e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3406:	b003      	add	sp, #12
    3408:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    340a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    340e:	2202      	movs	r2, #2
    3410:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3414:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    3418:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    341c:	2201      	movs	r2, #1
    341e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3420:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3422:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3424:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3428:	bf14      	ite	ne
    342a:	2500      	movne	r5, #0
    342c:	f10d 0507 	addeq.w	r5, sp, #7
    3430:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3434:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    3438:	b1d4      	cbz	r4, 3470 <clock_stop+0x74>
    343a:	2c01      	cmp	r4, #1
    343c:	d1e3      	bne.n	3406 <clock_stop+0xa>
            if (p_clk_src != NULL)
    343e:	b125      	cbz	r5, 344a <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3440:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3444:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3448:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    344a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    344e:	03db      	lsls	r3, r3, #15
    3450:	d418      	bmi.n	3484 <clock_stop+0x88>
            m_clock_cb.hfclk_started = false;
    3452:	4b13      	ldr	r3, [pc, #76]	; (34a0 <clock_stop+0xa4>)
    3454:	2200      	movs	r2, #0
    3456:	715a      	strb	r2, [r3, #5]
    3458:	e7d5      	b.n	3406 <clock_stop+0xa>
    p_reg->INTENCLR = mask;
    345a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    345e:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3460:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3464:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3468:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    346c:	6058      	str	r0, [r3, #4]
}
    346e:	e7d7      	b.n	3420 <clock_stop+0x24>
            if (p_clk_src != NULL)
    3470:	b125      	cbz	r5, 347c <clock_stop+0x80>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3472:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3476:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    347a:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    347c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    3480:	03da      	lsls	r2, r3, #15
    3482:	d5c0      	bpl.n	3406 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3484:	b92d      	cbnz	r5, 3492 <clock_stop+0x96>
    3486:	2001      	movs	r0, #1
    3488:	f002 fc67 	bl	5d5a <nrfx_busy_wait>
    348c:	3f01      	subs	r7, #1
    348e:	d1d3      	bne.n	3438 <clock_stop+0x3c>
    3490:	e003      	b.n	349a <clock_stop+0x9e>
    3492:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3496:	2b01      	cmp	r3, #1
    3498:	d0f5      	beq.n	3486 <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    349a:	2c01      	cmp	r4, #1
    349c:	d0d9      	beq.n	3452 <clock_stop+0x56>
    349e:	e7b2      	b.n	3406 <clock_stop+0xa>
    34a0:	20000a24 	.word	0x20000a24

000034a4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    34a4:	4b04      	ldr	r3, [pc, #16]	; (34b8 <nrfx_clock_init+0x14>)
    34a6:	791a      	ldrb	r2, [r3, #4]
    34a8:	b922      	cbnz	r2, 34b4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    34aa:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    34ac:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    34ae:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    34b0:	4802      	ldr	r0, [pc, #8]	; (34bc <nrfx_clock_init+0x18>)
    34b2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    34b4:	4802      	ldr	r0, [pc, #8]	; (34c0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    34b6:	4770      	bx	lr
    34b8:	20000a24 	.word	0x20000a24
    34bc:	0bad0000 	.word	0x0bad0000
    34c0:	0bad000c 	.word	0x0bad000c

000034c4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    34c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    34c8:	b510      	push	{r4, lr}
    34ca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    34ce:	b16a      	cbz	r2, 34ec <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34d0:	2200      	movs	r2, #0
    34d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    34d6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    34da:	2201      	movs	r2, #1
    34dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    34e0:	4b11      	ldr	r3, [pc, #68]	; (3528 <nrfx_power_clock_irq_handler+0x64>)
    34e2:	7958      	ldrb	r0, [r3, #5]
    34e4:	b910      	cbnz	r0, 34ec <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    34e6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    34e8:	681b      	ldr	r3, [r3, #0]
    34ea:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    34ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    34f0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    34f4:	b172      	cbz	r2, 3514 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34f6:	2200      	movs	r2, #0
    34f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    34fc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3500:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3504:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3508:	0792      	lsls	r2, r2, #30
    350a:	d104      	bne.n	3516 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    350c:	2201      	movs	r2, #1
    350e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3512:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3514:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3516:	2202      	movs	r2, #2
    3518:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    351c:	4b02      	ldr	r3, [pc, #8]	; (3528 <nrfx_power_clock_irq_handler+0x64>)
}
    351e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3522:	681b      	ldr	r3, [r3, #0]
    3524:	2001      	movs	r0, #1
    3526:	4718      	bx	r3
    3528:	20000a24 	.word	0x20000a24

0000352c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    352c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    352e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    3532:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    3534:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    3536:	6002      	str	r2, [r0, #0]
}
    3538:	4802      	ldr	r0, [pc, #8]	; (3544 <nrf_gpio_pin_port_decode+0x18>)
    353a:	bf18      	it	ne
    353c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    3540:	4770      	bx	lr
    3542:	bf00      	nop
    3544:	50000300 	.word	0x50000300

00003548 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3548:	4b03      	ldr	r3, [pc, #12]	; (3558 <pin_in_use_by_te+0x10>)
    354a:	3008      	adds	r0, #8
    354c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3550:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3554:	4770      	bx	lr
    3556:	bf00      	nop
    3558:	20000080 	.word	0x20000080

0000355c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    355c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    355e:	f100 0308 	add.w	r3, r0, #8
    3562:	4c0c      	ldr	r4, [pc, #48]	; (3594 <call_handler+0x38>)
    3564:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3568:	05da      	lsls	r2, r3, #23
{
    356a:	4605      	mov	r5, r0
    356c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    356e:	d507      	bpl.n	3580 <call_handler+0x24>
    3570:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3574:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3578:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    357c:	6852      	ldr	r2, [r2, #4]
    357e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3580:	68a3      	ldr	r3, [r4, #8]
    3582:	b12b      	cbz	r3, 3590 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3584:	68e2      	ldr	r2, [r4, #12]
    3586:	4631      	mov	r1, r6
    3588:	4628      	mov	r0, r5
    }
}
    358a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    358e:	4718      	bx	r3
}
    3590:	bd70      	pop	{r4, r5, r6, pc}
    3592:	bf00      	nop
    3594:	20000080 	.word	0x20000080

00003598 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3598:	4a12      	ldr	r2, [pc, #72]	; (35e4 <release_handler+0x4c>)
    359a:	3008      	adds	r0, #8
{
    359c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    359e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    35a2:	05d9      	lsls	r1, r3, #23
    35a4:	d51b      	bpl.n	35de <release_handler+0x46>
    35a6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    35aa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    35ae:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    35b2:	f102 0410 	add.w	r4, r2, #16
    35b6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    35b8:	f834 3b02 	ldrh.w	r3, [r4], #2
    35bc:	f413 7f80 	tst.w	r3, #256	; 0x100
    35c0:	d003      	beq.n	35ca <release_handler+0x32>
    35c2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    35c6:	4299      	cmp	r1, r3
    35c8:	d009      	beq.n	35de <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    35ca:	3001      	adds	r0, #1
    35cc:	2830      	cmp	r0, #48	; 0x30
    35ce:	d1f3      	bne.n	35b8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    35d0:	2300      	movs	r3, #0
    35d2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    35d6:	4804      	ldr	r0, [pc, #16]	; (35e8 <release_handler+0x50>)
}
    35d8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    35da:	f7ff beed 	b.w	33b8 <nrfx_flag32_free>
}
    35de:	bc10      	pop	{r4}
    35e0:	4770      	bx	lr
    35e2:	bf00      	nop
    35e4:	20000080 	.word	0x20000080
    35e8:	200000f4 	.word	0x200000f4

000035ec <pin_handler_trigger_uninit>:
{
    35ec:	b538      	push	{r3, r4, r5, lr}
    35ee:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    35f0:	f7ff ffaa 	bl	3548 <pin_in_use_by_te>
    35f4:	4c09      	ldr	r4, [pc, #36]	; (361c <pin_handler_trigger_uninit+0x30>)
    35f6:	f102 0508 	add.w	r5, r2, #8
    35fa:	b140      	cbz	r0, 360e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    35fc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3600:	4907      	ldr	r1, [pc, #28]	; (3620 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3602:	0b5b      	lsrs	r3, r3, #13
    3604:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3608:	2000      	movs	r0, #0
    360a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    360e:	4610      	mov	r0, r2
    3610:	f7ff ffc2 	bl	3598 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3614:	2300      	movs	r3, #0
    3616:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    361a:	bd38      	pop	{r3, r4, r5, pc}
    361c:	20000080 	.word	0x20000080
    3620:	40006000 	.word	0x40006000

00003624 <nrfx_gpiote_input_configure>:
{
    3624:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3628:	4604      	mov	r4, r0
    362a:	4617      	mov	r7, r2
    362c:	461d      	mov	r5, r3
    if (p_input_config)
    362e:	b321      	cbz	r1, 367a <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3630:	4e4e      	ldr	r6, [pc, #312]	; (376c <nrfx_gpiote_input_configure+0x148>)
    3632:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3636:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    363a:	079b      	lsls	r3, r3, #30
    363c:	d506      	bpl.n	364c <nrfx_gpiote_input_configure+0x28>
    363e:	f7ff ff83 	bl	3548 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    3642:	b118      	cbz	r0, 364c <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    3644:	484a      	ldr	r0, [pc, #296]	; (3770 <nrfx_gpiote_input_configure+0x14c>)
}
    3646:	b004      	add	sp, #16
    3648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    364c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    364e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3652:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3656:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    365a:	f10d 020f 	add.w	r2, sp, #15
    365e:	460b      	mov	r3, r1
    3660:	4620      	mov	r0, r4
    3662:	f10d 010e 	add.w	r1, sp, #14
    3666:	f002 fbc6 	bl	5df6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    366a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    366e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3672:	f043 0301 	orr.w	r3, r3, #1
    3676:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    367a:	b197      	cbz	r7, 36a2 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    367c:	4b3b      	ldr	r3, [pc, #236]	; (376c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    367e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3680:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3682:	f104 0008 	add.w	r0, r4, #8
    3686:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    368a:	078f      	lsls	r7, r1, #30
    368c:	d50c      	bpl.n	36a8 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    368e:	2a00      	cmp	r2, #0
    3690:	d1d8      	bne.n	3644 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3692:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    3696:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    369a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    369e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    36a2:	bbcd      	cbnz	r5, 3718 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    36a4:	4833      	ldr	r0, [pc, #204]	; (3774 <nrfx_gpiote_input_configure+0x150>)
    36a6:	e7ce      	b.n	3646 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    36a8:	f021 0120 	bic.w	r1, r1, #32
    36ac:	04c9      	lsls	r1, r1, #19
    36ae:	0cc9      	lsrs	r1, r1, #19
    36b0:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    36b4:	2a00      	cmp	r2, #0
    36b6:	d0ec      	beq.n	3692 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    36b8:	2e03      	cmp	r6, #3
    36ba:	d8c3      	bhi.n	3644 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    36bc:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    36be:	b92e      	cbnz	r6, 36cc <nrfx_gpiote_input_configure+0xa8>
    36c0:	4a2d      	ldr	r2, [pc, #180]	; (3778 <nrfx_gpiote_input_configure+0x154>)
    36c2:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    36c6:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    36ca:	e7e2      	b.n	3692 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    36cc:	00ba      	lsls	r2, r7, #2
    36ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    36d2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    36d6:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    36da:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    36de:	f02c 0c03 	bic.w	ip, ip, #3
    36e2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    36e6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    36ea:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    36ee:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    36f2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    36f6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    36fa:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    36fe:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    3702:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    3706:	ea4c 0c0e 	orr.w	ip, ip, lr
    370a:	f041 0120 	orr.w	r1, r1, #32
    370e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    3712:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    3716:	e7bc      	b.n	3692 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3718:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    371c:	4620      	mov	r0, r4
    371e:	f7ff ff3b 	bl	3598 <release_handler>
    if (!handler)
    3722:	2e00      	cmp	r6, #0
    3724:	d0be      	beq.n	36a4 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3726:	4d11      	ldr	r5, [pc, #68]	; (376c <nrfx_gpiote_input_configure+0x148>)
    3728:	682b      	ldr	r3, [r5, #0]
    372a:	429e      	cmp	r6, r3
    372c:	d104      	bne.n	3738 <nrfx_gpiote_input_configure+0x114>
    372e:	686b      	ldr	r3, [r5, #4]
    3730:	429f      	cmp	r7, r3
    3732:	d101      	bne.n	3738 <nrfx_gpiote_input_configure+0x114>
    3734:	2200      	movs	r2, #0
    3736:	e00a      	b.n	374e <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3738:	4810      	ldr	r0, [pc, #64]	; (377c <nrfx_gpiote_input_configure+0x158>)
    373a:	f10d 010f 	add.w	r1, sp, #15
    373e:	f7ff fe15 	bl	336c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3742:	4b0c      	ldr	r3, [pc, #48]	; (3774 <nrfx_gpiote_input_configure+0x150>)
    3744:	4298      	cmp	r0, r3
    3746:	f47f af7e 	bne.w	3646 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    374a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    374e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3752:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3756:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3758:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    375a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    375e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3766:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    376a:	e79b      	b.n	36a4 <nrfx_gpiote_input_configure+0x80>
    376c:	20000080 	.word	0x20000080
    3770:	0bad0004 	.word	0x0bad0004
    3774:	0bad0000 	.word	0x0bad0000
    3778:	40006000 	.word	0x40006000
    377c:	200000f4 	.word	0x200000f4

00003780 <nrfx_gpiote_output_configure>:
{
    3780:	b5f0      	push	{r4, r5, r6, r7, lr}
    3782:	4604      	mov	r4, r0
    3784:	b085      	sub	sp, #20
    3786:	4615      	mov	r5, r2
    if (p_config)
    3788:	b319      	cbz	r1, 37d2 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    378a:	4e33      	ldr	r6, [pc, #204]	; (3858 <nrfx_gpiote_output_configure+0xd8>)
    378c:	f100 0708 	add.w	r7, r0, #8
    3790:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3794:	0793      	lsls	r3, r2, #30
    3796:	d403      	bmi.n	37a0 <nrfx_gpiote_output_configure+0x20>
    3798:	f7ff fed6 	bl	3548 <pin_in_use_by_te>
    379c:	2800      	cmp	r0, #0
    379e:	d158      	bne.n	3852 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    37a0:	f012 0f1c 	tst.w	r2, #28
    37a4:	d002      	beq.n	37ac <nrfx_gpiote_output_configure+0x2c>
    37a6:	784b      	ldrb	r3, [r1, #1]
    37a8:	2b01      	cmp	r3, #1
    37aa:	d052      	beq.n	3852 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    37ac:	2301      	movs	r3, #1
    37ae:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    37b2:	2300      	movs	r3, #0
    37b4:	e9cd 1300 	strd	r1, r3, [sp]
    37b8:	1c4a      	adds	r2, r1, #1
    37ba:	1c8b      	adds	r3, r1, #2
    37bc:	4620      	mov	r0, r4
    37be:	f10d 010f 	add.w	r1, sp, #15
    37c2:	f002 fb18 	bl	5df6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    37c6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    37ca:	f043 0303 	orr.w	r3, r3, #3
    37ce:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    37d2:	b915      	cbnz	r5, 37da <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    37d4:	4821      	ldr	r0, [pc, #132]	; (385c <nrfx_gpiote_output_configure+0xdc>)
}
    37d6:	b005      	add	sp, #20
    37d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    37da:	4e1f      	ldr	r6, [pc, #124]	; (3858 <nrfx_gpiote_output_configure+0xd8>)
    37dc:	f104 0708 	add.w	r7, r4, #8
    37e0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    37e4:	0783      	lsls	r3, r0, #30
    37e6:	d534      	bpl.n	3852 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    37e8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    37ec:	4661      	mov	r1, ip
    37ee:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    37f0:	f020 0020 	bic.w	r0, r0, #32
    37f4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    37f8:	04c0      	lsls	r0, r0, #19
    37fa:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    37fe:	0cc0      	lsrs	r0, r0, #19
    3800:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3804:	2300      	movs	r3, #0
    3806:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    380a:	786a      	ldrb	r2, [r5, #1]
    380c:	2a00      	cmp	r2, #0
    380e:	d0e1      	beq.n	37d4 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3810:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3814:	78ad      	ldrb	r5, [r5, #2]
    3816:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    381a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    381e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3822:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3826:	0223      	lsls	r3, r4, #8
    3828:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    382c:	0412      	lsls	r2, r2, #16
    382e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3832:	ea43 030e 	orr.w	r3, r3, lr
    3836:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3838:	052a      	lsls	r2, r5, #20
    383a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    383e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3842:	4313      	orrs	r3, r2
    3844:	f040 0020 	orr.w	r0, r0, #32
    3848:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    384c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3850:	e7c0      	b.n	37d4 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    3852:	4803      	ldr	r0, [pc, #12]	; (3860 <nrfx_gpiote_output_configure+0xe0>)
    3854:	e7bf      	b.n	37d6 <nrfx_gpiote_output_configure+0x56>
    3856:	bf00      	nop
    3858:	20000080 	.word	0x20000080
    385c:	0bad0000 	.word	0x0bad0000
    3860:	0bad0004 	.word	0x0bad0004

00003864 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3864:	4b01      	ldr	r3, [pc, #4]	; (386c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3866:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    386a:	4770      	bx	lr
    386c:	20000080 	.word	0x20000080

00003870 <nrfx_gpiote_channel_get>:
{
    3870:	b508      	push	{r3, lr}
    3872:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3874:	f7ff fe68 	bl	3548 <pin_in_use_by_te>
    3878:	b138      	cbz	r0, 388a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    387a:	4b05      	ldr	r3, [pc, #20]	; (3890 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    387c:	4805      	ldr	r0, [pc, #20]	; (3894 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    387e:	3208      	adds	r2, #8
    3880:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    3884:	0b5b      	lsrs	r3, r3, #13
    3886:	700b      	strb	r3, [r1, #0]
}
    3888:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    388a:	4803      	ldr	r0, [pc, #12]	; (3898 <nrfx_gpiote_channel_get+0x28>)
    388c:	e7fc      	b.n	3888 <nrfx_gpiote_channel_get+0x18>
    388e:	bf00      	nop
    3890:	20000080 	.word	0x20000080
    3894:	0bad0000 	.word	0x0bad0000
    3898:	0bad0004 	.word	0x0bad0004

0000389c <nrfx_gpiote_init>:
{
    389c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    389e:	4c0f      	ldr	r4, [pc, #60]	; (38dc <nrfx_gpiote_init+0x40>)
    38a0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    38a4:	b9bd      	cbnz	r5, 38d6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    38a6:	2260      	movs	r2, #96	; 0x60
    38a8:	4629      	mov	r1, r5
    38aa:	f104 0010 	add.w	r0, r4, #16
    38ae:	f001 ffdb 	bl	5868 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    38b2:	2006      	movs	r0, #6
    38b4:	f7fe f876 	bl	19a4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    38b8:	4b09      	ldr	r3, [pc, #36]	; (38e0 <nrfx_gpiote_init+0x44>)
    return err_code;
    38ba:	480a      	ldr	r0, [pc, #40]	; (38e4 <nrfx_gpiote_init+0x48>)
    38bc:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    38c0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    38c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    38c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    38cc:	2301      	movs	r3, #1
    38ce:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    38d2:	6763      	str	r3, [r4, #116]	; 0x74
}
    38d4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    38d6:	4804      	ldr	r0, [pc, #16]	; (38e8 <nrfx_gpiote_init+0x4c>)
    38d8:	e7fc      	b.n	38d4 <nrfx_gpiote_init+0x38>
    38da:	bf00      	nop
    38dc:	20000080 	.word	0x20000080
    38e0:	40006000 	.word	0x40006000
    38e4:	0bad0000 	.word	0x0bad0000
    38e8:	0bad0005 	.word	0x0bad0005

000038ec <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    38ec:	4b03      	ldr	r3, [pc, #12]	; (38fc <nrfx_gpiote_is_init+0x10>)
    38ee:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    38f2:	3800      	subs	r0, #0
    38f4:	bf18      	it	ne
    38f6:	2001      	movne	r0, #1
    38f8:	4770      	bx	lr
    38fa:	bf00      	nop
    38fc:	20000080 	.word	0x20000080

00003900 <nrfx_gpiote_channel_free>:
{
    3900:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3902:	4801      	ldr	r0, [pc, #4]	; (3908 <nrfx_gpiote_channel_free+0x8>)
    3904:	f7ff bd58 	b.w	33b8 <nrfx_flag32_free>
    3908:	200000f0 	.word	0x200000f0

0000390c <nrfx_gpiote_channel_alloc>:
{
    390c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    390e:	4801      	ldr	r0, [pc, #4]	; (3914 <nrfx_gpiote_channel_alloc+0x8>)
    3910:	f7ff bd2c 	b.w	336c <nrfx_flag32_alloc>
    3914:	200000f0 	.word	0x200000f0

00003918 <nrfx_gpiote_trigger_enable>:
{
    3918:	b537      	push	{r0, r1, r2, r4, r5, lr}
    391a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    391c:	f7ff fe14 	bl	3548 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3920:	f104 0208 	add.w	r2, r4, #8
    3924:	4b1e      	ldr	r3, [pc, #120]	; (39a0 <nrfx_gpiote_trigger_enable+0x88>)
    3926:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    392a:	b1e8      	cbz	r0, 3968 <nrfx_gpiote_trigger_enable+0x50>
    392c:	f013 0502 	ands.w	r5, r3, #2
    3930:	d11a      	bne.n	3968 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3932:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3934:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3936:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    393a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    393e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3942:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3946:	6005      	str	r5, [r0, #0]
    3948:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    394a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    394e:	f040 0001 	orr.w	r0, r0, #1
    3952:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    3956:	b129      	cbz	r1, 3964 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3958:	2201      	movs	r2, #1
    395a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    395e:	4a11      	ldr	r2, [pc, #68]	; (39a4 <nrfx_gpiote_trigger_enable+0x8c>)
    3960:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3964:	b003      	add	sp, #12
    3966:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3968:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    396c:	2b04      	cmp	r3, #4
    396e:	d012      	beq.n	3996 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3970:	2b05      	cmp	r3, #5
    3972:	d012      	beq.n	399a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3974:	a801      	add	r0, sp, #4
    3976:	9401      	str	r4, [sp, #4]
    3978:	f7ff fdd8 	bl	352c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    397c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    397e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3982:	40d9      	lsrs	r1, r3
    3984:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3988:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    398a:	4620      	mov	r0, r4
}
    398c:	b003      	add	sp, #12
    398e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3992:	f002 ba77 	b.w	5e84 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3996:	2103      	movs	r1, #3
    3998:	e7f7      	b.n	398a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    399a:	2102      	movs	r1, #2
    399c:	e7f5      	b.n	398a <nrfx_gpiote_trigger_enable+0x72>
    399e:	bf00      	nop
    39a0:	20000080 	.word	0x20000080
    39a4:	40006000 	.word	0x40006000

000039a8 <nrfx_gpiote_trigger_disable>:
{
    39a8:	b508      	push	{r3, lr}
    39aa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    39ac:	f7ff fdcc 	bl	3548 <pin_in_use_by_te>
    39b0:	b1c0      	cbz	r0, 39e4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    39b2:	f102 0108 	add.w	r1, r2, #8
    39b6:	4b0e      	ldr	r3, [pc, #56]	; (39f0 <nrfx_gpiote_trigger_disable+0x48>)
    39b8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    39bc:	0799      	lsls	r1, r3, #30
    39be:	d411      	bmi.n	39e4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    39c0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    39c2:	2201      	movs	r2, #1
    39c4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    39c6:	009b      	lsls	r3, r3, #2
    39c8:	490a      	ldr	r1, [pc, #40]	; (39f4 <nrfx_gpiote_trigger_disable+0x4c>)
    39ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    39ce:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    39d2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    39d6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    39da:	f022 0203 	bic.w	r2, r2, #3
    39de:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    39e2:	bd08      	pop	{r3, pc}
    39e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    39e8:	2100      	movs	r1, #0
    39ea:	4610      	mov	r0, r2
    39ec:	f002 ba4a 	b.w	5e84 <nrf_gpio_cfg_sense_set>
    39f0:	20000080 	.word	0x20000080
    39f4:	40006000 	.word	0x40006000

000039f8 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    39f8:	4b0e      	ldr	r3, [pc, #56]	; (3a34 <nrfx_gpiote_pin_uninit+0x3c>)
    39fa:	f100 0208 	add.w	r2, r0, #8
{
    39fe:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3a00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    3a04:	07db      	lsls	r3, r3, #31
{
    3a06:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3a08:	d511      	bpl.n	3a2e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    3a0a:	f7ff ffcd 	bl	39a8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3a0e:	4620      	mov	r0, r4
    3a10:	f7ff fdec 	bl	35ec <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3a14:	a801      	add	r0, sp, #4
    3a16:	9401      	str	r4, [sp, #4]
    3a18:	f7ff fd88 	bl	352c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3a1c:	9b01      	ldr	r3, [sp, #4]
    3a1e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3a22:	2202      	movs	r2, #2
    3a24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    3a28:	4803      	ldr	r0, [pc, #12]	; (3a38 <nrfx_gpiote_pin_uninit+0x40>)
}
    3a2a:	b002      	add	sp, #8
    3a2c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3a2e:	4803      	ldr	r0, [pc, #12]	; (3a3c <nrfx_gpiote_pin_uninit+0x44>)
    3a30:	e7fb      	b.n	3a2a <nrfx_gpiote_pin_uninit+0x32>
    3a32:	bf00      	nop
    3a34:	20000080 	.word	0x20000080
    3a38:	0bad0000 	.word	0x0bad0000
    3a3c:	0bad0004 	.word	0x0bad0004

00003a40 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a44:	4b64      	ldr	r3, [pc, #400]	; (3bd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x140>)
    return p_reg->INTENSET & mask;
    3a46:	4865      	ldr	r0, [pc, #404]	; (3bdc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3a48:	4965      	ldr	r1, [pc, #404]	; (3be0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x148>)
    uint32_t status = 0;
    3a4a:	2600      	movs	r6, #0
{
    3a4c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3a4e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3a50:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3a52:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3a54:	b135      	cbz	r5, 3a64 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3a56:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    3a5a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3a5c:	bf1e      	ittt	ne
    3a5e:	601c      	strne	r4, [r3, #0]
    3a60:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3a62:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3a64:	3304      	adds	r3, #4
    3a66:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    3a68:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3a6c:	d1f1      	bne.n	3a52 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3a6e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 3bdc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x144>
    3a72:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3a76:	2b00      	cmp	r3, #0
    3a78:	f000 8091 	beq.w	3b9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x106>
        *p_masks = gpio_regs[i]->LATCH;
    3a7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3a80:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3a84:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3a86:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3a8a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    3a8e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3a90:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3a94:	2700      	movs	r7, #0
            while (latch[i])
    3a96:	f10d 0910 	add.w	r9, sp, #16
    3a9a:	017b      	lsls	r3, r7, #5
    3a9c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3a9e:	f04f 0a01 	mov.w	sl, #1
    3aa2:	e049      	b.n	3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>
                pin += 32 * i;
    3aa4:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3aa6:	4a4f      	ldr	r2, [pc, #316]	; (3be4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14c>)
                uint32_t pin = NRF_CTZ(latch[i]);
    3aa8:	fa94 f4a4 	rbit	r4, r4
    3aac:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    3ab0:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3ab2:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3ab6:	08e0      	lsrs	r0, r4, #3
    3ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    3abc:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    3abe:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3ac2:	fa0a fc02 	lsl.w	ip, sl, r2
    3ac6:	f819 2000 	ldrb.w	r2, [r9, r0]
    3aca:	ea22 020c 	bic.w	r2, r2, ip
    3ace:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3ad2:	a803      	add	r0, sp, #12
    3ad4:	f3c3 0582 	ubfx	r5, r3, #2, #3
    3ad8:	0899      	lsrs	r1, r3, #2
    3ada:	f7ff fd27 	bl	352c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3ade:	9a03      	ldr	r2, [sp, #12]
    3ae0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    3ae4:	074b      	lsls	r3, r1, #29
    3ae6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3aea:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3aec:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    3af0:	d529      	bpl.n	3b46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xae>
        call_handler(pin, trigger);
    3af2:	4620      	mov	r0, r4
    3af4:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3af6:	b2d5      	uxtb	r5, r2
    3af8:	f7ff fd30 	bl	355c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3afc:	a803      	add	r0, sp, #12
    3afe:	9403      	str	r4, [sp, #12]
    3b00:	f7ff fd14 	bl	352c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3b04:	9b03      	ldr	r3, [sp, #12]
    3b06:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3b0a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3b0e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    3b12:	429d      	cmp	r5, r3
    3b14:	d107      	bne.n	3b26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8e>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3b16:	2100      	movs	r1, #0
    3b18:	4620      	mov	r0, r4
    3b1a:	f002 f9b3 	bl	5e84 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3b1e:	4629      	mov	r1, r5
    3b20:	4620      	mov	r0, r4
    3b22:	f002 f9af 	bl	5e84 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3b26:	a803      	add	r0, sp, #12
    3b28:	9403      	str	r4, [sp, #12]
    3b2a:	f7ff fcff 	bl	352c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    3b2e:	9b03      	ldr	r3, [sp, #12]
    3b30:	fa0a f303 	lsl.w	r3, sl, r3
    3b34:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    3b38:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    3b3c:	2c00      	cmp	r4, #0
    3b3e:	d1b1      	bne.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3b40:	b9cf      	cbnz	r7, 3b76 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xde>
    3b42:	2701      	movs	r7, #1
    3b44:	e7a9      	b.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3b46:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3b48:	bf0c      	ite	eq
    3b4a:	2103      	moveq	r1, #3
    3b4c:	2102      	movne	r1, #2
    3b4e:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3b50:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3b52:	f002 f997 	bl	5e84 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3b56:	2d03      	cmp	r5, #3
    3b58:	d004      	beq.n	3b64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xcc>
    3b5a:	9a01      	ldr	r2, [sp, #4]
    3b5c:	2a02      	cmp	r2, #2
    3b5e:	d106      	bne.n	3b6e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3b60:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3b62:	d1e0      	bne.n	3b26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8e>
            call_handler(pin, trigger);
    3b64:	4659      	mov	r1, fp
    3b66:	4620      	mov	r0, r4
    3b68:	f7ff fcf8 	bl	355c <call_handler>
    3b6c:	e7db      	b.n	3b26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3b6e:	2a03      	cmp	r2, #3
    3b70:	d1d9      	bne.n	3b26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8e>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3b72:	2d02      	cmp	r5, #2
    3b74:	e7f5      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3b76:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    3b7a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    3b7e:	491a      	ldr	r1, [pc, #104]	; (3be8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x150>)
    3b80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3b84:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3b88:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3b8a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3b8e:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    3b92:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3b94:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    3b98:	4313      	orrs	r3, r2
    3b9a:	f47f af7b 	bne.w	3a94 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    3b9e:	2401      	movs	r4, #1
    while (mask)
    3ba0:	b916      	cbnz	r6, 3ba8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3ba2:	b007      	add	sp, #28
    3ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    3ba8:	fa96 f3a6 	rbit	r3, r6
    3bac:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3bb0:	fa04 f203 	lsl.w	r2, r4, r3
    3bb4:	009b      	lsls	r3, r3, #2
    3bb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3bba:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3bbe:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3bc2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3bc6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3bca:	f3c0 2005 	ubfx	r0, r0, #8, #6
    3bce:	f3c1 4101 	ubfx	r1, r1, #16, #2
    3bd2:	f7ff fcc3 	bl	355c <call_handler>
    3bd6:	e7e3      	b.n	3ba0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x108>
    3bd8:	40006100 	.word	0x40006100
    3bdc:	40006000 	.word	0x40006000
    3be0:	40006120 	.word	0x40006120
    3be4:	20000080 	.word	0x20000080
    3be8:	50000300 	.word	0x50000300

00003bec <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3bec:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    3bee:	4801      	ldr	r0, [pc, #4]	; (3bf4 <nrfx_ppi_channel_alloc+0x8>)
    3bf0:	f7ff bbbc 	b.w	336c <nrfx_flag32_alloc>
    3bf4:	200000fc 	.word	0x200000fc

00003bf8 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    3bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    3bfa:	4b30      	ldr	r3, [pc, #192]	; (3cbc <twi_tx_start_transfer+0xc4>)
    3bfc:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE void nrf_twi_event_clear(NRF_TWI_Type  * p_reg,
                                           nrf_twi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3bfe:	2300      	movs	r3, #0
    3c00:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    3c04:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    3c08:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    3c0c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    3c10:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    3c14:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    3c18:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    3c1c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    3c20:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    3c24:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    3c26:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c2a:	2301      	movs	r3, #1
    3c2c:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    3c2e:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
    3c32:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    3c34:	429a      	cmp	r2, r3
    3c36:	bf18      	it	ne
    3c38:	6083      	strne	r3, [r0, #8]
{
    3c3a:	4604      	mov	r4, r0
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
    3c3c:	f002 f931 	bl	5ea2 <twi_send_byte>

    if (p_cb->handler)
    3c40:	682b      	ldr	r3, [r5, #0]
    3c42:	b183      	cbz	r3, 3c66 <twi_tx_start_transfer+0x6e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    3c44:	f240 2386 	movw	r3, #646	; 0x286
    3c48:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    3c4a:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    3c4c:	481c      	ldr	r0, [pc, #112]	; (3cc0 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
    3c4e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    3c52:	b003      	add	sp, #12
    3c54:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
    3c56:	4629      	mov	r1, r5
    3c58:	4620      	mov	r0, r4
    3c5a:	f002 f93f 	bl	5edc <twi_transfer>
        while ((hw_timeout > 0) &&
    3c5e:	b128      	cbz	r0, 3c6c <twi_tx_start_transfer+0x74>
            hw_timeout--;
    3c60:	9b01      	ldr	r3, [sp, #4]
    3c62:	3b01      	subs	r3, #1
    3c64:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    3c66:	9b01      	ldr	r3, [sp, #4]
    3c68:	2b00      	cmp	r3, #0
    3c6a:	dcf4      	bgt.n	3c56 <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
    3c6c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    3c70:	b95b      	cbnz	r3, 3c8a <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    3c72:	4813      	ldr	r0, [pc, #76]	; (3cc0 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
    3c74:	9b01      	ldr	r3, [sp, #4]
    3c76:	2b00      	cmp	r3, #0
    3c78:	dceb      	bgt.n	3c52 <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    3c7a:	2300      	movs	r3, #0
    3c7c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    3c80:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    3c82:	4810      	ldr	r0, [pc, #64]	; (3cc4 <twi_tx_start_transfer+0xcc>)
    3c84:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    3c88:	e7e3      	b.n	3c52 <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
    3c8a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    3c8e:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    3c92:	b18b      	cbz	r3, 3cb8 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    3c94:	4a0c      	ldr	r2, [pc, #48]	; (3cc8 <twi_tx_start_transfer+0xd0>)
    3c96:	480b      	ldr	r0, [pc, #44]	; (3cc4 <twi_tx_start_transfer+0xcc>)
    3c98:	f013 0f01 	tst.w	r3, #1
    3c9c:	bf18      	it	ne
    3c9e:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3ca0:	f013 0f02 	tst.w	r3, #2
    3ca4:	f102 0201 	add.w	r2, r2, #1
    3ca8:	bf18      	it	ne
    3caa:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    3cac:	f013 0f04 	tst.w	r3, #4
    3cb0:	4b06      	ldr	r3, [pc, #24]	; (3ccc <twi_tx_start_transfer+0xd4>)
    3cb2:	bf18      	it	ne
    3cb4:	4618      	movne	r0, r3
    3cb6:	e7dd      	b.n	3c74 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
    3cb8:	4802      	ldr	r0, [pc, #8]	; (3cc4 <twi_tx_start_transfer+0xcc>)
    3cba:	e7db      	b.n	3c74 <twi_tx_start_transfer+0x7c>
    3cbc:	000186a0 	.word	0x000186a0
    3cc0:	0bad0000 	.word	0x0bad0000
    3cc4:	0bad0001 	.word	0x0bad0001
    3cc8:	0bae0000 	.word	0x0bae0000
    3ccc:	0bae0002 	.word	0x0bae0002

00003cd0 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    3cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    3cd2:	4b34      	ldr	r3, [pc, #208]	; (3da4 <twi_rx_start_transfer+0xd4>)
    3cd4:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3cd6:	2300      	movs	r3, #0
    3cd8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    3cdc:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    3ce0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    3ce4:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    3ce8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    3cec:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    3cf0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    3cf4:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    3cf8:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    3cfa:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    3cfe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    3d00:	2b01      	cmp	r3, #1
{
    3d02:	4604      	mov	r4, r0
    3d04:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    3d06:	d117      	bne.n	3d38 <twi_rx_start_transfer+0x68>
    3d08:	6a0b      	ldr	r3, [r1, #32]
    3d0a:	065b      	lsls	r3, r3, #25
    3d0c:	d414      	bmi.n	3d38 <twi_rx_start_transfer+0x68>
    p_reg->SHORTS = mask;
    3d0e:	2302      	movs	r3, #2
    3d10:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d14:	2301      	movs	r3, #1
    3d16:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    3d18:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    3d1c:	2a02      	cmp	r2, #2
    3d1e:	bf18      	it	ne
    3d20:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    3d22:	682b      	ldr	r3, [r5, #0]
    3d24:	b193      	cbz	r3, 3d4c <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    3d26:	f240 2386 	movw	r3, #646	; 0x286
    3d2a:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    3d2c:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    3d2e:	481e      	ldr	r0, [pc, #120]	; (3da8 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
    3d30:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    3d34:	b003      	add	sp, #12
    3d36:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
    3d38:	2301      	movs	r3, #1
    3d3a:	e7e9      	b.n	3d10 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
    3d3c:	4629      	mov	r1, r5
    3d3e:	4620      	mov	r0, r4
    3d40:	f002 f8cc 	bl	5edc <twi_transfer>
        while ((hw_timeout > 0) &&
    3d44:	b128      	cbz	r0, 3d52 <twi_rx_start_transfer+0x82>
               hw_timeout--;
    3d46:	9b01      	ldr	r3, [sp, #4]
    3d48:	3b01      	subs	r3, #1
    3d4a:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    3d4c:	9b01      	ldr	r3, [sp, #4]
    3d4e:	2b00      	cmp	r3, #0
    3d50:	dcf4      	bgt.n	3d3c <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
    3d52:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    3d56:	b95b      	cbnz	r3, 3d70 <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    3d58:	4813      	ldr	r0, [pc, #76]	; (3da8 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
    3d5a:	9b01      	ldr	r3, [sp, #4]
    3d5c:	2b00      	cmp	r3, #0
    3d5e:	dce9      	bgt.n	3d34 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    3d60:	2300      	movs	r3, #0
    3d62:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    3d66:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    3d68:	4810      	ldr	r0, [pc, #64]	; (3dac <twi_rx_start_transfer+0xdc>)
    3d6a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    3d6e:	e7e1      	b.n	3d34 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    3d70:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    3d74:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    3d78:	b18b      	cbz	r3, 3d9e <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    3d7a:	4a0d      	ldr	r2, [pc, #52]	; (3db0 <twi_rx_start_transfer+0xe0>)
    3d7c:	480b      	ldr	r0, [pc, #44]	; (3dac <twi_rx_start_transfer+0xdc>)
    3d7e:	f013 0f01 	tst.w	r3, #1
    3d82:	bf18      	it	ne
    3d84:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3d86:	f013 0f02 	tst.w	r3, #2
    3d8a:	f102 0201 	add.w	r2, r2, #1
    3d8e:	bf18      	it	ne
    3d90:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    3d92:	f013 0f04 	tst.w	r3, #4
    3d96:	4b07      	ldr	r3, [pc, #28]	; (3db4 <twi_rx_start_transfer+0xe4>)
    3d98:	bf18      	it	ne
    3d9a:	4618      	movne	r0, r3
    3d9c:	e7dd      	b.n	3d5a <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
    3d9e:	4803      	ldr	r0, [pc, #12]	; (3dac <twi_rx_start_transfer+0xdc>)
    3da0:	e7db      	b.n	3d5a <twi_rx_start_transfer+0x8a>
    3da2:	bf00      	nop
    3da4:	000186a0 	.word	0x000186a0
    3da8:	0bad0000 	.word	0x0bad0000
    3dac:	0bad0001 	.word	0x0bad0001
    3db0:	0bae0000 	.word	0x0bae0000
    3db4:	0bae0002 	.word	0x0bae0002

00003db8 <nrfx_twi_init>:
{
    3db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3dba:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3dbc:	4d29      	ldr	r5, [pc, #164]	; (3e64 <nrfx_twi_init+0xac>)
    3dbe:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    3dc2:	fb0c fc07 	mul.w	ip, ip, r7
    3dc6:	eb05 040c 	add.w	r4, r5, ip
    3dca:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    3dce:	2e00      	cmp	r6, #0
    3dd0:	d146      	bne.n	3e60 <nrfx_twi_init+0xa8>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    3dd2:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
    3dd4:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    3dd6:	7b4b      	ldrb	r3, [r1, #13]
    3dd8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    3ddc:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
    3dde:	60a6      	str	r6, [r4, #8]
    p_cb->handler         = event_handler;
    3de0:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    3de4:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
    3de8:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
    3dec:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    3df0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
    3df4:	b9e3      	cbnz	r3, 3e30 <nrfx_twi_init+0x78>
        TWI_PIN_INIT(p_config->scl);
    3df6:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
    3df8:	4b1b      	ldr	r3, [pc, #108]	; (3e68 <nrfx_twi_init+0xb0>)
    *p_pin = pin_number & 0x1F;
    3dfa:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    3dfe:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    3e00:	2c01      	cmp	r4, #1
    3e02:	bf18      	it	ne
    3e04:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3e08:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 1: return NRF_P1;
    3e0c:	bf08      	it	eq
    3e0e:	469e      	moveq	lr, r3
    reg->PIN_CNF[pin_number] = cnf;
    3e10:	f240 6c0c 	movw	ip, #1548	; 0x60c
    3e14:	f84e c024 	str.w	ip, [lr, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
    3e18:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    3e1a:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    3e1e:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    3e20:	2c01      	cmp	r4, #1
    3e22:	bf18      	it	ne
    3e24:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3e28:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
    3e2c:	f843 c024 	str.w	ip, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    3e30:	7bcb      	ldrb	r3, [r1, #15]
    3e32:	b92b      	cbnz	r3, 3e40 <nrfx_twi_init+0x88>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    3e34:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    3e38:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    3e3c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    3e40:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    3e42:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    3e46:	b11a      	cbz	r2, 3e50 <nrfx_twi_init+0x98>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    3e48:	f340 3007 	sbfx	r0, r0, #12, #8
    3e4c:	f7fd fdaa 	bl	19a4 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3e50:	233c      	movs	r3, #60	; 0x3c
    3e52:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    3e56:	4805      	ldr	r0, [pc, #20]	; (3e6c <nrfx_twi_init+0xb4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3e58:	2301      	movs	r3, #1
    3e5a:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    3e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    3e60:	4803      	ldr	r0, [pc, #12]	; (3e70 <nrfx_twi_init+0xb8>)
    3e62:	e7fc      	b.n	3e5e <nrfx_twi_init+0xa6>
    3e64:	20000a2c 	.word	0x20000a2c
    3e68:	50000300 	.word	0x50000300
    3e6c:	0bad0000 	.word	0x0bad0000
    3e70:	0bad0005 	.word	0x0bad0005

00003e74 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    3e74:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3e76:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    3e78:	2105      	movs	r1, #5
    3e7a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    3e7e:	4b04      	ldr	r3, [pc, #16]	; (3e90 <nrfx_twi_enable+0x1c>)
    3e80:	213c      	movs	r1, #60	; 0x3c
    3e82:	fb01 3302 	mla	r3, r1, r2, r3
    3e86:	2202      	movs	r2, #2
    3e88:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    3e8c:	4770      	bx	lr
    3e8e:	bf00      	nop
    3e90:	20000a2c 	.word	0x20000a2c

00003e94 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    3e94:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
    3e96:	4b0c      	ldr	r3, [pc, #48]	; (3ec8 <nrfx_twi_disable+0x34>)
{
    3e98:	b510      	push	{r4, lr}
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3e9a:	7904      	ldrb	r4, [r0, #4]
    3e9c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    3ea0:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3ea4:	4b09      	ldr	r3, [pc, #36]	; (3ecc <nrfx_twi_disable+0x38>)
    3ea6:	f021 0103 	bic.w	r1, r1, #3
    3eaa:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    3eae:	2100      	movs	r1, #0
    3eb0:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    3eb4:	223c      	movs	r2, #60	; 0x3c
    3eb6:	fb02 3304 	mla	r3, r2, r4, r3
    3eba:	2201      	movs	r2, #1
    3ebc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    p_cb->busy = false;
    3ec0:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
    3ec4:	bd10      	pop	{r4, pc}
    3ec6:	bf00      	nop
    3ec8:	00044286 	.word	0x00044286
    3ecc:	20000a2c 	.word	0x20000a2c

00003ed0 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    3ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3ed4:	4f31      	ldr	r7, [pc, #196]	; (3f9c <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3ed6:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    3ed8:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3edc:	233c      	movs	r3, #60	; 0x3c
    3ede:	fb03 7304 	mla	r3, r3, r4, r7
{
    3ee2:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3ee4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    3ee8:	2b01      	cmp	r3, #1
{
    3eea:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    3eec:	d104      	bne.n	3ef8 <nrfx_twi_xfer+0x28>
    3eee:	780b      	ldrb	r3, [r1, #0]
    3ef0:	2b01      	cmp	r3, #1
    3ef2:	d106      	bne.n	3f02 <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
    3ef4:	482a      	ldr	r0, [pc, #168]	; (3fa0 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    3ef6:	e011      	b.n	3f1c <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    3ef8:	2b02      	cmp	r3, #2
    3efa:	d102      	bne.n	3f02 <nrfx_twi_xfer+0x32>
    3efc:	780b      	ldrb	r3, [r1, #0]
    3efe:	2b01      	cmp	r3, #1
    3f00:	d1f8      	bne.n	3ef4 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
    3f02:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    3f04:	4b27      	ldr	r3, [pc, #156]	; (3fa4 <nrfx_twi_xfer+0xd4>)
    3f06:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    3f0a:	fb06 7604 	mla	r6, r6, r4, r7
    3f0e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    3f12:	b12b      	cbz	r3, 3f20 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    3f14:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    3f16:	4824      	ldr	r0, [pc, #144]	; (3fa8 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
    3f18:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    3f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    3f20:	f08c 0304 	eor.w	r3, ip, #4
    3f24:	f3c3 0380 	ubfx	r3, r3, #2, #1
    3f28:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    3f2c:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    3f30:	46a8      	mov	r8, r5
    3f32:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    3f36:	f106 0e0c 	add.w	lr, r6, #12
    3f3a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3f3e:	f8d8 3000 	ldr.w	r3, [r8]
    3f42:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    3f46:	686b      	ldr	r3, [r5, #4]
    3f48:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    3f4a:	68eb      	ldr	r3, [r5, #12]
    3f4c:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    3f4e:	786b      	ldrb	r3, [r5, #1]
    3f50:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    3f54:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3f56:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    3f5a:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    3f5c:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    3f60:	d017      	beq.n	3f92 <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    3f62:	b99b      	cbnz	r3, 3f8c <nrfx_twi_xfer+0xbc>
    3f64:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    3f68:	233c      	movs	r3, #60	; 0x3c
    3f6a:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    3f6e:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    3f70:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    3f74:	4648      	mov	r0, r9
    3f76:	f7ff fe3f 	bl	3bf8 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    3f7a:	233c      	movs	r3, #60	; 0x3c
    3f7c:	435c      	muls	r4, r3
    3f7e:	193a      	adds	r2, r7, r4
    3f80:	593b      	ldr	r3, [r7, r4]
    3f82:	2b00      	cmp	r3, #0
    3f84:	d1ca      	bne.n	3f1c <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
    3f86:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    3f8a:	e7c7      	b.n	3f1c <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    3f8c:	f04f 0c01 	mov.w	ip, #1
    3f90:	e7ea      	b.n	3f68 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    3f92:	4651      	mov	r1, sl
    3f94:	4648      	mov	r0, r9
    3f96:	f7ff fe9b 	bl	3cd0 <twi_rx_start_transfer>
    3f9a:	e7ee      	b.n	3f7a <nrfx_twi_xfer+0xaa>
    3f9c:	20000a2c 	.word	0x20000a2c
    3fa0:	0bad0005 	.word	0x0bad0005
    3fa4:	00044286 	.word	0x00044286
    3fa8:	0bad000b 	.word	0x0bad000b

00003fac <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    3fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    3fae:	4c2b      	ldr	r4, [pc, #172]	; (405c <nrfx_twi_0_irq_handler+0xb0>)
    3fb0:	482b      	ldr	r0, [pc, #172]	; (4060 <nrfx_twi_0_irq_handler+0xb4>)
{
    3fb2:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    3fb4:	4621      	mov	r1, r4
    3fb6:	f001 ff91 	bl	5edc <twi_transfer>
    3fba:	2800      	cmp	r0, #0
    3fbc:	d140      	bne.n	4040 <nrfx_twi_0_irq_handler+0x94>
    if (!p_cb->error &&
    3fbe:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    3fc2:	f8d4 c020 	ldr.w	ip, [r4, #32]
    if (!p_cb->error &&
    3fc6:	b9ff      	cbnz	r7, 4008 <nrfx_twi_0_irq_handler+0x5c>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    3fc8:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
    3fca:	1e9a      	subs	r2, r3, #2
    3fcc:	2a01      	cmp	r2, #1
    3fce:	d81b      	bhi.n	4008 <nrfx_twi_0_irq_handler+0x5c>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    3fd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    3fd2:	69a2      	ldr	r2, [r4, #24]
    3fd4:	4291      	cmp	r1, r2
    3fd6:	d117      	bne.n	4008 <nrfx_twi_0_irq_handler+0x5c>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    3fd8:	69e2      	ldr	r2, [r4, #28]
    3fda:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    3fdc:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    3fe0:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
    3fe2:	481f      	ldr	r0, [pc, #124]	; (4060 <nrfx_twi_0_irq_handler+0xb4>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    3fe4:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    3fe6:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    3fe8:	f884 c02c 	strb.w	ip, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    3fec:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
    3ff0:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    3ff2:	d104      	bne.n	3ffe <nrfx_twi_0_irq_handler+0x52>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    3ff4:	b007      	add	sp, #28
    3ff6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    3ffa:	f7ff bdfd 	b.w	3bf8 <twi_tx_start_transfer>
}
    3ffe:	b007      	add	sp, #28
    4000:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    4004:	f7ff be64 	b.w	3cd0 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    4008:	4e16      	ldr	r6, [pc, #88]	; (4064 <nrfx_twi_0_irq_handler+0xb8>)
    400a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    400c:	ad01      	add	r5, sp, #4
    400e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4010:	6833      	ldr	r3, [r6, #0]
    4012:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    4014:	b1ff      	cbz	r7, 4056 <nrfx_twi_0_irq_handler+0xaa>
    uint32_t error_source = p_reg->ERRORSRC;
    4016:	4a12      	ldr	r2, [pc, #72]	; (4060 <nrfx_twi_0_irq_handler+0xb4>)
    4018:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    401c:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    4020:	0799      	lsls	r1, r3, #30
    4022:	d50f      	bpl.n	4044 <nrfx_twi_0_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    4024:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
    4026:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    402a:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    402c:	f01c 0f04 	tst.w	ip, #4
        p_cb->busy = false;
    4030:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    4034:	d000      	beq.n	4038 <nrfx_twi_0_irq_handler+0x8c>
    4036:	b11f      	cbz	r7, 4040 <nrfx_twi_0_irq_handler+0x94>
            p_cb->handler(&event, p_cb->p_context);
    4038:	e9d4 3100 	ldrd	r3, r1, [r4]
    403c:	4668      	mov	r0, sp
    403e:	4798      	blx	r3
}
    4040:	b007      	add	sp, #28
    4042:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    4044:	075a      	lsls	r2, r3, #29
    4046:	d501      	bpl.n	404c <nrfx_twi_0_irq_handler+0xa0>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    4048:	2302      	movs	r3, #2
    404a:	e7ec      	b.n	4026 <nrfx_twi_0_irq_handler+0x7a>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    404c:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
    404e:	bf4c      	ite	mi
    4050:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    4052:	2304      	movpl	r3, #4
    4054:	e7e7      	b.n	4026 <nrfx_twi_0_irq_handler+0x7a>
            event.type = NRFX_TWI_EVT_DONE;
    4056:	f88d 7000 	strb.w	r7, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
    405a:	e7e6      	b.n	402a <nrfx_twi_0_irq_handler+0x7e>
    405c:	20000a2c 	.word	0x20000a2c
    4060:	40003000 	.word	0x40003000
    4064:	20000a38 	.word	0x20000a38

00004068 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4068:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    406a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    406e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    4070:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    4072:	6002      	str	r2, [r0, #0]
}
    4074:	4802      	ldr	r0, [pc, #8]	; (4080 <nrf_gpio_pin_port_decode+0x18>)
    4076:	bf18      	it	ne
    4078:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    407c:	4770      	bx	lr
    407e:	bf00      	nop
    4080:	50000300 	.word	0x50000300

00004084 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    4084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4086:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    4088:	f001 ffb4 	bl	5ff4 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    408c:	4608      	mov	r0, r1
    408e:	f001 ffb1 	bl	5ff4 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4092:	a801      	add	r0, sp, #4
    4094:	9601      	str	r6, [sp, #4]
    4096:	f7ff ffe7 	bl	4068 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    409a:	9b01      	ldr	r3, [sp, #4]
    409c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    40a0:	460c      	mov	r4, r1
    40a2:	f240 610d 	movw	r1, #1549	; 0x60d
    40a6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    40aa:	a801      	add	r0, sp, #4
    40ac:	9401      	str	r4, [sp, #4]
    40ae:	f7ff ffdb 	bl	4068 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    40b2:	9b01      	ldr	r3, [sp, #4]
    40b4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    40b8:	2509      	movs	r5, #9
    40ba:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    40be:	2004      	movs	r0, #4
    40c0:	f001 fe4b 	bl	5d5a <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    40c4:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    40c6:	a801      	add	r0, sp, #4
    40c8:	9401      	str	r4, [sp, #4]
    40ca:	f7ff ffcd 	bl	4068 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    40ce:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    40d0:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    40d4:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    40d6:	07db      	lsls	r3, r3, #31
    40d8:	d415      	bmi.n	4106 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    40da:	a801      	add	r0, sp, #4
    40dc:	9601      	str	r6, [sp, #4]
    40de:	f7ff ffc3 	bl	4068 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    40e2:	9b01      	ldr	r3, [sp, #4]
    40e4:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    40e8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    40ec:	2004      	movs	r0, #4
    40ee:	f001 fe34 	bl	5d5a <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    40f2:	4630      	mov	r0, r6
    40f4:	f001 ff7e 	bl	5ff4 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    40f8:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    40fa:	2004      	movs	r0, #4
    40fc:	f001 fe2d 	bl	5d5a <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    4100:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    4104:	d1df      	bne.n	40c6 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4106:	a801      	add	r0, sp, #4
    4108:	9401      	str	r4, [sp, #4]
    410a:	f7ff ffad 	bl	4068 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    410e:	9a01      	ldr	r2, [sp, #4]
    4110:	2301      	movs	r3, #1
    4112:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    4114:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    4118:	2004      	movs	r0, #4
    411a:	f001 fe1e 	bl	5d5a <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    411e:	4620      	mov	r0, r4
    4120:	f001 ff68 	bl	5ff4 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    4124:	2004      	movs	r0, #4
    4126:	f001 fe18 	bl	5d5a <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    412a:	a801      	add	r0, sp, #4
    412c:	9401      	str	r4, [sp, #4]
    412e:	f7ff ff9b 	bl	4068 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4132:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    4134:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    4138:	4803      	ldr	r0, [pc, #12]	; (4148 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    413a:	40d3      	lsrs	r3, r2
    413c:	f003 0301 	and.w	r3, r3, #1
    4140:	1ac0      	subs	r0, r0, r3
    4142:	b003      	add	sp, #12
    4144:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4146:	bf00      	nop
    4148:	0bad0001 	.word	0x0bad0001

0000414c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    414c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    414e:	4c14      	ldr	r4, [pc, #80]	; (41a0 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4150:	4a14      	ldr	r2, [pc, #80]	; (41a4 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4152:	4915      	ldr	r1, [pc, #84]	; (41a8 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4154:	2303      	movs	r3, #3
    4156:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4158:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    415a:	4b14      	ldr	r3, [pc, #80]	; (41ac <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    415c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    415e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4160:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4164:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4166:	2300      	movs	r3, #0
    4168:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    416a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    416c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    416e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4170:	4a0f      	ldr	r2, [pc, #60]	; (41b0 <_DoInit+0x64>)
    4172:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    4174:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4176:	2210      	movs	r2, #16
    4178:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    417a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    417c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    417e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4180:	f001 fb4d 	bl	581e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4184:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4188:	490a      	ldr	r1, [pc, #40]	; (41b4 <_DoInit+0x68>)
    418a:	4620      	mov	r0, r4
    418c:	f001 fb47 	bl	581e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4190:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4194:	2320      	movs	r3, #32
    4196:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4198:	f3bf 8f5f 	dmb	sy
}
    419c:	bd10      	pop	{r4, pc}
    419e:	bf00      	nop
    41a0:	20000a68 	.word	0x20000a68
    41a4:	000069a2 	.word	0x000069a2
    41a8:	000069ab 	.word	0x000069ab
    41ac:	20000d33 	.word	0x20000d33
    41b0:	20000d23 	.word	0x20000d23
    41b4:	000069af 	.word	0x000069af

000041b8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    41b8:	4b0e      	ldr	r3, [pc, #56]	; (41f4 <z_sys_init_run_level+0x3c>)
{
    41ba:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    41bc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    41c0:	3001      	adds	r0, #1
    41c2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    41c6:	42a6      	cmp	r6, r4
    41c8:	d800      	bhi.n	41cc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    41ca:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    41cc:	e9d4 3500 	ldrd	r3, r5, [r4]
    41d0:	4628      	mov	r0, r5
    41d2:	4798      	blx	r3
		if (dev != NULL) {
    41d4:	b165      	cbz	r5, 41f0 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    41d6:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    41d8:	b130      	cbz	r0, 41e8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    41da:	2800      	cmp	r0, #0
    41dc:	bfb8      	it	lt
    41de:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    41e0:	28ff      	cmp	r0, #255	; 0xff
    41e2:	bfa8      	it	ge
    41e4:	20ff      	movge	r0, #255	; 0xff
    41e6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    41e8:	785a      	ldrb	r2, [r3, #1]
    41ea:	f042 0201 	orr.w	r2, r2, #1
    41ee:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    41f0:	3408      	adds	r4, #8
    41f2:	e7e8      	b.n	41c6 <z_sys_init_run_level+0xe>
    41f4:	0000674c 	.word	0x0000674c

000041f8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    41f8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    41fa:	4b0a      	ldr	r3, [pc, #40]	; (4224 <bg_thread_main+0x2c>)
    41fc:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    41fe:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4200:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4202:	f7ff ffd9 	bl	41b8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4206:	f000 ff83 	bl	5110 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    420a:	2003      	movs	r0, #3
    420c:	f7ff ffd4 	bl	41b8 <z_sys_init_run_level>

	z_init_static_threads();
    4210:	f000 f968 	bl	44e4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    4214:	f7fc f97c 	bl	510 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4218:	4a03      	ldr	r2, [pc, #12]	; (4228 <bg_thread_main+0x30>)
    421a:	7b13      	ldrb	r3, [r2, #12]
    421c:	f023 0301 	bic.w	r3, r3, #1
    4220:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4222:	bd08      	pop	{r3, pc}
    4224:	20001133 	.word	0x20001133
    4228:	20000370 	.word	0x20000370

0000422c <z_bss_zero>:
{
    422c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    422e:	4803      	ldr	r0, [pc, #12]	; (423c <z_bss_zero+0x10>)
    4230:	4a03      	ldr	r2, [pc, #12]	; (4240 <z_bss_zero+0x14>)
    4232:	2100      	movs	r1, #0
    4234:	1a12      	subs	r2, r2, r0
    4236:	f001 ff17 	bl	6068 <z_early_memset>
}
    423a:	bd08      	pop	{r3, pc}
    423c:	200001d0 	.word	0x200001d0
    4240:	20001134 	.word	0x20001134

00004244 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    4244:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    4246:	2300      	movs	r3, #0
{
    4248:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    424a:	2201      	movs	r2, #1
    424c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    4250:	4e13      	ldr	r6, [pc, #76]	; (42a0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4252:	4d14      	ldr	r5, [pc, #80]	; (42a4 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    4254:	9301      	str	r3, [sp, #4]
    4256:	220f      	movs	r2, #15
    4258:	e9cd 3202 	strd	r3, r2, [sp, #8]
    425c:	4912      	ldr	r1, [pc, #72]	; (42a8 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    425e:	2318      	movs	r3, #24
    4260:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    4264:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    4268:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    426a:	f44f 70b0 	mov.w	r0, #352	; 0x160
    426e:	fb00 1104 	mla	r1, r0, r4, r1
    4272:	4b0e      	ldr	r3, [pc, #56]	; (42ac <z_init_cpu+0x68>)
    4274:	9500      	str	r5, [sp, #0]
    4276:	f44f 72a0 	mov.w	r2, #320	; 0x140
    427a:	4630      	mov	r0, r6
    427c:	f000 f8d4 	bl	4428 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4280:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4282:	480b      	ldr	r0, [pc, #44]	; (42b0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    4284:	752c      	strb	r4, [r5, #20]
    4286:	f023 0304 	bic.w	r3, r3, #4
    428a:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    428c:	f44f 6302 	mov.w	r3, #2080	; 0x820
    4290:	fb03 0404 	mla	r4, r3, r4, r0
    4294:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4296:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    4298:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    429a:	b006      	add	sp, #24
    429c:	bd70      	pop	{r4, r5, r6, pc}
    429e:	bf00      	nop
    42a0:	200002f0 	.word	0x200002f0
    42a4:	20000b10 	.word	0x20000b10
    42a8:	20001da0 	.word	0x20001da0
    42ac:	0000459d 	.word	0x0000459d
    42b0:	20001f00 	.word	0x20001f00

000042b4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    42b4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    42b6:	4b2d      	ldr	r3, [pc, #180]	; (436c <z_cstart+0xb8>)
    42b8:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    42ba:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    42be:	4d2c      	ldr	r5, [pc, #176]	; (4370 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    42c0:	4e2c      	ldr	r6, [pc, #176]	; (4374 <z_cstart+0xc0>)
    42c2:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    42c4:	4f2c      	ldr	r7, [pc, #176]	; (4378 <z_cstart+0xc4>)
    42c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    42ca:	2400      	movs	r4, #0
    42cc:	616b      	str	r3, [r5, #20]
    42ce:	23e0      	movs	r3, #224	; 0xe0
    42d0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    42d4:	77ec      	strb	r4, [r5, #31]
    42d6:	762c      	strb	r4, [r5, #24]
    42d8:	766c      	strb	r4, [r5, #25]
    42da:	76ac      	strb	r4, [r5, #26]
    42dc:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    42e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    42e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    42e6:	626b      	str	r3, [r5, #36]	; 0x24
    42e8:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    42ec:	f7fd fd68 	bl	1dc0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    42f0:	f7fd fb3a 	bl	1968 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    42f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    42f8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    42fa:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    42fc:	f7fd feb6 	bl	206c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4300:	f7fd fe1e 	bl	1f40 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4304:	f240 1301 	movw	r3, #257	; 0x101
    4308:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    430c:	ab06      	add	r3, sp, #24
    430e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4310:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    4314:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4316:	f001 fe81 	bl	601c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    431a:	4620      	mov	r0, r4
    431c:	f7ff ff4c 	bl	41b8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4320:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4322:	4d16      	ldr	r5, [pc, #88]	; (437c <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4324:	f7ff ff48 	bl	41b8 <z_sys_init_run_level>
	z_sched_init();
    4328:	f000 fc9a 	bl	4c60 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    432c:	4b14      	ldr	r3, [pc, #80]	; (4380 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    432e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4330:	9305      	str	r3, [sp, #20]
    4332:	2301      	movs	r3, #1
    4334:	4913      	ldr	r1, [pc, #76]	; (4384 <z_cstart+0xd0>)
    4336:	9400      	str	r4, [sp, #0]
    4338:	e9cd 4303 	strd	r4, r3, [sp, #12]
    433c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4340:	463b      	mov	r3, r7
    4342:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4346:	4628      	mov	r0, r5
    4348:	f000 f86e 	bl	4428 <z_setup_new_thread>
    434c:	7b6a      	ldrb	r2, [r5, #13]
    434e:	4606      	mov	r6, r0
    4350:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    4354:	4628      	mov	r0, r5
    4356:	736a      	strb	r2, [r5, #13]
    4358:	f001 ff18 	bl	618c <z_ready_thread>
	z_init_cpu(0);
    435c:	4620      	mov	r0, r4
    435e:	f7ff ff71 	bl	4244 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4362:	463a      	mov	r2, r7
    4364:	4631      	mov	r1, r6
    4366:	4628      	mov	r0, r5
    4368:	f7fd fbf8 	bl	1b5c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    436c:	20002720 	.word	0x20002720
    4370:	e000ed00 	.word	0xe000ed00
    4374:	20000b10 	.word	0x20000b10
    4378:	000041f9 	.word	0x000041f9
    437c:	20000370 	.word	0x20000370
    4380:	000069b6 	.word	0x000069b6
    4384:	20001980 	.word	0x20001980

00004388 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    4388:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    438a:	4b0e      	ldr	r3, [pc, #56]	; (43c4 <init_mem_slab_module+0x3c>)
    438c:	4c0e      	ldr	r4, [pc, #56]	; (43c8 <init_mem_slab_module+0x40>)
    438e:	42a3      	cmp	r3, r4
    4390:	d301      	bcc.n	4396 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4392:	2000      	movs	r0, #0
	return rc;
}
    4394:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4396:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    439a:	ea41 0200 	orr.w	r2, r1, r0
    439e:	f012 0203 	ands.w	r2, r2, #3
    43a2:	d10b      	bne.n	43bc <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    43a4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    43a6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    43a8:	42aa      	cmp	r2, r5
    43aa:	d101      	bne.n	43b0 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    43ac:	331c      	adds	r3, #28
    43ae:	e7ee      	b.n	438e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    43b0:	695e      	ldr	r6, [r3, #20]
    43b2:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    43b4:	3201      	adds	r2, #1
		slab->free_list = p;
    43b6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    43b8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    43ba:	e7f5      	b.n	43a8 <init_mem_slab_module+0x20>
	return rc;
    43bc:	f06f 0015 	mvn.w	r0, #21
    43c0:	e7e8      	b.n	4394 <init_mem_slab_module+0xc>
    43c2:	bf00      	nop
    43c4:	20000180 	.word	0x20000180
    43c8:	20000180 	.word	0x20000180

000043cc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    43cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    43ce:	460c      	mov	r4, r1
	__asm__ volatile(
    43d0:	f04f 0520 	mov.w	r5, #32
    43d4:	f3ef 8111 	mrs	r1, BASEPRI
    43d8:	f385 8812 	msr	BASEPRI_MAX, r5
    43dc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    43e0:	6945      	ldr	r5, [r0, #20]
    43e2:	b15d      	cbz	r5, 43fc <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    43e4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    43e6:	682b      	ldr	r3, [r5, #0]
    43e8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    43ea:	6983      	ldr	r3, [r0, #24]
    43ec:	3301      	adds	r3, #1
    43ee:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    43f0:	2000      	movs	r0, #0
	__asm__ volatile(
    43f2:	f381 8811 	msr	BASEPRI, r1
    43f6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    43fa:	e011      	b.n	4420 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    43fc:	ea52 0c03 	orrs.w	ip, r2, r3
    4400:	d103      	bne.n	440a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    4402:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    4404:	f06f 000b 	mvn.w	r0, #11
    4408:	e7f3      	b.n	43f2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    440a:	e9cd 2300 	strd	r2, r3, [sp]
    440e:	4602      	mov	r2, r0
    4410:	3008      	adds	r0, #8
    4412:	f000 fb7b 	bl	4b0c <z_pend_curr>
		if (result == 0) {
    4416:	b918      	cbnz	r0, 4420 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    4418:	4b02      	ldr	r3, [pc, #8]	; (4424 <k_mem_slab_alloc+0x58>)
    441a:	689b      	ldr	r3, [r3, #8]
    441c:	695b      	ldr	r3, [r3, #20]
    441e:	6023      	str	r3, [r4, #0]
}
    4420:	b003      	add	sp, #12
    4422:	bd30      	pop	{r4, r5, pc}
    4424:	20000b10 	.word	0x20000b10

00004428 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4428:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    442c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    442e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4430:	2604      	movs	r6, #4
    4432:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4434:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4436:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4438:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    443c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    443e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    4440:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4444:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    4446:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4448:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    444c:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    444e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    4452:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    4456:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    4458:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    445a:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    445c:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4460:	9202      	str	r2, [sp, #8]
    4462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4464:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    4466:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    446a:	9200      	str	r2, [sp, #0]
    446c:	4642      	mov	r2, r8
{
    446e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4470:	f7fd fb42 	bl	1af8 <arch_new_thread>
	if (!_current) {
    4474:	4b04      	ldr	r3, [pc, #16]	; (4488 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    4476:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    4478:	689b      	ldr	r3, [r3, #8]
    447a:	b103      	cbz	r3, 447e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    447e:	6723      	str	r3, [r4, #112]	; 0x70
}
    4480:	4640      	mov	r0, r8
    4482:	b004      	add	sp, #16
    4484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4488:	20000b10 	.word	0x20000b10

0000448c <z_impl_k_thread_create>:
{
    448c:	b5f0      	push	{r4, r5, r6, r7, lr}
    448e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4490:	2700      	movs	r7, #0
    4492:	9705      	str	r7, [sp, #20]
    4494:	9f10      	ldr	r7, [sp, #64]	; 0x40
    4496:	9704      	str	r7, [sp, #16]
    4498:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    449a:	9703      	str	r7, [sp, #12]
    449c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    449e:	9702      	str	r7, [sp, #8]
{
    44a0:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    44a4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    44a6:	9701      	str	r7, [sp, #4]
    44a8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    44aa:	9700      	str	r7, [sp, #0]
{
    44ac:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    44ae:	f7ff ffbb 	bl	4428 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    44b2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    44b6:	bf08      	it	eq
    44b8:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    44bc:	d005      	beq.n	44ca <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    44be:	ea55 0306 	orrs.w	r3, r5, r6
    44c2:	d105      	bne.n	44d0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    44c4:	4620      	mov	r0, r4
    44c6:	f000 fac5 	bl	4a54 <z_sched_start>
}
    44ca:	4620      	mov	r0, r4
    44cc:	b007      	add	sp, #28
    44ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    44d0:	4903      	ldr	r1, [pc, #12]	; (44e0 <z_impl_k_thread_create+0x54>)
    44d2:	4632      	mov	r2, r6
    44d4:	462b      	mov	r3, r5
    44d6:	f104 0018 	add.w	r0, r4, #24
    44da:	f000 fd2b 	bl	4f34 <z_add_timeout>
    44de:	e7f4      	b.n	44ca <z_impl_k_thread_create+0x3e>
    44e0:	000061ad 	.word	0x000061ad

000044e4 <z_init_static_threads>:
{
    44e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    44e8:	4c29      	ldr	r4, [pc, #164]	; (4590 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    44ea:	4d2a      	ldr	r5, [pc, #168]	; (4594 <z_init_static_threads+0xb0>)
{
    44ec:	b087      	sub	sp, #28
    44ee:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    44f0:	42ae      	cmp	r6, r5
    44f2:	f104 0430 	add.w	r4, r4, #48	; 0x30
    44f6:	d30f      	bcc.n	4518 <z_init_static_threads+0x34>
	k_sched_lock();
    44f8:	f000 f9c6 	bl	4888 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    44fc:	4c24      	ldr	r4, [pc, #144]	; (4590 <z_init_static_threads+0xac>)
    44fe:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4598 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    4502:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4506:	f240 37e7 	movw	r7, #999	; 0x3e7
    450a:	42ac      	cmp	r4, r5
    450c:	d320      	bcc.n	4550 <z_init_static_threads+0x6c>
}
    450e:	b007      	add	sp, #28
    4510:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    4514:	f000 bb88 	b.w	4c28 <k_sched_unlock>
		z_setup_new_thread(
    4518:	f854 3c04 	ldr.w	r3, [r4, #-4]
    451c:	9305      	str	r3, [sp, #20]
    451e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4522:	9304      	str	r3, [sp, #16]
    4524:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4528:	9303      	str	r3, [sp, #12]
    452a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    452e:	9302      	str	r3, [sp, #8]
    4530:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4534:	9301      	str	r3, [sp, #4]
    4536:	f854 3c20 	ldr.w	r3, [r4, #-32]
    453a:	9300      	str	r3, [sp, #0]
    453c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4540:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4544:	f7ff ff70 	bl	4428 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4548:	f854 3c30 	ldr.w	r3, [r4, #-48]
    454c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    454e:	e7ce      	b.n	44ee <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4550:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4552:	1c5a      	adds	r2, r3, #1
    4554:	d00d      	beq.n	4572 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    4556:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    455a:	2100      	movs	r1, #0
    455c:	4638      	mov	r0, r7
    455e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4562:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    4566:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    456a:	d104      	bne.n	4576 <z_init_static_threads+0x92>
	z_sched_start(thread);
    456c:	4640      	mov	r0, r8
    456e:	f000 fa71 	bl	4a54 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4572:	3430      	adds	r4, #48	; 0x30
    4574:	e7c9      	b.n	450a <z_init_static_threads+0x26>
    4576:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    457a:	2300      	movs	r3, #0
    457c:	f7fb fdc0 	bl	100 <__aeabi_uldivmod>
    4580:	4602      	mov	r2, r0
    4582:	460b      	mov	r3, r1
    4584:	f108 0018 	add.w	r0, r8, #24
    4588:	4649      	mov	r1, r9
    458a:	f000 fcd3 	bl	4f34 <z_add_timeout>
    458e:	e7f0      	b.n	4572 <z_init_static_threads+0x8e>
    4590:	20000180 	.word	0x20000180
    4594:	20000180 	.word	0x20000180
    4598:	000061ad 	.word	0x000061ad

0000459c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    459c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    459e:	4c0b      	ldr	r4, [pc, #44]	; (45cc <idle+0x30>)
	return !z_sys_post_kernel;
    45a0:	4d0b      	ldr	r5, [pc, #44]	; (45d0 <idle+0x34>)
	__asm__ volatile(
    45a2:	f04f 0220 	mov.w	r2, #32
    45a6:	f3ef 8311 	mrs	r3, BASEPRI
    45aa:	f382 8812 	msr	BASEPRI_MAX, r2
    45ae:	f3bf 8f6f 	isb	sy
    45b2:	f001 fe75 	bl	62a0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    45b6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    45b8:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    45ba:	b913      	cbnz	r3, 45c2 <idle+0x26>
	arch_cpu_idle();
    45bc:	f7fd f9da 	bl	1974 <arch_cpu_idle>
}
    45c0:	e7ef      	b.n	45a2 <idle+0x6>
    45c2:	f7fd f82d 	bl	1620 <pm_system_suspend>
    45c6:	2800      	cmp	r0, #0
    45c8:	d1eb      	bne.n	45a2 <idle+0x6>
    45ca:	e7f7      	b.n	45bc <idle+0x20>
    45cc:	20000b10 	.word	0x20000b10
    45d0:	20001133 	.word	0x20001133

000045d4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    45d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    45d8:	4604      	mov	r4, r0
    45da:	4617      	mov	r7, r2
    45dc:	461e      	mov	r6, r3
    45de:	f04f 0320 	mov.w	r3, #32
    45e2:	f3ef 8811 	mrs	r8, BASEPRI
    45e6:	f383 8812 	msr	BASEPRI_MAX, r3
    45ea:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    45ee:	68c3      	ldr	r3, [r0, #12]
    45f0:	4a32      	ldr	r2, [pc, #200]	; (46bc <z_impl_k_mutex_lock+0xe8>)
    45f2:	b16b      	cbz	r3, 4610 <z_impl_k_mutex_lock+0x3c>
    45f4:	6880      	ldr	r0, [r0, #8]
    45f6:	6891      	ldr	r1, [r2, #8]
    45f8:	4288      	cmp	r0, r1
    45fa:	d019      	beq.n	4630 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    45fc:	ea57 0306 	orrs.w	r3, r7, r6
    4600:	d118      	bne.n	4634 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    4602:	f388 8811 	msr	BASEPRI, r8
    4606:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    460a:	f06f 000f 	mvn.w	r0, #15
    460e:	e00c      	b.n	462a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    4610:	6891      	ldr	r1, [r2, #8]
    4612:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4616:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4618:	3301      	adds	r3, #1
    461a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    461c:	6893      	ldr	r3, [r2, #8]
    461e:	60a3      	str	r3, [r4, #8]
    4620:	f388 8811 	msr	BASEPRI, r8
    4624:	f3bf 8f6f 	isb	sy
		return 0;
    4628:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    462a:	b002      	add	sp, #8
    462c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4630:	6921      	ldr	r1, [r4, #16]
    4632:	e7f0      	b.n	4616 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4634:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4638:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    463c:	4299      	cmp	r1, r3
    463e:	bfa8      	it	ge
    4640:	4619      	movge	r1, r3
    4642:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4646:	4291      	cmp	r1, r2
    4648:	bfb8      	it	lt
    464a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    464c:	428b      	cmp	r3, r1
    464e:	dd2e      	ble.n	46ae <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    4650:	f001 fd5f 	bl	6112 <adjust_owner_prio.isra.0>
    4654:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4656:	e9cd 7600 	strd	r7, r6, [sp]
    465a:	4819      	ldr	r0, [pc, #100]	; (46c0 <z_impl_k_mutex_lock+0xec>)
    465c:	4622      	mov	r2, r4
    465e:	4641      	mov	r1, r8
    4660:	f000 fa54 	bl	4b0c <z_pend_curr>
	if (got_mutex == 0) {
    4664:	2800      	cmp	r0, #0
    4666:	d0e0      	beq.n	462a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    4668:	f04f 0320 	mov.w	r3, #32
    466c:	f3ef 8611 	mrs	r6, BASEPRI
    4670:	f383 8812 	msr	BASEPRI_MAX, r3
    4674:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4678:	6823      	ldr	r3, [r4, #0]
    467a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    467c:	429c      	cmp	r4, r3
    467e:	d00a      	beq.n	4696 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4680:	b14b      	cbz	r3, 4696 <z_impl_k_mutex_lock+0xc2>
    4682:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4686:	4299      	cmp	r1, r3
    4688:	bfa8      	it	ge
    468a:	4619      	movge	r1, r3
    468c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    4690:	4299      	cmp	r1, r3
    4692:	bfb8      	it	lt
    4694:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4696:	68a0      	ldr	r0, [r4, #8]
    4698:	f001 fd3b 	bl	6112 <adjust_owner_prio.isra.0>
    469c:	b900      	cbnz	r0, 46a0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    469e:	b145      	cbz	r5, 46b2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    46a0:	4807      	ldr	r0, [pc, #28]	; (46c0 <z_impl_k_mutex_lock+0xec>)
    46a2:	4631      	mov	r1, r6
    46a4:	f000 f8de 	bl	4864 <z_reschedule>
	return -EAGAIN;
    46a8:	f06f 000a 	mvn.w	r0, #10
    46ac:	e7bd      	b.n	462a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    46ae:	2500      	movs	r5, #0
    46b0:	e7d1      	b.n	4656 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    46b2:	f386 8811 	msr	BASEPRI, r6
    46b6:	f3bf 8f6f 	isb	sy
    46ba:	e7f5      	b.n	46a8 <z_impl_k_mutex_lock+0xd4>
    46bc:	20000b10 	.word	0x20000b10
    46c0:	20001134 	.word	0x20001134

000046c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    46c4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    46c6:	6883      	ldr	r3, [r0, #8]
{
    46c8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    46ca:	2b00      	cmp	r3, #0
    46cc:	d032      	beq.n	4734 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    46ce:	4a1c      	ldr	r2, [pc, #112]	; (4740 <z_impl_k_mutex_unlock+0x7c>)
    46d0:	6892      	ldr	r2, [r2, #8]
    46d2:	4293      	cmp	r3, r2
    46d4:	d131      	bne.n	473a <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    46d6:	7bda      	ldrb	r2, [r3, #15]
    46d8:	3a01      	subs	r2, #1
    46da:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    46dc:	68c3      	ldr	r3, [r0, #12]
    46de:	2b01      	cmp	r3, #1
    46e0:	d905      	bls.n	46ee <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    46e2:	3b01      	subs	r3, #1
    46e4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    46e6:	f000 fa9f 	bl	4c28 <k_sched_unlock>

	return 0;
    46ea:	2000      	movs	r0, #0
}
    46ec:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    46ee:	f04f 0320 	mov.w	r3, #32
    46f2:	f3ef 8511 	mrs	r5, BASEPRI
    46f6:	f383 8812 	msr	BASEPRI_MAX, r3
    46fa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    46fe:	6901      	ldr	r1, [r0, #16]
    4700:	6880      	ldr	r0, [r0, #8]
    4702:	f001 fd06 	bl	6112 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4706:	4620      	mov	r0, r4
    4708:	f001 fd9c 	bl	6244 <z_unpend_first_thread>
	mutex->owner = new_owner;
    470c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    470e:	b158      	cbz	r0, 4728 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    4710:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4714:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4716:	2200      	movs	r2, #0
    4718:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    471a:	f001 fd37 	bl	618c <z_ready_thread>
		z_reschedule(&lock, key);
    471e:	4809      	ldr	r0, [pc, #36]	; (4744 <z_impl_k_mutex_unlock+0x80>)
    4720:	4629      	mov	r1, r5
    4722:	f000 f89f 	bl	4864 <z_reschedule>
    4726:	e7de      	b.n	46e6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    4728:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    472a:	f385 8811 	msr	BASEPRI, r5
    472e:	f3bf 8f6f 	isb	sy
    4732:	e7d8      	b.n	46e6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    4734:	f06f 0015 	mvn.w	r0, #21
    4738:	e7d8      	b.n	46ec <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    473a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    473e:	e7d5      	b.n	46ec <z_impl_k_mutex_unlock+0x28>
    4740:	20000b10 	.word	0x20000b10
    4744:	20001134 	.word	0x20001134

00004748 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4748:	b538      	push	{r3, r4, r5, lr}
    474a:	4604      	mov	r4, r0
	__asm__ volatile(
    474c:	f04f 0320 	mov.w	r3, #32
    4750:	f3ef 8511 	mrs	r5, BASEPRI
    4754:	f383 8812 	msr	BASEPRI_MAX, r3
    4758:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    475c:	f001 fd72 	bl	6244 <z_unpend_first_thread>

	if (thread != NULL) {
    4760:	b148      	cbz	r0, 4776 <z_impl_k_sem_give+0x2e>
    4762:	2200      	movs	r2, #0
    4764:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4766:	f001 fd11 	bl	618c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    476a:	4629      	mov	r1, r5
    476c:	4805      	ldr	r0, [pc, #20]	; (4784 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    476e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4772:	f000 b877 	b.w	4864 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4776:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    477a:	429a      	cmp	r2, r3
    477c:	bf18      	it	ne
    477e:	3301      	addne	r3, #1
    4780:	60a3      	str	r3, [r4, #8]
}
    4782:	e7f2      	b.n	476a <z_impl_k_sem_give+0x22>
    4784:	20001134 	.word	0x20001134

00004788 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4788:	b513      	push	{r0, r1, r4, lr}
    478a:	f04f 0420 	mov.w	r4, #32
    478e:	f3ef 8111 	mrs	r1, BASEPRI
    4792:	f384 8812 	msr	BASEPRI_MAX, r4
    4796:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    479a:	6884      	ldr	r4, [r0, #8]
    479c:	b144      	cbz	r4, 47b0 <z_impl_k_sem_take+0x28>
		sem->count--;
    479e:	3c01      	subs	r4, #1
    47a0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    47a2:	f381 8811 	msr	BASEPRI, r1
    47a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    47aa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    47ac:	b002      	add	sp, #8
    47ae:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    47b0:	ea52 0403 	orrs.w	r4, r2, r3
    47b4:	d106      	bne.n	47c4 <z_impl_k_sem_take+0x3c>
    47b6:	f381 8811 	msr	BASEPRI, r1
    47ba:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    47be:	f06f 000f 	mvn.w	r0, #15
    47c2:	e7f3      	b.n	47ac <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    47c4:	e9cd 2300 	strd	r2, r3, [sp]
    47c8:	4602      	mov	r2, r0
    47ca:	4802      	ldr	r0, [pc, #8]	; (47d4 <z_impl_k_sem_take+0x4c>)
    47cc:	f000 f99e 	bl	4b0c <z_pend_curr>
	return ret;
    47d0:	e7ec      	b.n	47ac <z_impl_k_sem_take+0x24>
    47d2:	bf00      	nop
    47d4:	20001134 	.word	0x20001134

000047d8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    47d8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    47da:	4d07      	ldr	r5, [pc, #28]	; (47f8 <z_reset_time_slice+0x20>)
    47dc:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    47de:	b154      	cbz	r4, 47f6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    47e0:	f7fe fc74 	bl	30cc <sys_clock_elapsed>
    47e4:	4b05      	ldr	r3, [pc, #20]	; (47fc <z_reset_time_slice+0x24>)
    47e6:	4404      	add	r4, r0
    47e8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    47ea:	6828      	ldr	r0, [r5, #0]
    47ec:	2100      	movs	r1, #0
	}
}
    47ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    47f2:	f001 bd65 	b.w	62c0 <z_set_timeout_expiry>
}
    47f6:	bd38      	pop	{r3, r4, r5, pc}
    47f8:	20000b40 	.word	0x20000b40
    47fc:	20000b10 	.word	0x20000b10

00004800 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4802:	4604      	mov	r4, r0
    4804:	460d      	mov	r5, r1
	__asm__ volatile(
    4806:	f04f 0320 	mov.w	r3, #32
    480a:	f3ef 8711 	mrs	r7, BASEPRI
    480e:	f383 8812 	msr	BASEPRI_MAX, r3
    4812:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    4816:	4e10      	ldr	r6, [pc, #64]	; (4858 <k_sched_time_slice_set+0x58>)
    4818:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    481a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    481e:	f240 30e7 	movw	r0, #999	; 0x3e7
    4822:	6131      	str	r1, [r6, #16]
    4824:	2300      	movs	r3, #0
    4826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    482a:	fbe4 010c 	umlal	r0, r1, r4, ip
    482e:	f7fb fc67 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4832:	2c00      	cmp	r4, #0
    4834:	4b09      	ldr	r3, [pc, #36]	; (485c <k_sched_time_slice_set+0x5c>)
    4836:	dc0a      	bgt.n	484e <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    4838:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    483a:	4b09      	ldr	r3, [pc, #36]	; (4860 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    483c:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    483e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    4840:	f7ff ffca 	bl	47d8 <z_reset_time_slice>
	__asm__ volatile(
    4844:	f387 8811 	msr	BASEPRI, r7
    4848:	f3bf 8f6f 	isb	sy
	}
}
    484c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    484e:	2802      	cmp	r0, #2
    4850:	bfb8      	it	lt
    4852:	2002      	movlt	r0, #2
    4854:	e7f0      	b.n	4838 <k_sched_time_slice_set+0x38>
    4856:	bf00      	nop
    4858:	20000b10 	.word	0x20000b10
    485c:	20000b40 	.word	0x20000b40
    4860:	20000b3c 	.word	0x20000b3c

00004864 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4864:	b949      	cbnz	r1, 487a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4866:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    486a:	b930      	cbnz	r0, 487a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    486c:	4b05      	ldr	r3, [pc, #20]	; (4884 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    486e:	69da      	ldr	r2, [r3, #28]
    4870:	689b      	ldr	r3, [r3, #8]
    4872:	429a      	cmp	r2, r3
    4874:	d001      	beq.n	487a <z_reschedule+0x16>
	ret = arch_swap(key);
    4876:	f7fd b8eb 	b.w	1a50 <arch_swap>
    487a:	f381 8811 	msr	BASEPRI, r1
    487e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4882:	4770      	bx	lr
    4884:	20000b10 	.word	0x20000b10

00004888 <k_sched_lock>:
	__asm__ volatile(
    4888:	f04f 0320 	mov.w	r3, #32
    488c:	f3ef 8111 	mrs	r1, BASEPRI
    4890:	f383 8812 	msr	BASEPRI_MAX, r3
    4894:	f3bf 8f6f 	isb	sy
    4898:	4b04      	ldr	r3, [pc, #16]	; (48ac <k_sched_lock+0x24>)
    489a:	689a      	ldr	r2, [r3, #8]
    489c:	7bd3      	ldrb	r3, [r2, #15]
    489e:	3b01      	subs	r3, #1
    48a0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    48a2:	f381 8811 	msr	BASEPRI, r1
    48a6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    48aa:	4770      	bx	lr
    48ac:	20000b10 	.word	0x20000b10

000048b0 <update_cache>:
{
    48b0:	b538      	push	{r3, r4, r5, lr}
    48b2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    48b4:	480c      	ldr	r0, [pc, #48]	; (48e8 <update_cache+0x38>)
    48b6:	4d0d      	ldr	r5, [pc, #52]	; (48ec <update_cache+0x3c>)
    48b8:	f001 fc62 	bl	6180 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    48bc:	4604      	mov	r4, r0
    48be:	b900      	cbnz	r0, 48c2 <update_cache+0x12>
    48c0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    48c2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    48c4:	b94a      	cbnz	r2, 48da <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    48c6:	7b5a      	ldrb	r2, [r3, #13]
    48c8:	06d2      	lsls	r2, r2, #27
    48ca:	d106      	bne.n	48da <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    48cc:	69a2      	ldr	r2, [r4, #24]
    48ce:	b922      	cbnz	r2, 48da <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    48d0:	89da      	ldrh	r2, [r3, #14]
    48d2:	2a7f      	cmp	r2, #127	; 0x7f
    48d4:	d901      	bls.n	48da <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    48d6:	61eb      	str	r3, [r5, #28]
}
    48d8:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    48da:	429c      	cmp	r4, r3
    48dc:	d002      	beq.n	48e4 <update_cache+0x34>
			z_reset_time_slice(thread);
    48de:	4620      	mov	r0, r4
    48e0:	f7ff ff7a 	bl	47d8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    48e4:	61ec      	str	r4, [r5, #28]
}
    48e6:	e7f7      	b.n	48d8 <update_cache+0x28>
    48e8:	20000b30 	.word	0x20000b30
    48ec:	20000b10 	.word	0x20000b10

000048f0 <move_thread_to_end_of_prio_q>:
{
    48f0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    48f2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    48f6:	7b43      	ldrb	r3, [r0, #13]
    48f8:	2a00      	cmp	r2, #0
{
    48fa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    48fc:	da04      	bge.n	4908 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    48fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4902:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    4904:	f001 fc14 	bl	6130 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4908:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    490a:	4a15      	ldr	r2, [pc, #84]	; (4960 <move_thread_to_end_of_prio_q+0x70>)
    490c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4910:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    4912:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4916:	f102 0520 	add.w	r5, r2, #32
    491a:	42ab      	cmp	r3, r5
    491c:	d01b      	beq.n	4956 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    491e:	b1d3      	cbz	r3, 4956 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    4920:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    4924:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4928:	4286      	cmp	r6, r0
    492a:	d00f      	beq.n	494c <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    492c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    492e:	2800      	cmp	r0, #0
    4930:	dd0c      	ble.n	494c <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4932:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    4934:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    4938:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    493a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    493c:	6890      	ldr	r0, [r2, #8]
    493e:	1a43      	subs	r3, r0, r1
    4940:	4258      	negs	r0, r3
}
    4942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4946:	4158      	adcs	r0, r3
    4948:	f7ff bfb2 	b.w	48b0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    494c:	42a3      	cmp	r3, r4
    494e:	d002      	beq.n	4956 <move_thread_to_end_of_prio_q+0x66>
    4950:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4952:	2b00      	cmp	r3, #0
    4954:	d1e6      	bne.n	4924 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    4956:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    495a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    495c:	6251      	str	r1, [r2, #36]	; 0x24
}
    495e:	e7ed      	b.n	493c <move_thread_to_end_of_prio_q+0x4c>
    4960:	20000b10 	.word	0x20000b10

00004964 <z_time_slice>:
{
    4964:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4966:	f04f 0320 	mov.w	r3, #32
    496a:	f3ef 8511 	mrs	r5, BASEPRI
    496e:	f383 8812 	msr	BASEPRI_MAX, r3
    4972:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4976:	4b17      	ldr	r3, [pc, #92]	; (49d4 <z_time_slice+0x70>)
    4978:	4a17      	ldr	r2, [pc, #92]	; (49d8 <z_time_slice+0x74>)
    497a:	689c      	ldr	r4, [r3, #8]
    497c:	6811      	ldr	r1, [r2, #0]
    497e:	428c      	cmp	r4, r1
    4980:	d107      	bne.n	4992 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    4982:	4620      	mov	r0, r4
    4984:	f7ff ff28 	bl	47d8 <z_reset_time_slice>
	__asm__ volatile(
    4988:	f385 8811 	msr	BASEPRI, r5
    498c:	f3bf 8f6f 	isb	sy
}
    4990:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    4992:	2100      	movs	r1, #0
    4994:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    4996:	4a11      	ldr	r2, [pc, #68]	; (49dc <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    4998:	6812      	ldr	r2, [r2, #0]
    499a:	b1c2      	cbz	r2, 49ce <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    499c:	89e2      	ldrh	r2, [r4, #14]
    499e:	2a7f      	cmp	r2, #127	; 0x7f
    49a0:	d815      	bhi.n	49ce <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    49a2:	7b62      	ldrb	r2, [r4, #13]
    49a4:	06d2      	lsls	r2, r2, #27
    49a6:	d112      	bne.n	49ce <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    49a8:	4a0d      	ldr	r2, [pc, #52]	; (49e0 <z_time_slice+0x7c>)
    49aa:	f994 100e 	ldrsb.w	r1, [r4, #14]
    49ae:	6812      	ldr	r2, [r2, #0]
    49b0:	4291      	cmp	r1, r2
    49b2:	db0c      	blt.n	49ce <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    49b4:	4a0b      	ldr	r2, [pc, #44]	; (49e4 <z_time_slice+0x80>)
    49b6:	4294      	cmp	r4, r2
    49b8:	d009      	beq.n	49ce <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    49ba:	691a      	ldr	r2, [r3, #16]
    49bc:	4282      	cmp	r2, r0
    49be:	dc03      	bgt.n	49c8 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    49c0:	4620      	mov	r0, r4
    49c2:	f7ff ff95 	bl	48f0 <move_thread_to_end_of_prio_q>
    49c6:	e7dc      	b.n	4982 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    49c8:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    49ca:	611a      	str	r2, [r3, #16]
    49cc:	e7dc      	b.n	4988 <z_time_slice+0x24>
    49ce:	2200      	movs	r2, #0
    49d0:	e7fb      	b.n	49ca <z_time_slice+0x66>
    49d2:	bf00      	nop
    49d4:	20000b10 	.word	0x20000b10
    49d8:	20000b38 	.word	0x20000b38
    49dc:	20000b40 	.word	0x20000b40
    49e0:	20000b3c 	.word	0x20000b3c
    49e4:	200002f0 	.word	0x200002f0

000049e8 <ready_thread>:
{
    49e8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    49ea:	f990 200d 	ldrsb.w	r2, [r0, #13]
    49ee:	7b43      	ldrb	r3, [r0, #13]
    49f0:	2a00      	cmp	r2, #0
    49f2:	db2a      	blt.n	4a4a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    49f4:	06da      	lsls	r2, r3, #27
    49f6:	d128      	bne.n	4a4a <ready_thread+0x62>
    49f8:	6982      	ldr	r2, [r0, #24]
    49fa:	bb32      	cbnz	r2, 4a4a <ready_thread+0x62>
	return list->head == list;
    49fc:	4a14      	ldr	r2, [pc, #80]	; (4a50 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    49fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4a02:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    4a04:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4a08:	f102 0520 	add.w	r5, r2, #32
    4a0c:	42ab      	cmp	r3, r5
    4a0e:	d017      	beq.n	4a40 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4a10:	b1b3      	cbz	r3, 4a40 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    4a12:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    4a16:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    4a1a:	428e      	cmp	r6, r1
    4a1c:	d00b      	beq.n	4a36 <ready_thread+0x4e>
		return b2 - b1;
    4a1e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4a20:	2900      	cmp	r1, #0
    4a22:	dd08      	ble.n	4a36 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    4a24:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4a26:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    4a2a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    4a2c:	6058      	str	r0, [r3, #4]
}
    4a2e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    4a30:	2000      	movs	r0, #0
    4a32:	f7ff bf3d 	b.w	48b0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4a36:	42a3      	cmp	r3, r4
    4a38:	d002      	beq.n	4a40 <ready_thread+0x58>
    4a3a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	d1ea      	bne.n	4a16 <ready_thread+0x2e>
	node->prev = tail;
    4a40:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    4a44:	6020      	str	r0, [r4, #0]
	list->tail = node;
    4a46:	6250      	str	r0, [r2, #36]	; 0x24
}
    4a48:	e7f1      	b.n	4a2e <ready_thread+0x46>
}
    4a4a:	bc70      	pop	{r4, r5, r6}
    4a4c:	4770      	bx	lr
    4a4e:	bf00      	nop
    4a50:	20000b10 	.word	0x20000b10

00004a54 <z_sched_start>:
{
    4a54:	b510      	push	{r4, lr}
	__asm__ volatile(
    4a56:	f04f 0220 	mov.w	r2, #32
    4a5a:	f3ef 8411 	mrs	r4, BASEPRI
    4a5e:	f382 8812 	msr	BASEPRI_MAX, r2
    4a62:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4a66:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    4a68:	0751      	lsls	r1, r2, #29
    4a6a:	d404      	bmi.n	4a76 <z_sched_start+0x22>
	__asm__ volatile(
    4a6c:	f384 8811 	msr	BASEPRI, r4
    4a70:	f3bf 8f6f 	isb	sy
}
    4a74:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4a76:	f022 0204 	bic.w	r2, r2, #4
    4a7a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4a7c:	f7ff ffb4 	bl	49e8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4a80:	4621      	mov	r1, r4
    4a82:	4802      	ldr	r0, [pc, #8]	; (4a8c <z_sched_start+0x38>)
}
    4a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4a88:	f7ff beec 	b.w	4864 <z_reschedule>
    4a8c:	20001134 	.word	0x20001134

00004a90 <unready_thread>:
{
    4a90:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4a92:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    4a96:	7b43      	ldrb	r3, [r0, #13]
    4a98:	2a00      	cmp	r2, #0
{
    4a9a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4a9c:	da04      	bge.n	4aa8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4aa2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4aa4:	f001 fb44 	bl	6130 <sys_dlist_remove>
	update_cache(thread == _current);
    4aa8:	4b04      	ldr	r3, [pc, #16]	; (4abc <unready_thread+0x2c>)
    4aaa:	6898      	ldr	r0, [r3, #8]
    4aac:	1a43      	subs	r3, r0, r1
    4aae:	4258      	negs	r0, r3
    4ab0:	4158      	adcs	r0, r3
}
    4ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    4ab6:	f7ff befb 	b.w	48b0 <update_cache>
    4aba:	bf00      	nop
    4abc:	20000b10 	.word	0x20000b10

00004ac0 <pend>:
{
    4ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ac4:	4606      	mov	r6, r0
    4ac6:	4615      	mov	r5, r2
    4ac8:	461c      	mov	r4, r3
	__asm__ volatile(
    4aca:	f04f 0320 	mov.w	r3, #32
    4ace:	f3ef 8711 	mrs	r7, BASEPRI
    4ad2:	f383 8812 	msr	BASEPRI_MAX, r3
    4ad6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    4ada:	f001 fb89 	bl	61f0 <add_to_waitq_locked>
	__asm__ volatile(
    4ade:	f387 8811 	msr	BASEPRI, r7
    4ae2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4ae6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    4aea:	bf08      	it	eq
    4aec:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    4af0:	d008      	beq.n	4b04 <pend+0x44>
    4af2:	462a      	mov	r2, r5
    4af4:	4623      	mov	r3, r4
    4af6:	f106 0018 	add.w	r0, r6, #24
    4afa:	4903      	ldr	r1, [pc, #12]	; (4b08 <pend+0x48>)
}
    4afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4b00:	f000 ba18 	b.w	4f34 <z_add_timeout>
    4b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b08:	000061ad 	.word	0x000061ad

00004b0c <z_pend_curr>:
{
    4b0c:	b510      	push	{r4, lr}
	pending_current = _current;
    4b0e:	4b07      	ldr	r3, [pc, #28]	; (4b2c <z_pend_curr+0x20>)
    4b10:	6898      	ldr	r0, [r3, #8]
    4b12:	4b07      	ldr	r3, [pc, #28]	; (4b30 <z_pend_curr+0x24>)
{
    4b14:	460c      	mov	r4, r1
	pending_current = _current;
    4b16:	6018      	str	r0, [r3, #0]
{
    4b18:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    4b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4b1e:	f7ff ffcf 	bl	4ac0 <pend>
    4b22:	4620      	mov	r0, r4
}
    4b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b28:	f7fc bf92 	b.w	1a50 <arch_swap>
    4b2c:	20000b10 	.word	0x20000b10
    4b30:	20000b38 	.word	0x20000b38

00004b34 <z_set_prio>:
{
    4b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b36:	4604      	mov	r4, r0
	__asm__ volatile(
    4b38:	f04f 0320 	mov.w	r3, #32
    4b3c:	f3ef 8611 	mrs	r6, BASEPRI
    4b40:	f383 8812 	msr	BASEPRI_MAX, r3
    4b44:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    4b48:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4b4a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    4b4c:	b249      	sxtb	r1, r1
    4b4e:	d133      	bne.n	4bb8 <z_set_prio+0x84>
		if (need_sched) {
    4b50:	6982      	ldr	r2, [r0, #24]
    4b52:	bb8a      	cbnz	r2, 4bb8 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b58:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4b5a:	f001 fae9 	bl	6130 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4b5e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    4b60:	4a17      	ldr	r2, [pc, #92]	; (4bc0 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    4b62:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4b64:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4b68:	7343      	strb	r3, [r0, #13]
    4b6a:	4610      	mov	r0, r2
    4b6c:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b70:	4283      	cmp	r3, r0
    4b72:	d01b      	beq.n	4bac <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4b74:	b1d3      	cbz	r3, 4bac <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    4b76:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    4b78:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    4b7c:	42a9      	cmp	r1, r5
    4b7e:	d010      	beq.n	4ba2 <z_set_prio+0x6e>
		return b2 - b1;
    4b80:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4b82:	2d00      	cmp	r5, #0
    4b84:	dd0d      	ble.n	4ba2 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    4b86:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4b88:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4b8c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4b8e:	605c      	str	r4, [r3, #4]
			update_cache(1);
    4b90:	2001      	movs	r0, #1
    4b92:	f7ff fe8d 	bl	48b0 <update_cache>
    4b96:	2001      	movs	r0, #1
	__asm__ volatile(
    4b98:	f386 8811 	msr	BASEPRI, r6
    4b9c:	f3bf 8f6f 	isb	sy
}
    4ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    4ba2:	42bb      	cmp	r3, r7
    4ba4:	d002      	beq.n	4bac <z_set_prio+0x78>
    4ba6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ba8:	2b00      	cmp	r3, #0
    4baa:	d1e5      	bne.n	4b78 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    4bac:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    4bae:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    4bb2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4bb4:	6254      	str	r4, [r2, #36]	; 0x24
}
    4bb6:	e7eb      	b.n	4b90 <z_set_prio+0x5c>
			thread->base.prio = prio;
    4bb8:	73a1      	strb	r1, [r4, #14]
    4bba:	2000      	movs	r0, #0
    4bbc:	e7ec      	b.n	4b98 <z_set_prio+0x64>
    4bbe:	bf00      	nop
    4bc0:	20000b10 	.word	0x20000b10

00004bc4 <z_impl_k_thread_suspend>:
{
    4bc4:	b570      	push	{r4, r5, r6, lr}
    4bc6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4bc8:	3018      	adds	r0, #24
    4bca:	f001 fb53 	bl	6274 <z_abort_timeout>
	__asm__ volatile(
    4bce:	f04f 0320 	mov.w	r3, #32
    4bd2:	f3ef 8611 	mrs	r6, BASEPRI
    4bd6:	f383 8812 	msr	BASEPRI_MAX, r3
    4bda:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4bde:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    4be2:	7b63      	ldrb	r3, [r4, #13]
    4be4:	2a00      	cmp	r2, #0
    4be6:	da05      	bge.n	4bf4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4bec:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4bee:	4620      	mov	r0, r4
    4bf0:	f001 fa9e 	bl	6130 <sys_dlist_remove>
		update_cache(thread == _current);
    4bf4:	4d0b      	ldr	r5, [pc, #44]	; (4c24 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4bf6:	7b63      	ldrb	r3, [r4, #13]
    4bf8:	68a8      	ldr	r0, [r5, #8]
    4bfa:	f043 0310 	orr.w	r3, r3, #16
    4bfe:	7363      	strb	r3, [r4, #13]
    4c00:	1b03      	subs	r3, r0, r4
    4c02:	4258      	negs	r0, r3
    4c04:	4158      	adcs	r0, r3
    4c06:	f7ff fe53 	bl	48b0 <update_cache>
	__asm__ volatile(
    4c0a:	f386 8811 	msr	BASEPRI, r6
    4c0e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4c12:	68ab      	ldr	r3, [r5, #8]
    4c14:	42a3      	cmp	r3, r4
    4c16:	d103      	bne.n	4c20 <z_impl_k_thread_suspend+0x5c>
}
    4c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4c1c:	f001 baa6 	b.w	616c <z_reschedule_unlocked>
}
    4c20:	bd70      	pop	{r4, r5, r6, pc}
    4c22:	bf00      	nop
    4c24:	20000b10 	.word	0x20000b10

00004c28 <k_sched_unlock>:
{
    4c28:	b510      	push	{r4, lr}
	__asm__ volatile(
    4c2a:	f04f 0320 	mov.w	r3, #32
    4c2e:	f3ef 8411 	mrs	r4, BASEPRI
    4c32:	f383 8812 	msr	BASEPRI_MAX, r3
    4c36:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    4c3a:	4b08      	ldr	r3, [pc, #32]	; (4c5c <k_sched_unlock+0x34>)
    4c3c:	689a      	ldr	r2, [r3, #8]
    4c3e:	7bd3      	ldrb	r3, [r2, #15]
    4c40:	3301      	adds	r3, #1
    4c42:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4c44:	2000      	movs	r0, #0
    4c46:	f7ff fe33 	bl	48b0 <update_cache>
	__asm__ volatile(
    4c4a:	f384 8811 	msr	BASEPRI, r4
    4c4e:	f3bf 8f6f 	isb	sy
}
    4c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4c56:	f001 ba89 	b.w	616c <z_reschedule_unlocked>
    4c5a:	bf00      	nop
    4c5c:	20000b10 	.word	0x20000b10

00004c60 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4c60:	4b04      	ldr	r3, [pc, #16]	; (4c74 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4c62:	2100      	movs	r1, #0
    4c64:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    4c68:	e9c3 2208 	strd	r2, r2, [r3, #32]
    4c6c:	4608      	mov	r0, r1
    4c6e:	f7ff bdc7 	b.w	4800 <k_sched_time_slice_set>
    4c72:	bf00      	nop
    4c74:	20000b10 	.word	0x20000b10

00004c78 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4c7a:	f04f 0320 	mov.w	r3, #32
    4c7e:	f3ef 8511 	mrs	r5, BASEPRI
    4c82:	f383 8812 	msr	BASEPRI_MAX, r3
    4c86:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    4c8a:	491a      	ldr	r1, [pc, #104]	; (4cf4 <z_impl_k_yield+0x7c>)
    4c8c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4c8e:	7b43      	ldrb	r3, [r0, #13]
    4c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4c94:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4c96:	f001 fa4b 	bl	6130 <sys_dlist_remove>
	}
	queue_thread(_current);
    4c9a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4c9c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    4c9e:	4608      	mov	r0, r1
    4ca0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4ca4:	735a      	strb	r2, [r3, #13]
    4ca6:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4caa:	4282      	cmp	r2, r0
    4cac:	d01c      	beq.n	4ce8 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4cae:	b1da      	cbz	r2, 4ce8 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    4cb0:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    4cb2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    4cb6:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    4cba:	42a6      	cmp	r6, r4
    4cbc:	d00f      	beq.n	4cde <z_impl_k_yield+0x66>
		return b2 - b1;
    4cbe:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4cc0:	2c00      	cmp	r4, #0
    4cc2:	dd0c      	ble.n	4cde <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    4cc4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4cc6:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    4cca:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    4ccc:	6053      	str	r3, [r2, #4]
	update_cache(1);
    4cce:	2001      	movs	r0, #1
    4cd0:	f7ff fdee 	bl	48b0 <update_cache>
    4cd4:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    4cd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4cda:	f7fc beb9 	b.w	1a50 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4cde:	42ba      	cmp	r2, r7
    4ce0:	d002      	beq.n	4ce8 <z_impl_k_yield+0x70>
    4ce2:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ce4:	2a00      	cmp	r2, #0
    4ce6:	d1e6      	bne.n	4cb6 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    4ce8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    4cea:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    4cee:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4cf0:	624b      	str	r3, [r1, #36]	; 0x24
}
    4cf2:	e7ec      	b.n	4cce <z_impl_k_yield+0x56>
    4cf4:	20000b10 	.word	0x20000b10

00004cf8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4cf8:	ea50 0301 	orrs.w	r3, r0, r1
{
    4cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d00:	4605      	mov	r5, r0
    4d02:	460e      	mov	r6, r1
	if (ticks == 0) {
    4d04:	d103      	bne.n	4d0e <z_tick_sleep+0x16>
	z_impl_k_yield();
    4d06:	f7ff ffb7 	bl	4c78 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    4d0a:	2000      	movs	r0, #0
    4d0c:	e033      	b.n	4d76 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    4d0e:	f06f 0401 	mvn.w	r4, #1
    4d12:	1a24      	subs	r4, r4, r0
    4d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4d18:	eb63 0301 	sbc.w	r3, r3, r1
    4d1c:	2c01      	cmp	r4, #1
    4d1e:	f173 0300 	sbcs.w	r3, r3, #0
    4d22:	da02      	bge.n	4d2a <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4d24:	f001 fae6 	bl	62f4 <sys_clock_tick_get_32>
    4d28:	1944      	adds	r4, r0, r5
    4d2a:	f04f 0320 	mov.w	r3, #32
    4d2e:	f3ef 8811 	mrs	r8, BASEPRI
    4d32:	f383 8812 	msr	BASEPRI_MAX, r3
    4d36:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4d3a:	4f10      	ldr	r7, [pc, #64]	; (4d7c <z_tick_sleep+0x84>)
    4d3c:	4b10      	ldr	r3, [pc, #64]	; (4d80 <z_tick_sleep+0x88>)
    4d3e:	68b8      	ldr	r0, [r7, #8]
    4d40:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4d42:	f7ff fea5 	bl	4a90 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4d46:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4d48:	490e      	ldr	r1, [pc, #56]	; (4d84 <z_tick_sleep+0x8c>)
    4d4a:	462a      	mov	r2, r5
    4d4c:	4633      	mov	r3, r6
    4d4e:	3018      	adds	r0, #24
    4d50:	f000 f8f0 	bl	4f34 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4d54:	68ba      	ldr	r2, [r7, #8]
    4d56:	7b53      	ldrb	r3, [r2, #13]
    4d58:	f043 0310 	orr.w	r3, r3, #16
    4d5c:	7353      	strb	r3, [r2, #13]
    4d5e:	4640      	mov	r0, r8
    4d60:	f7fc fe76 	bl	1a50 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4d64:	f001 fac6 	bl	62f4 <sys_clock_tick_get_32>
    4d68:	1a20      	subs	r0, r4, r0
    4d6a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4d6e:	2801      	cmp	r0, #1
    4d70:	f173 0300 	sbcs.w	r3, r3, #0
    4d74:	dbc9      	blt.n	4d0a <z_tick_sleep+0x12>
}
    4d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d7a:	bf00      	nop
    4d7c:	20000b10 	.word	0x20000b10
    4d80:	20000b38 	.word	0x20000b38
    4d84:	000061ad 	.word	0x000061ad

00004d88 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4d88:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4d8c:	bf08      	it	eq
    4d8e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    4d92:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4d94:	d106      	bne.n	4da4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    4d96:	4b08      	ldr	r3, [pc, #32]	; (4db8 <z_impl_k_sleep+0x30>)
    4d98:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4d9a:	f7ff ff13 	bl	4bc4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    4d9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    4da2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4da4:	f7ff ffa8 	bl	4cf8 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    4da8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4dac:	fb80 0303 	smull	r0, r3, r0, r3
    4db0:	0bc0      	lsrs	r0, r0, #15
    4db2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    4db6:	e7f4      	b.n	4da2 <z_impl_k_sleep+0x1a>
    4db8:	20000b10 	.word	0x20000b10

00004dbc <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4dbc:	4b01      	ldr	r3, [pc, #4]	; (4dc4 <z_impl_z_current_get+0x8>)
    4dbe:	6898      	ldr	r0, [r3, #8]
    4dc0:	4770      	bx	lr
    4dc2:	bf00      	nop
    4dc4:	20000b10 	.word	0x20000b10

00004dc8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dcc:	4604      	mov	r4, r0
    4dce:	f04f 0320 	mov.w	r3, #32
    4dd2:	f3ef 8611 	mrs	r6, BASEPRI
    4dd6:	f383 8812 	msr	BASEPRI_MAX, r3
    4dda:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4dde:	7b43      	ldrb	r3, [r0, #13]
    4de0:	071a      	lsls	r2, r3, #28
    4de2:	d505      	bpl.n	4df0 <z_thread_abort+0x28>
	__asm__ volatile(
    4de4:	f386 8811 	msr	BASEPRI, r6
    4de8:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4df0:	f023 0220 	bic.w	r2, r3, #32
    4df4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4df8:	09d2      	lsrs	r2, r2, #7
    4dfa:	d120      	bne.n	4e3e <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4dfc:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    4dfe:	68a3      	ldr	r3, [r4, #8]
    4e00:	b113      	cbz	r3, 4e08 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    4e02:	4620      	mov	r0, r4
    4e04:	f001 f99c 	bl	6140 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4e08:	f104 0018 	add.w	r0, r4, #24
    4e0c:	f001 fa32 	bl	6274 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4e10:	f104 0758 	add.w	r7, r4, #88	; 0x58
    4e14:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    4e18:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e1a:	42bd      	cmp	r5, r7
    4e1c:	d000      	beq.n	4e20 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4e1e:	b9b5      	cbnz	r5, 4e4e <z_thread_abort+0x86>
		update_cache(1);
    4e20:	2001      	movs	r0, #1
    4e22:	f7ff fd45 	bl	48b0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    4e26:	4b10      	ldr	r3, [pc, #64]	; (4e68 <z_thread_abort+0xa0>)
    4e28:	689b      	ldr	r3, [r3, #8]
    4e2a:	42a3      	cmp	r3, r4
    4e2c:	d1da      	bne.n	4de4 <z_thread_abort+0x1c>
    4e2e:	f3ef 8305 	mrs	r3, IPSR
    4e32:	2b00      	cmp	r3, #0
    4e34:	d1d6      	bne.n	4de4 <z_thread_abort+0x1c>
    4e36:	4630      	mov	r0, r6
    4e38:	f7fc fe0a 	bl	1a50 <arch_swap>
	return ret;
    4e3c:	e7d2      	b.n	4de4 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4e3e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    4e42:	f043 0308 	orr.w	r3, r3, #8
    4e46:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4e48:	f001 f972 	bl	6130 <sys_dlist_remove>
}
    4e4c:	e7d7      	b.n	4dfe <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    4e4e:	4628      	mov	r0, r5
    4e50:	f001 f976 	bl	6140 <unpend_thread_no_timeout>
    4e54:	f105 0018 	add.w	r0, r5, #24
    4e58:	f001 fa0c 	bl	6274 <z_abort_timeout>
    4e5c:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    4e60:	4628      	mov	r0, r5
    4e62:	f7ff fdc1 	bl	49e8 <ready_thread>
    4e66:	e7d7      	b.n	4e18 <z_thread_abort+0x50>
    4e68:	20000b10 	.word	0x20000b10

00004e6c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4e6c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    4e6e:	4806      	ldr	r0, [pc, #24]	; (4e88 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4e70:	4a06      	ldr	r2, [pc, #24]	; (4e8c <z_data_copy+0x20>)
    4e72:	4907      	ldr	r1, [pc, #28]	; (4e90 <z_data_copy+0x24>)
    4e74:	1a12      	subs	r2, r2, r0
    4e76:	f001 f8f9 	bl	606c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4e7e:	4a05      	ldr	r2, [pc, #20]	; (4e94 <z_data_copy+0x28>)
    4e80:	4905      	ldr	r1, [pc, #20]	; (4e98 <z_data_copy+0x2c>)
    4e82:	4806      	ldr	r0, [pc, #24]	; (4e9c <z_data_copy+0x30>)
    4e84:	f001 b8f2 	b.w	606c <z_early_memcpy>
    4e88:	20000000 	.word	0x20000000
    4e8c:	200001d0 	.word	0x200001d0
    4e90:	000069f0 	.word	0x000069f0
    4e94:	00000000 	.word	0x00000000
    4e98:	000069f0 	.word	0x000069f0
    4e9c:	20000000 	.word	0x20000000

00004ea0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4ea0:	4b03      	ldr	r3, [pc, #12]	; (4eb0 <elapsed+0x10>)
    4ea2:	681b      	ldr	r3, [r3, #0]
    4ea4:	b90b      	cbnz	r3, 4eaa <elapsed+0xa>
    4ea6:	f7fe b911 	b.w	30cc <sys_clock_elapsed>
}
    4eaa:	2000      	movs	r0, #0
    4eac:	4770      	bx	lr
    4eae:	bf00      	nop
    4eb0:	20000b44 	.word	0x20000b44

00004eb4 <next_timeout>:
	return list->head == list;
    4eb4:	4b10      	ldr	r3, [pc, #64]	; (4ef8 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    4eb6:	b510      	push	{r4, lr}
    4eb8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4eba:	429c      	cmp	r4, r3
    4ebc:	bf08      	it	eq
    4ebe:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4ec0:	f7ff ffee 	bl	4ea0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4ec4:	b1a4      	cbz	r4, 4ef0 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4ec6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    4eca:	1a1b      	subs	r3, r3, r0
    4ecc:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    4ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4ed4:	f170 0200 	sbcs.w	r2, r0, #0
    4ed8:	da0a      	bge.n	4ef0 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    4eda:	2800      	cmp	r0, #0
    4edc:	bfac      	ite	ge
    4ede:	4618      	movge	r0, r3
    4ee0:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4ee2:	4b06      	ldr	r3, [pc, #24]	; (4efc <next_timeout+0x48>)
    4ee4:	691b      	ldr	r3, [r3, #16]
    4ee6:	b113      	cbz	r3, 4eee <next_timeout+0x3a>
    4ee8:	4298      	cmp	r0, r3
    4eea:	bfa8      	it	ge
    4eec:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4eee:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    4ef0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4ef4:	e7f5      	b.n	4ee2 <next_timeout+0x2e>
    4ef6:	bf00      	nop
    4ef8:	20000100 	.word	0x20000100
    4efc:	20000b10 	.word	0x20000b10

00004f00 <remove_timeout>:
{
    4f00:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    4f02:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4f04:	b168      	cbz	r0, 4f22 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    4f06:	4a0a      	ldr	r2, [pc, #40]	; (4f30 <remove_timeout+0x30>)
    4f08:	6852      	ldr	r2, [r2, #4]
    4f0a:	4290      	cmp	r0, r2
    4f0c:	d009      	beq.n	4f22 <remove_timeout+0x22>
	if (next(t) != NULL) {
    4f0e:	b143      	cbz	r3, 4f22 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4f10:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4f14:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4f18:	1912      	adds	r2, r2, r4
    4f1a:	eb41 0105 	adc.w	r1, r1, r5
    4f1e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    4f22:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    4f24:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4f26:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4f28:	2300      	movs	r3, #0
	node->prev = NULL;
    4f2a:	e9c0 3300 	strd	r3, r3, [r0]
}
    4f2e:	bd30      	pop	{r4, r5, pc}
    4f30:	20000100 	.word	0x20000100

00004f34 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4f38:	bf08      	it	eq
    4f3a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    4f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f40:	4604      	mov	r4, r0
    4f42:	461f      	mov	r7, r3
    4f44:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4f46:	d067      	beq.n	5018 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4f48:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    4f4a:	f04f 0320 	mov.w	r3, #32
    4f4e:	f3ef 8611 	mrs	r6, BASEPRI
    4f52:	f383 8812 	msr	BASEPRI_MAX, r3
    4f56:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4f5a:	f06f 0201 	mvn.w	r2, #1
    4f5e:	1b53      	subs	r3, r2, r5
    4f60:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    4f64:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4f68:	2b00      	cmp	r3, #0
    4f6a:	db1b      	blt.n	4fa4 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4f6c:	4b2b      	ldr	r3, [pc, #172]	; (501c <z_add_timeout+0xe8>)
    4f6e:	e9d3 1300 	ldrd	r1, r3, [r3]
    4f72:	1a52      	subs	r2, r2, r1
    4f74:	eb6c 0303 	sbc.w	r3, ip, r3
    4f78:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    4f7a:	eb63 0307 	sbc.w	r3, r3, r7
    4f7e:	2d01      	cmp	r5, #1
    4f80:	f173 0200 	sbcs.w	r2, r3, #0
    4f84:	bfbc      	itt	lt
    4f86:	2501      	movlt	r5, #1
    4f88:	2300      	movlt	r3, #0
    4f8a:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    4f8e:	4824      	ldr	r0, [pc, #144]	; (5020 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    4f90:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f94:	4283      	cmp	r3, r0
    4f96:	d118      	bne.n	4fca <z_add_timeout+0x96>
	node->prev = tail;
    4f98:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    4f9c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    4fa0:	6044      	str	r4, [r0, #4]
}
    4fa2:	e026      	b.n	4ff2 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4fa4:	f7ff ff7c 	bl	4ea0 <elapsed>
    4fa8:	3501      	adds	r5, #1
    4faa:	f147 0700 	adc.w	r7, r7, #0
    4fae:	182d      	adds	r5, r5, r0
    4fb0:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    4fb4:	e9c4 5704 	strd	r5, r7, [r4, #16]
    4fb8:	e7e9      	b.n	4f8e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    4fba:	1a52      	subs	r2, r2, r1
    4fbc:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    4fc0:	459c      	cmp	ip, r3
    4fc2:	e9c4 2504 	strd	r2, r5, [r4, #16]
    4fc6:	d0e7      	beq.n	4f98 <z_add_timeout+0x64>
    4fc8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    4fca:	2b00      	cmp	r3, #0
    4fcc:	d0e4      	beq.n	4f98 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    4fce:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    4fd2:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    4fd6:	428a      	cmp	r2, r1
    4fd8:	eb75 0e07 	sbcs.w	lr, r5, r7
    4fdc:	daed      	bge.n	4fba <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    4fde:	1a8a      	subs	r2, r1, r2
    4fe0:	eb67 0505 	sbc.w	r5, r7, r5
    4fe4:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    4fe8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4fea:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4fee:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4ff0:	605c      	str	r4, [r3, #4]
	return list->head == list;
    4ff2:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ff4:	4283      	cmp	r3, r0
    4ff6:	d00b      	beq.n	5010 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4ff8:	429c      	cmp	r4, r3
    4ffa:	d109      	bne.n	5010 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4ffc:	f7ff ff5a 	bl	4eb4 <next_timeout>

			if (next_time == 0 ||
    5000:	b118      	cbz	r0, 500a <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    5002:	4b08      	ldr	r3, [pc, #32]	; (5024 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    5004:	691b      	ldr	r3, [r3, #16]
    5006:	4283      	cmp	r3, r0
    5008:	d002      	beq.n	5010 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    500a:	2100      	movs	r1, #0
    500c:	f7fe f82c 	bl	3068 <sys_clock_set_timeout>
	__asm__ volatile(
    5010:	f386 8811 	msr	BASEPRI, r6
    5014:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    501a:	bf00      	nop
    501c:	200003f0 	.word	0x200003f0
    5020:	20000100 	.word	0x20000100
    5024:	20000b10 	.word	0x20000b10

00005028 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    502c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    502e:	f7ff fc99 	bl	4964 <z_time_slice>
	__asm__ volatile(
    5032:	f04f 0320 	mov.w	r3, #32
    5036:	f3ef 8411 	mrs	r4, BASEPRI
    503a:	f383 8812 	msr	BASEPRI_MAX, r3
    503e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5042:	4e24      	ldr	r6, [pc, #144]	; (50d4 <sys_clock_announce+0xac>)
	return list->head == list;
    5044:	f8df 8090 	ldr.w	r8, [pc, #144]	; 50d8 <sys_clock_announce+0xb0>
    5048:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    504a:	4d24      	ldr	r5, [pc, #144]	; (50dc <sys_clock_announce+0xb4>)
    504c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5050:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5052:	4540      	cmp	r0, r8
		curr_tick += dt;
    5054:	e9d5 1e00 	ldrd	r1, lr, [r5]
    5058:	ea4f 77e2 	mov.w	r7, r2, asr #31
    505c:	d00b      	beq.n	5076 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    505e:	b150      	cbz	r0, 5076 <sys_clock_announce+0x4e>
    5060:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    5064:	429a      	cmp	r2, r3
    5066:	eb77 090c 	sbcs.w	r9, r7, ip
    506a:	da16      	bge.n	509a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    506c:	1a9b      	subs	r3, r3, r2
    506e:	eb6c 0c07 	sbc.w	ip, ip, r7
    5072:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    5076:	1852      	adds	r2, r2, r1
    5078:	eb4e 0707 	adc.w	r7, lr, r7
    507c:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    5080:	2500      	movs	r5, #0
    5082:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5084:	f7ff ff16 	bl	4eb4 <next_timeout>
    5088:	4629      	mov	r1, r5
    508a:	f7fd ffed 	bl	3068 <sys_clock_set_timeout>
	__asm__ volatile(
    508e:	f384 8811 	msr	BASEPRI, r4
    5092:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    509a:	1859      	adds	r1, r3, r1
    509c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    50a0:	1ad3      	subs	r3, r2, r3
    50a2:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    50a4:	2200      	movs	r2, #0
    50a6:	2300      	movs	r3, #0
    50a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    50ac:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    50b0:	f7ff ff26 	bl	4f00 <remove_timeout>
    50b4:	f384 8811 	msr	BASEPRI, r4
    50b8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    50bc:	6883      	ldr	r3, [r0, #8]
    50be:	4798      	blx	r3
	__asm__ volatile(
    50c0:	f04f 0320 	mov.w	r3, #32
    50c4:	f3ef 8411 	mrs	r4, BASEPRI
    50c8:	f383 8812 	msr	BASEPRI_MAX, r3
    50cc:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    50d0:	e7bc      	b.n	504c <sys_clock_announce+0x24>
    50d2:	bf00      	nop
    50d4:	20000b44 	.word	0x20000b44
    50d8:	20000100 	.word	0x20000100
    50dc:	200003f0 	.word	0x200003f0

000050e0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    50e0:	b510      	push	{r4, lr}
    50e2:	f04f 0320 	mov.w	r3, #32
    50e6:	f3ef 8411 	mrs	r4, BASEPRI
    50ea:	f383 8812 	msr	BASEPRI_MAX, r3
    50ee:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    50f2:	f7fd ffeb 	bl	30cc <sys_clock_elapsed>
    50f6:	4a05      	ldr	r2, [pc, #20]	; (510c <sys_clock_tick_get+0x2c>)
    50f8:	e9d2 3100 	ldrd	r3, r1, [r2]
    50fc:	18c0      	adds	r0, r0, r3
    50fe:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    5102:	f384 8811 	msr	BASEPRI, r4
    5106:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    510a:	bd10      	pop	{r4, pc}
    510c:	200003f0 	.word	0x200003f0

00005110 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5110:	4a02      	ldr	r2, [pc, #8]	; (511c <boot_banner+0xc>)
    5112:	4903      	ldr	r1, [pc, #12]	; (5120 <boot_banner+0x10>)
    5114:	4803      	ldr	r0, [pc, #12]	; (5124 <boot_banner+0x14>)
    5116:	f000 ba1f 	b.w	5558 <printk>
    511a:	bf00      	nop
    511c:	00006868 	.word	0x00006868
    5120:	000069bb 	.word	0x000069bb
    5124:	000069c8 	.word	0x000069c8

00005128 <nrf_cc3xx_platform_init_no_rng>:
    5128:	b510      	push	{r4, lr}
    512a:	4c0a      	ldr	r4, [pc, #40]	; (5154 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    512c:	6823      	ldr	r3, [r4, #0]
    512e:	b11b      	cbz	r3, 5138 <nrf_cc3xx_platform_init_no_rng+0x10>
    5130:	2301      	movs	r3, #1
    5132:	6023      	str	r3, [r4, #0]
    5134:	2000      	movs	r0, #0
    5136:	bd10      	pop	{r4, pc}
    5138:	f000 f8ce 	bl	52d8 <CC_LibInitNoRng>
    513c:	2800      	cmp	r0, #0
    513e:	d0f7      	beq.n	5130 <nrf_cc3xx_platform_init_no_rng+0x8>
    5140:	3801      	subs	r0, #1
    5142:	2806      	cmp	r0, #6
    5144:	d803      	bhi.n	514e <nrf_cc3xx_platform_init_no_rng+0x26>
    5146:	4b04      	ldr	r3, [pc, #16]	; (5158 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5148:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    514c:	bd10      	pop	{r4, pc}
    514e:	4803      	ldr	r0, [pc, #12]	; (515c <nrf_cc3xx_platform_init_no_rng+0x34>)
    5150:	bd10      	pop	{r4, pc}
    5152:	bf00      	nop
    5154:	20000b48 	.word	0x20000b48
    5158:	00006764 	.word	0x00006764
    515c:	ffff8ffe 	.word	0xffff8ffe

00005160 <nrf_cc3xx_platform_abort>:
    5160:	f3bf 8f4f 	dsb	sy
    5164:	4905      	ldr	r1, [pc, #20]	; (517c <nrf_cc3xx_platform_abort+0x1c>)
    5166:	4b06      	ldr	r3, [pc, #24]	; (5180 <nrf_cc3xx_platform_abort+0x20>)
    5168:	68ca      	ldr	r2, [r1, #12]
    516a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    516e:	4313      	orrs	r3, r2
    5170:	60cb      	str	r3, [r1, #12]
    5172:	f3bf 8f4f 	dsb	sy
    5176:	bf00      	nop
    5178:	e7fd      	b.n	5176 <nrf_cc3xx_platform_abort+0x16>
    517a:	bf00      	nop
    517c:	e000ed00 	.word	0xe000ed00
    5180:	05fa0004 	.word	0x05fa0004

00005184 <CC_PalAbort>:
    5184:	b410      	push	{r4}
    5186:	4b09      	ldr	r3, [pc, #36]	; (51ac <CC_PalAbort+0x28>)
    5188:	4909      	ldr	r1, [pc, #36]	; (51b0 <CC_PalAbort+0x2c>)
    518a:	4c0a      	ldr	r4, [pc, #40]	; (51b4 <CC_PalAbort+0x30>)
    518c:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    5190:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    5194:	6849      	ldr	r1, [r1, #4]
    5196:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    519a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    519e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    51a2:	2300      	movs	r3, #0
    51a4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    51a8:	bc10      	pop	{r4}
    51aa:	4708      	bx	r1
    51ac:	5002b000 	.word	0x5002b000
    51b0:	20000108 	.word	0x20000108
    51b4:	5002a000 	.word	0x5002a000

000051b8 <nrf_cc3xx_platform_set_abort>:
    51b8:	e9d0 1200 	ldrd	r1, r2, [r0]
    51bc:	4b01      	ldr	r3, [pc, #4]	; (51c4 <nrf_cc3xx_platform_set_abort+0xc>)
    51be:	e9c3 1200 	strd	r1, r2, [r3]
    51c2:	4770      	bx	lr
    51c4:	20000108 	.word	0x20000108

000051c8 <mutex_free>:
    51c8:	b510      	push	{r4, lr}
    51ca:	4604      	mov	r4, r0
    51cc:	b130      	cbz	r0, 51dc <mutex_free+0x14>
    51ce:	6863      	ldr	r3, [r4, #4]
    51d0:	06db      	lsls	r3, r3, #27
    51d2:	d502      	bpl.n	51da <mutex_free+0x12>
    51d4:	2300      	movs	r3, #0
    51d6:	6023      	str	r3, [r4, #0]
    51d8:	6063      	str	r3, [r4, #4]
    51da:	bd10      	pop	{r4, pc}
    51dc:	4b02      	ldr	r3, [pc, #8]	; (51e8 <mutex_free+0x20>)
    51de:	4803      	ldr	r0, [pc, #12]	; (51ec <mutex_free+0x24>)
    51e0:	685b      	ldr	r3, [r3, #4]
    51e2:	4798      	blx	r3
    51e4:	e7f3      	b.n	51ce <mutex_free+0x6>
    51e6:	bf00      	nop
    51e8:	20000108 	.word	0x20000108
    51ec:	00006780 	.word	0x00006780

000051f0 <mutex_lock>:
    51f0:	b1b0      	cbz	r0, 5220 <mutex_lock+0x30>
    51f2:	6843      	ldr	r3, [r0, #4]
    51f4:	b193      	cbz	r3, 521c <mutex_lock+0x2c>
    51f6:	06db      	lsls	r3, r3, #27
    51f8:	d50e      	bpl.n	5218 <mutex_lock+0x28>
    51fa:	2301      	movs	r3, #1
    51fc:	e850 2f00 	ldrex	r2, [r0]
    5200:	4619      	mov	r1, r3
    5202:	e840 1c00 	strex	ip, r1, [r0]
    5206:	f09c 0f00 	teq	ip, #0
    520a:	d1f7      	bne.n	51fc <mutex_lock+0xc>
    520c:	2a01      	cmp	r2, #1
    520e:	d0f5      	beq.n	51fc <mutex_lock+0xc>
    5210:	f3bf 8f5f 	dmb	sy
    5214:	2000      	movs	r0, #0
    5216:	4770      	bx	lr
    5218:	4803      	ldr	r0, [pc, #12]	; (5228 <mutex_lock+0x38>)
    521a:	4770      	bx	lr
    521c:	4803      	ldr	r0, [pc, #12]	; (522c <mutex_lock+0x3c>)
    521e:	4770      	bx	lr
    5220:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5224:	4770      	bx	lr
    5226:	bf00      	nop
    5228:	ffff8fe9 	.word	0xffff8fe9
    522c:	ffff8fea 	.word	0xffff8fea

00005230 <mutex_unlock>:
    5230:	b168      	cbz	r0, 524e <mutex_unlock+0x1e>
    5232:	6843      	ldr	r3, [r0, #4]
    5234:	b13b      	cbz	r3, 5246 <mutex_unlock+0x16>
    5236:	06db      	lsls	r3, r3, #27
    5238:	d507      	bpl.n	524a <mutex_unlock+0x1a>
    523a:	f3bf 8f5f 	dmb	sy
    523e:	2300      	movs	r3, #0
    5240:	6003      	str	r3, [r0, #0]
    5242:	4618      	mov	r0, r3
    5244:	4770      	bx	lr
    5246:	4803      	ldr	r0, [pc, #12]	; (5254 <mutex_unlock+0x24>)
    5248:	4770      	bx	lr
    524a:	4803      	ldr	r0, [pc, #12]	; (5258 <mutex_unlock+0x28>)
    524c:	4770      	bx	lr
    524e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5252:	4770      	bx	lr
    5254:	ffff8fea 	.word	0xffff8fea
    5258:	ffff8fe9 	.word	0xffff8fe9

0000525c <mutex_init>:
    525c:	b510      	push	{r4, lr}
    525e:	4604      	mov	r4, r0
    5260:	b120      	cbz	r0, 526c <mutex_init+0x10>
    5262:	2200      	movs	r2, #0
    5264:	2311      	movs	r3, #17
    5266:	6022      	str	r2, [r4, #0]
    5268:	6063      	str	r3, [r4, #4]
    526a:	bd10      	pop	{r4, pc}
    526c:	4801      	ldr	r0, [pc, #4]	; (5274 <mutex_init+0x18>)
    526e:	f7ff ff89 	bl	5184 <CC_PalAbort>
    5272:	e7f6      	b.n	5262 <mutex_init+0x6>
    5274:	000067a8 	.word	0x000067a8

00005278 <nrf_cc3xx_platform_set_mutexes>:
    5278:	b570      	push	{r4, r5, r6, lr}
    527a:	e9d0 2300 	ldrd	r2, r3, [r0]
    527e:	4c13      	ldr	r4, [pc, #76]	; (52cc <nrf_cc3xx_platform_set_mutexes+0x54>)
    5280:	4d13      	ldr	r5, [pc, #76]	; (52d0 <nrf_cc3xx_platform_set_mutexes+0x58>)
    5282:	6063      	str	r3, [r4, #4]
    5284:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    5288:	e9c4 3002 	strd	r3, r0, [r4, #8]
    528c:	6022      	str	r2, [r4, #0]
    528e:	4b11      	ldr	r3, [pc, #68]	; (52d4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    5290:	6808      	ldr	r0, [r1, #0]
    5292:	6018      	str	r0, [r3, #0]
    5294:	6848      	ldr	r0, [r1, #4]
    5296:	6058      	str	r0, [r3, #4]
    5298:	6888      	ldr	r0, [r1, #8]
    529a:	6098      	str	r0, [r3, #8]
    529c:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    52a0:	60d8      	str	r0, [r3, #12]
    52a2:	6119      	str	r1, [r3, #16]
    52a4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    52a8:	06db      	lsls	r3, r3, #27
    52aa:	d50d      	bpl.n	52c8 <nrf_cc3xx_platform_set_mutexes+0x50>
    52ac:	2300      	movs	r3, #0
    52ae:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    52b2:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    52b6:	f505 708a 	add.w	r0, r5, #276	; 0x114
    52ba:	4790      	blx	r2
    52bc:	6823      	ldr	r3, [r4, #0]
    52be:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    52c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    52c6:	4718      	bx	r3
    52c8:	bd70      	pop	{r4, r5, r6, pc}
    52ca:	bf00      	nop
    52cc:	20000118 	.word	0x20000118
    52d0:	20000b60 	.word	0x20000b60
    52d4:	20000128 	.word	0x20000128

000052d8 <CC_LibInitNoRng>:
    52d8:	b538      	push	{r3, r4, r5, lr}
    52da:	f000 f82f 	bl	533c <CC_HalInit>
    52de:	b120      	cbz	r0, 52ea <CC_LibInitNoRng+0x12>
    52e0:	2403      	movs	r4, #3
    52e2:	f000 f863 	bl	53ac <CC_PalTerminate>
    52e6:	4620      	mov	r0, r4
    52e8:	bd38      	pop	{r3, r4, r5, pc}
    52ea:	f000 f831 	bl	5350 <CC_PalInit>
    52ee:	b998      	cbnz	r0, 5318 <CC_LibInitNoRng+0x40>
    52f0:	f000 f8ac 	bl	544c <CC_PalPowerSaveModeSelect>
    52f4:	b998      	cbnz	r0, 531e <CC_LibInitNoRng+0x46>
    52f6:	4d0f      	ldr	r5, [pc, #60]	; (5334 <CC_LibInitNoRng+0x5c>)
    52f8:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    52fc:	0e1b      	lsrs	r3, r3, #24
    52fe:	2bf0      	cmp	r3, #240	; 0xf0
    5300:	d108      	bne.n	5314 <CC_LibInitNoRng+0x3c>
    5302:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    5306:	4b0c      	ldr	r3, [pc, #48]	; (5338 <CC_LibInitNoRng+0x60>)
    5308:	429a      	cmp	r2, r3
    530a:	d00a      	beq.n	5322 <CC_LibInitNoRng+0x4a>
    530c:	2407      	movs	r4, #7
    530e:	f000 f817 	bl	5340 <CC_HalTerminate>
    5312:	e7e6      	b.n	52e2 <CC_LibInitNoRng+0xa>
    5314:	2406      	movs	r4, #6
    5316:	e7fa      	b.n	530e <CC_LibInitNoRng+0x36>
    5318:	2404      	movs	r4, #4
    531a:	4620      	mov	r0, r4
    531c:	bd38      	pop	{r3, r4, r5, pc}
    531e:	2400      	movs	r4, #0
    5320:	e7f5      	b.n	530e <CC_LibInitNoRng+0x36>
    5322:	2001      	movs	r0, #1
    5324:	f000 f892 	bl	544c <CC_PalPowerSaveModeSelect>
    5328:	4604      	mov	r4, r0
    532a:	2800      	cmp	r0, #0
    532c:	d1f7      	bne.n	531e <CC_LibInitNoRng+0x46>
    532e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    5332:	e7d8      	b.n	52e6 <CC_LibInitNoRng+0xe>
    5334:	5002b000 	.word	0x5002b000
    5338:	20e00000 	.word	0x20e00000

0000533c <CC_HalInit>:
    533c:	2000      	movs	r0, #0
    533e:	4770      	bx	lr

00005340 <CC_HalTerminate>:
    5340:	2000      	movs	r0, #0
    5342:	4770      	bx	lr

00005344 <CC_HalMaskInterrupt>:
    5344:	4b01      	ldr	r3, [pc, #4]	; (534c <CC_HalMaskInterrupt+0x8>)
    5346:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    534a:	4770      	bx	lr
    534c:	5002b000 	.word	0x5002b000

00005350 <CC_PalInit>:
    5350:	b510      	push	{r4, lr}
    5352:	4811      	ldr	r0, [pc, #68]	; (5398 <CC_PalInit+0x48>)
    5354:	f000 f848 	bl	53e8 <CC_PalMutexCreate>
    5358:	b100      	cbz	r0, 535c <CC_PalInit+0xc>
    535a:	bd10      	pop	{r4, pc}
    535c:	480f      	ldr	r0, [pc, #60]	; (539c <CC_PalInit+0x4c>)
    535e:	f000 f843 	bl	53e8 <CC_PalMutexCreate>
    5362:	2800      	cmp	r0, #0
    5364:	d1f9      	bne.n	535a <CC_PalInit+0xa>
    5366:	4c0e      	ldr	r4, [pc, #56]	; (53a0 <CC_PalInit+0x50>)
    5368:	4620      	mov	r0, r4
    536a:	f000 f83d 	bl	53e8 <CC_PalMutexCreate>
    536e:	2800      	cmp	r0, #0
    5370:	d1f3      	bne.n	535a <CC_PalInit+0xa>
    5372:	4b0c      	ldr	r3, [pc, #48]	; (53a4 <CC_PalInit+0x54>)
    5374:	480c      	ldr	r0, [pc, #48]	; (53a8 <CC_PalInit+0x58>)
    5376:	601c      	str	r4, [r3, #0]
    5378:	f000 f836 	bl	53e8 <CC_PalMutexCreate>
    537c:	4601      	mov	r1, r0
    537e:	2800      	cmp	r0, #0
    5380:	d1eb      	bne.n	535a <CC_PalInit+0xa>
    5382:	f000 f82d 	bl	53e0 <CC_PalDmaInit>
    5386:	4604      	mov	r4, r0
    5388:	b108      	cbz	r0, 538e <CC_PalInit+0x3e>
    538a:	4620      	mov	r0, r4
    538c:	bd10      	pop	{r4, pc}
    538e:	f000 f83f 	bl	5410 <CC_PalPowerSaveModeInit>
    5392:	4620      	mov	r0, r4
    5394:	e7fa      	b.n	538c <CC_PalInit+0x3c>
    5396:	bf00      	nop
    5398:	20000160 	.word	0x20000160
    539c:	20000154 	.word	0x20000154
    53a0:	2000015c 	.word	0x2000015c
    53a4:	20000164 	.word	0x20000164
    53a8:	20000158 	.word	0x20000158

000053ac <CC_PalTerminate>:
    53ac:	b508      	push	{r3, lr}
    53ae:	4808      	ldr	r0, [pc, #32]	; (53d0 <CC_PalTerminate+0x24>)
    53b0:	f000 f824 	bl	53fc <CC_PalMutexDestroy>
    53b4:	4807      	ldr	r0, [pc, #28]	; (53d4 <CC_PalTerminate+0x28>)
    53b6:	f000 f821 	bl	53fc <CC_PalMutexDestroy>
    53ba:	4807      	ldr	r0, [pc, #28]	; (53d8 <CC_PalTerminate+0x2c>)
    53bc:	f000 f81e 	bl	53fc <CC_PalMutexDestroy>
    53c0:	4806      	ldr	r0, [pc, #24]	; (53dc <CC_PalTerminate+0x30>)
    53c2:	f000 f81b 	bl	53fc <CC_PalMutexDestroy>
    53c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    53ca:	f000 b80b 	b.w	53e4 <CC_PalDmaTerminate>
    53ce:	bf00      	nop
    53d0:	20000160 	.word	0x20000160
    53d4:	20000154 	.word	0x20000154
    53d8:	2000015c 	.word	0x2000015c
    53dc:	20000158 	.word	0x20000158

000053e0 <CC_PalDmaInit>:
    53e0:	2000      	movs	r0, #0
    53e2:	4770      	bx	lr

000053e4 <CC_PalDmaTerminate>:
    53e4:	4770      	bx	lr
    53e6:	bf00      	nop

000053e8 <CC_PalMutexCreate>:
    53e8:	b508      	push	{r3, lr}
    53ea:	4b03      	ldr	r3, [pc, #12]	; (53f8 <CC_PalMutexCreate+0x10>)
    53ec:	6802      	ldr	r2, [r0, #0]
    53ee:	681b      	ldr	r3, [r3, #0]
    53f0:	6810      	ldr	r0, [r2, #0]
    53f2:	4798      	blx	r3
    53f4:	2000      	movs	r0, #0
    53f6:	bd08      	pop	{r3, pc}
    53f8:	20000118 	.word	0x20000118

000053fc <CC_PalMutexDestroy>:
    53fc:	b508      	push	{r3, lr}
    53fe:	4b03      	ldr	r3, [pc, #12]	; (540c <CC_PalMutexDestroy+0x10>)
    5400:	6802      	ldr	r2, [r0, #0]
    5402:	685b      	ldr	r3, [r3, #4]
    5404:	6810      	ldr	r0, [r2, #0]
    5406:	4798      	blx	r3
    5408:	2000      	movs	r0, #0
    540a:	bd08      	pop	{r3, pc}
    540c:	20000118 	.word	0x20000118

00005410 <CC_PalPowerSaveModeInit>:
    5410:	b570      	push	{r4, r5, r6, lr}
    5412:	4c09      	ldr	r4, [pc, #36]	; (5438 <CC_PalPowerSaveModeInit+0x28>)
    5414:	4d09      	ldr	r5, [pc, #36]	; (543c <CC_PalPowerSaveModeInit+0x2c>)
    5416:	6920      	ldr	r0, [r4, #16]
    5418:	68ab      	ldr	r3, [r5, #8]
    541a:	4798      	blx	r3
    541c:	b118      	cbz	r0, 5426 <CC_PalPowerSaveModeInit+0x16>
    541e:	4b08      	ldr	r3, [pc, #32]	; (5440 <CC_PalPowerSaveModeInit+0x30>)
    5420:	4808      	ldr	r0, [pc, #32]	; (5444 <CC_PalPowerSaveModeInit+0x34>)
    5422:	685b      	ldr	r3, [r3, #4]
    5424:	4798      	blx	r3
    5426:	4a08      	ldr	r2, [pc, #32]	; (5448 <CC_PalPowerSaveModeInit+0x38>)
    5428:	68eb      	ldr	r3, [r5, #12]
    542a:	6920      	ldr	r0, [r4, #16]
    542c:	2100      	movs	r1, #0
    542e:	6011      	str	r1, [r2, #0]
    5430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5434:	4718      	bx	r3
    5436:	bf00      	nop
    5438:	20000128 	.word	0x20000128
    543c:	20000118 	.word	0x20000118
    5440:	20000108 	.word	0x20000108
    5444:	000067cc 	.word	0x000067cc
    5448:	20000b5c 	.word	0x20000b5c

0000544c <CC_PalPowerSaveModeSelect>:
    544c:	b570      	push	{r4, r5, r6, lr}
    544e:	4d1b      	ldr	r5, [pc, #108]	; (54bc <CC_PalPowerSaveModeSelect+0x70>)
    5450:	4e1b      	ldr	r6, [pc, #108]	; (54c0 <CC_PalPowerSaveModeSelect+0x74>)
    5452:	4604      	mov	r4, r0
    5454:	68b2      	ldr	r2, [r6, #8]
    5456:	6928      	ldr	r0, [r5, #16]
    5458:	4790      	blx	r2
    545a:	b9f8      	cbnz	r0, 549c <CC_PalPowerSaveModeSelect+0x50>
    545c:	b15c      	cbz	r4, 5476 <CC_PalPowerSaveModeSelect+0x2a>
    545e:	4c19      	ldr	r4, [pc, #100]	; (54c4 <CC_PalPowerSaveModeSelect+0x78>)
    5460:	6823      	ldr	r3, [r4, #0]
    5462:	b1b3      	cbz	r3, 5492 <CC_PalPowerSaveModeSelect+0x46>
    5464:	2b01      	cmp	r3, #1
    5466:	d01b      	beq.n	54a0 <CC_PalPowerSaveModeSelect+0x54>
    5468:	3b01      	subs	r3, #1
    546a:	6023      	str	r3, [r4, #0]
    546c:	6928      	ldr	r0, [r5, #16]
    546e:	68f3      	ldr	r3, [r6, #12]
    5470:	4798      	blx	r3
    5472:	2000      	movs	r0, #0
    5474:	bd70      	pop	{r4, r5, r6, pc}
    5476:	4c13      	ldr	r4, [pc, #76]	; (54c4 <CC_PalPowerSaveModeSelect+0x78>)
    5478:	6821      	ldr	r1, [r4, #0]
    547a:	b941      	cbnz	r1, 548e <CC_PalPowerSaveModeSelect+0x42>
    547c:	4b12      	ldr	r3, [pc, #72]	; (54c8 <CC_PalPowerSaveModeSelect+0x7c>)
    547e:	2201      	movs	r2, #1
    5480:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    5484:	4a11      	ldr	r2, [pc, #68]	; (54cc <CC_PalPowerSaveModeSelect+0x80>)
    5486:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    548a:	2b00      	cmp	r3, #0
    548c:	d1fb      	bne.n	5486 <CC_PalPowerSaveModeSelect+0x3a>
    548e:	3101      	adds	r1, #1
    5490:	6021      	str	r1, [r4, #0]
    5492:	68f3      	ldr	r3, [r6, #12]
    5494:	6928      	ldr	r0, [r5, #16]
    5496:	4798      	blx	r3
    5498:	2000      	movs	r0, #0
    549a:	bd70      	pop	{r4, r5, r6, pc}
    549c:	480c      	ldr	r0, [pc, #48]	; (54d0 <CC_PalPowerSaveModeSelect+0x84>)
    549e:	bd70      	pop	{r4, r5, r6, pc}
    54a0:	4a0a      	ldr	r2, [pc, #40]	; (54cc <CC_PalPowerSaveModeSelect+0x80>)
    54a2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    54a6:	2b00      	cmp	r3, #0
    54a8:	d1fb      	bne.n	54a2 <CC_PalPowerSaveModeSelect+0x56>
    54aa:	4a07      	ldr	r2, [pc, #28]	; (54c8 <CC_PalPowerSaveModeSelect+0x7c>)
    54ac:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    54b0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    54b4:	f7ff ff46 	bl	5344 <CC_HalMaskInterrupt>
    54b8:	6823      	ldr	r3, [r4, #0]
    54ba:	e7d5      	b.n	5468 <CC_PalPowerSaveModeSelect+0x1c>
    54bc:	20000128 	.word	0x20000128
    54c0:	20000118 	.word	0x20000118
    54c4:	20000b5c 	.word	0x20000b5c
    54c8:	5002a000 	.word	0x5002a000
    54cc:	5002b000 	.word	0x5002b000
    54d0:	ffff8fe9 	.word	0xffff8fe9

000054d4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    54d4:	4770      	bx	lr

000054d6 <k_uptime_get>:
{
    54d6:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    54d8:	f000 ff10 	bl	62fc <z_impl_k_uptime_ticks>
    54dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    54e0:	fba0 0302 	umull	r0, r3, r0, r2
    54e4:	fb02 3101 	mla	r1, r2, r1, r3
    54e8:	0bc0      	lsrs	r0, r0, #15
}
    54ea:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    54ee:	0bc9      	lsrs	r1, r1, #15
    54f0:	bd08      	pop	{r3, pc}

000054f2 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
    54f2:	b538      	push	{r3, r4, r5, lr}
    54f4:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
    54f6:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    54fa:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    54fe:	f240 30e7 	movw	r0, #999	; 0x3e7
    5502:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5506:	2300      	movs	r3, #0
    5508:	fbc4 0105 	smlal	r0, r1, r4, r5
    550c:	f7fa fdf8 	bl	100 <__aeabi_uldivmod>
}
    5510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    5514:	f7ff bc38 	b.w	4d88 <z_impl_k_sleep>

00005518 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5518:	4603      	mov	r3, r0
    551a:	b158      	cbz	r0, 5534 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    551c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    551e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5522:	2a01      	cmp	r2, #1
    5524:	d003      	beq.n	552e <sys_notify_validate+0x16>
    5526:	2a03      	cmp	r2, #3
    5528:	d104      	bne.n	5534 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    552a:	6802      	ldr	r2, [r0, #0]
    552c:	b112      	cbz	r2, 5534 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    552e:	2000      	movs	r0, #0
    5530:	6098      	str	r0, [r3, #8]
    5532:	4770      	bx	lr
		return -EINVAL;
    5534:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5538:	4770      	bx	lr

0000553a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    553a:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    553c:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    553e:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    5542:	2a03      	cmp	r2, #3
    5544:	f04f 0200 	mov.w	r2, #0
{
    5548:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    554a:	bf0c      	ite	eq
    554c:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    554e:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5550:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5552:	4770      	bx	lr

00005554 <arch_printk_char_out>:
}
    5554:	2000      	movs	r0, #0
    5556:	4770      	bx	lr

00005558 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    5558:	b40f      	push	{r0, r1, r2, r3}
    555a:	b507      	push	{r0, r1, r2, lr}
    555c:	a904      	add	r1, sp, #16
    555e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5562:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    5564:	f7fb f852 	bl	60c <vprintk>

	va_end(ap);
}
    5568:	b003      	add	sp, #12
    556a:	f85d eb04 	ldr.w	lr, [sp], #4
    556e:	b004      	add	sp, #16
    5570:	4770      	bx	lr

00005572 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5572:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5574:	f013 0307 	ands.w	r3, r3, #7
    5578:	d105      	bne.n	5586 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    557a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    557c:	2b00      	cmp	r3, #0
    557e:	bf0c      	ite	eq
    5580:	2000      	moveq	r0, #0
    5582:	2003      	movne	r0, #3
    5584:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5586:	2b02      	cmp	r3, #2
    5588:	d105      	bne.n	5596 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    558a:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    558c:	2b00      	cmp	r3, #0
    558e:	bf14      	ite	ne
    5590:	2000      	movne	r0, #0
    5592:	2004      	moveq	r0, #4
    5594:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5596:	2b01      	cmp	r3, #1
    5598:	d105      	bne.n	55a6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    559a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    559c:	2b00      	cmp	r3, #0
    559e:	bf0c      	ite	eq
    55a0:	2000      	moveq	r0, #0
    55a2:	2005      	movne	r0, #5
    55a4:	4770      	bx	lr
	int evt = EVT_NOP;
    55a6:	2000      	movs	r0, #0
}
    55a8:	4770      	bx	lr

000055aa <notify_one>:
{
    55aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55ae:	460d      	mov	r5, r1
    55b0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    55b2:	4619      	mov	r1, r3
    55b4:	1d28      	adds	r0, r5, #4
{
    55b6:	4690      	mov	r8, r2
    55b8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    55ba:	f7ff ffbe 	bl	553a <sys_notify_finalize>
	if (cb) {
    55be:	4604      	mov	r4, r0
    55c0:	b138      	cbz	r0, 55d2 <notify_one+0x28>
		cb(mgr, cli, state, res);
    55c2:	4633      	mov	r3, r6
    55c4:	4642      	mov	r2, r8
    55c6:	4629      	mov	r1, r5
    55c8:	4638      	mov	r0, r7
    55ca:	46a4      	mov	ip, r4
}
    55cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    55d0:	4760      	bx	ip
}
    55d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000055d6 <transition_complete>:
{
    55d6:	b410      	push	{r4}
	__asm__ volatile(
    55d8:	f04f 0420 	mov.w	r4, #32
    55dc:	f3ef 8211 	mrs	r2, BASEPRI
    55e0:	f384 8812 	msr	BASEPRI_MAX, r4
    55e4:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    55e8:	6141      	str	r1, [r0, #20]
}
    55ea:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    55ec:	2101      	movs	r1, #1
    55ee:	f7fb b81b 	b.w	628 <process_event>

000055f2 <validate_args>:
{
    55f2:	b510      	push	{r4, lr}
    55f4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    55f6:	b140      	cbz	r0, 560a <validate_args+0x18>
    55f8:	b139      	cbz	r1, 560a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    55fa:	1d08      	adds	r0, r1, #4
    55fc:	f7ff ff8c 	bl	5518 <sys_notify_validate>
	if ((rv == 0)
    5600:	b928      	cbnz	r0, 560e <validate_args+0x1c>
	    && ((cli->notify.flags
    5602:	68a3      	ldr	r3, [r4, #8]
    5604:	f033 0303 	bics.w	r3, r3, #3
    5608:	d001      	beq.n	560e <validate_args+0x1c>
		rv = -EINVAL;
    560a:	f06f 0015 	mvn.w	r0, #21
}
    560e:	bd10      	pop	{r4, pc}

00005610 <onoff_manager_init>:
{
    5610:	b538      	push	{r3, r4, r5, lr}
    5612:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5614:	4605      	mov	r5, r0
    5616:	b158      	cbz	r0, 5630 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5618:	b151      	cbz	r1, 5630 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    561a:	680b      	ldr	r3, [r1, #0]
    561c:	b143      	cbz	r3, 5630 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    561e:	684b      	ldr	r3, [r1, #4]
    5620:	b133      	cbz	r3, 5630 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5622:	221c      	movs	r2, #28
    5624:	2100      	movs	r1, #0
    5626:	f000 f91f 	bl	5868 <memset>
    562a:	612c      	str	r4, [r5, #16]
	return 0;
    562c:	2000      	movs	r0, #0
}
    562e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5630:	f06f 0015 	mvn.w	r0, #21
    5634:	e7fb      	b.n	562e <onoff_manager_init+0x1e>

00005636 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5636:	b570      	push	{r4, r5, r6, lr}
    5638:	4604      	mov	r4, r0
    563a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    563c:	f7ff ffd9 	bl	55f2 <validate_args>

	if (rv < 0) {
    5640:	1e05      	subs	r5, r0, #0
    5642:	db31      	blt.n	56a8 <onoff_request+0x72>
    5644:	f04f 0320 	mov.w	r3, #32
    5648:	f3ef 8111 	mrs	r1, BASEPRI
    564c:	f383 8812 	msr	BASEPRI_MAX, r3
    5650:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5654:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5656:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    5658:	f64f 75ff 	movw	r5, #65535	; 0xffff
    565c:	42ab      	cmp	r3, r5
    565e:	f000 0207 	and.w	r2, r0, #7
    5662:	d02e      	beq.n	56c2 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    5664:	2a02      	cmp	r2, #2
    5666:	d10e      	bne.n	5686 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    5668:	3301      	adds	r3, #1
    566a:	8363      	strh	r3, [r4, #26]
	rv = state;
    566c:	4615      	mov	r5, r2
		notify = true;
    566e:	2301      	movs	r3, #1
	__asm__ volatile(
    5670:	f381 8811 	msr	BASEPRI, r1
    5674:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5678:	b1b3      	cbz	r3, 56a8 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    567a:	2300      	movs	r3, #0
    567c:	4631      	mov	r1, r6
    567e:	4620      	mov	r0, r4
    5680:	f7ff ff93 	bl	55aa <notify_one>
    5684:	e010      	b.n	56a8 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    5686:	0783      	lsls	r3, r0, #30
    5688:	d001      	beq.n	568e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    568a:	2a06      	cmp	r2, #6
    568c:	d10e      	bne.n	56ac <onoff_request+0x76>
	parent->next = child;
    568e:	2300      	movs	r3, #0
    5690:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    5692:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5694:	b993      	cbnz	r3, 56bc <onoff_request+0x86>
	list->head = node;
    5696:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    569a:	4615      	mov	r5, r2
    569c:	b962      	cbnz	r2, 56b8 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    569e:	460a      	mov	r2, r1
    56a0:	4620      	mov	r0, r4
    56a2:	2102      	movs	r1, #2
    56a4:	f7fa ffc0 	bl	628 <process_event>
		}
	}

	return rv;
}
    56a8:	4628      	mov	r0, r5
    56aa:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    56ac:	2a05      	cmp	r2, #5
    56ae:	bf0c      	ite	eq
    56b0:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    56b4:	f06f 0504 	mvnne.w	r5, #4
    56b8:	2300      	movs	r3, #0
    56ba:	e7d9      	b.n	5670 <onoff_request+0x3a>
	parent->next = child;
    56bc:	601e      	str	r6, [r3, #0]
	list->tail = node;
    56be:	6066      	str	r6, [r4, #4]
}
    56c0:	e7eb      	b.n	569a <onoff_request+0x64>
		rv = -EAGAIN;
    56c2:	f06f 050a 	mvn.w	r5, #10
    56c6:	e7f7      	b.n	56b8 <onoff_request+0x82>

000056c8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    56c8:	4604      	mov	r4, r0
    56ca:	b508      	push	{r3, lr}
    56cc:	4608      	mov	r0, r1
    56ce:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    56d0:	461a      	mov	r2, r3
    56d2:	47a0      	blx	r4
	return z_impl_z_current_get();
    56d4:	f7ff fb72 	bl	4dbc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    56d8:	f7fc fbfe 	bl	1ed8 <z_impl_k_thread_abort>

000056dc <_ldiv5>:
	uint32_t v_lo = *v;
    56dc:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    56e0:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    56e2:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    56e6:	fba2 2403 	umull	r2, r4, r2, r3
    56ea:	18d5      	adds	r5, r2, r3
    56ec:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    56f0:	fba1 1303 	umull	r1, r3, r1, r3
    56f4:	1852      	adds	r2, r2, r1
    56f6:	eb44 0403 	adc.w	r4, r4, r3
    56fa:	1952      	adds	r2, r2, r5
    56fc:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    5700:	1889      	adds	r1, r1, r2
    5702:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    5706:	e9c0 1300 	strd	r1, r3, [r0]
}
    570a:	bd30      	pop	{r4, r5, pc}

0000570c <_get_digit>:
	if (*digit_count > 0) {
    570c:	680a      	ldr	r2, [r1, #0]
    570e:	2a00      	cmp	r2, #0
{
    5710:	b510      	push	{r4, lr}
    5712:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    5714:	dd0f      	ble.n	5736 <_get_digit+0x2a>
		--*digit_count;
    5716:	3a01      	subs	r2, #1
    5718:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    571a:	681a      	ldr	r2, [r3, #0]
    571c:	6844      	ldr	r4, [r0, #4]
    571e:	200a      	movs	r0, #10
    5720:	fba2 1200 	umull	r1, r2, r2, r0
    5724:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    5728:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    572a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    572e:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    5732:	3030      	adds	r0, #48	; 0x30
}
    5734:	bd10      	pop	{r4, pc}
		rval = '0';
    5736:	2030      	movs	r0, #48	; 0x30
    5738:	e7fc      	b.n	5734 <_get_digit+0x28>

0000573a <encode_uint>:
{
    573a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    573e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    5740:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    5742:	2b6f      	cmp	r3, #111	; 0x6f
{
    5744:	4680      	mov	r8, r0
    5746:	460f      	mov	r7, r1
    5748:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    574a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    574e:	d029      	beq.n	57a4 <encode_uint+0x6a>
    5750:	d824      	bhi.n	579c <encode_uint+0x62>
		return 16;
    5752:	2b58      	cmp	r3, #88	; 0x58
    5754:	bf14      	ite	ne
    5756:	260a      	movne	r6, #10
    5758:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    575a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    575e:	4632      	mov	r2, r6
    5760:	2300      	movs	r3, #0
    5762:	4640      	mov	r0, r8
    5764:	4639      	mov	r1, r7
    5766:	f7fa fccb 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    576a:	2a09      	cmp	r2, #9
    576c:	b2d4      	uxtb	r4, r2
    576e:	d81e      	bhi.n	57ae <encode_uint+0x74>
    5770:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    5772:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5774:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    5776:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    577a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    577e:	d301      	bcc.n	5784 <encode_uint+0x4a>
    5780:	45d1      	cmp	r9, sl
    5782:	d811      	bhi.n	57a8 <encode_uint+0x6e>
	if (conv->flag_hash) {
    5784:	782b      	ldrb	r3, [r5, #0]
    5786:	069b      	lsls	r3, r3, #26
    5788:	d505      	bpl.n	5796 <encode_uint+0x5c>
		if (radix == 8) {
    578a:	2e08      	cmp	r6, #8
    578c:	d115      	bne.n	57ba <encode_uint+0x80>
			conv->altform_0 = true;
    578e:	78ab      	ldrb	r3, [r5, #2]
    5790:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    5794:	70ab      	strb	r3, [r5, #2]
}
    5796:	4648      	mov	r0, r9
    5798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    579c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    57a0:	2b70      	cmp	r3, #112	; 0x70
    57a2:	e7d7      	b.n	5754 <encode_uint+0x1a>
	switch (specifier) {
    57a4:	2608      	movs	r6, #8
    57a6:	e7d8      	b.n	575a <encode_uint+0x20>
		value /= radix;
    57a8:	4680      	mov	r8, r0
    57aa:	460f      	mov	r7, r1
    57ac:	e7d7      	b.n	575e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    57ae:	f1bb 0f19 	cmp.w	fp, #25
    57b2:	bf94      	ite	ls
    57b4:	3437      	addls	r4, #55	; 0x37
    57b6:	3457      	addhi	r4, #87	; 0x57
    57b8:	e7db      	b.n	5772 <encode_uint+0x38>
		} else if (radix == 16) {
    57ba:	2e10      	cmp	r6, #16
    57bc:	d1eb      	bne.n	5796 <encode_uint+0x5c>
			conv->altform_0c = true;
    57be:	78ab      	ldrb	r3, [r5, #2]
    57c0:	f043 0310 	orr.w	r3, r3, #16
    57c4:	e7e6      	b.n	5794 <encode_uint+0x5a>

000057c6 <outs>:
{
    57c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57ca:	4607      	mov	r7, r0
    57cc:	4688      	mov	r8, r1
    57ce:	4615      	mov	r5, r2
    57d0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    57d2:	4614      	mov	r4, r2
    57d4:	42b4      	cmp	r4, r6
    57d6:	eba4 0005 	sub.w	r0, r4, r5
    57da:	d302      	bcc.n	57e2 <outs+0x1c>
    57dc:	b93e      	cbnz	r6, 57ee <outs+0x28>
    57de:	7823      	ldrb	r3, [r4, #0]
    57e0:	b12b      	cbz	r3, 57ee <outs+0x28>
		int rc = out((int)*sp++, ctx);
    57e2:	f814 0b01 	ldrb.w	r0, [r4], #1
    57e6:	4641      	mov	r1, r8
    57e8:	47b8      	blx	r7
		if (rc < 0) {
    57ea:	2800      	cmp	r0, #0
    57ec:	daf2      	bge.n	57d4 <outs+0xe>
}
    57ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000057f2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    57f2:	4770      	bx	lr

000057f4 <abort_function>:
{
    57f4:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    57f6:	2000      	movs	r0, #0
    57f8:	f7fb fe7a 	bl	14f0 <sys_reboot>

000057fc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    57fc:	f000 bc19 	b.w	6032 <z_fatal_error>

00005800 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5800:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    5802:	6800      	ldr	r0, [r0, #0]
    5804:	f000 bc15 	b.w	6032 <z_fatal_error>

00005808 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5808:	2100      	movs	r1, #0
    580a:	2001      	movs	r0, #1
    580c:	f7ff bff6 	b.w	57fc <z_arm_fatal_error>

00005810 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    5810:	b508      	push	{r3, lr}
	handler();
    5812:	f7fc f8fd 	bl	1a10 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    581a:	f7fc b9d5 	b.w	1bc8 <z_arm_exc_exit>

0000581e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    581e:	3901      	subs	r1, #1
    5820:	4603      	mov	r3, r0
    5822:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5826:	b90a      	cbnz	r2, 582c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    5828:	701a      	strb	r2, [r3, #0]

	return dest;
}
    582a:	4770      	bx	lr
		*d = *s;
    582c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    5830:	e7f7      	b.n	5822 <strcpy+0x4>

00005832 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5832:	4603      	mov	r3, r0
	size_t n = 0;
    5834:	2000      	movs	r0, #0

	while (*s != '\0') {
    5836:	5c1a      	ldrb	r2, [r3, r0]
    5838:	b902      	cbnz	r2, 583c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    583a:	4770      	bx	lr
		n++;
    583c:	3001      	adds	r0, #1
    583e:	e7fa      	b.n	5836 <strlen+0x4>

00005840 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5840:	4603      	mov	r3, r0
	size_t n = 0;
    5842:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5844:	5c1a      	ldrb	r2, [r3, r0]
    5846:	b10a      	cbz	r2, 584c <strnlen+0xc>
    5848:	4288      	cmp	r0, r1
    584a:	d100      	bne.n	584e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    584c:	4770      	bx	lr
		n++;
    584e:	3001      	adds	r0, #1
    5850:	e7f8      	b.n	5844 <strnlen+0x4>

00005852 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    5852:	b510      	push	{r4, lr}
    5854:	1e43      	subs	r3, r0, #1
    5856:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    5858:	4291      	cmp	r1, r2
    585a:	d100      	bne.n	585e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    585c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    585e:	f811 4b01 	ldrb.w	r4, [r1], #1
    5862:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5866:	e7f7      	b.n	5858 <memcpy+0x6>

00005868 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5868:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    586a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    586c:	4603      	mov	r3, r0
	while (n > 0) {
    586e:	4293      	cmp	r3, r2
    5870:	d100      	bne.n	5874 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5872:	4770      	bx	lr
		*(d_byte++) = c_byte;
    5874:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5878:	e7f9      	b.n	586e <memset+0x6>

0000587a <_stdout_hook_default>:
}
    587a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    587e:	4770      	bx	lr

00005880 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    5880:	2806      	cmp	r0, #6
    5882:	d108      	bne.n	5896 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    5884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5888:	2201      	movs	r2, #1
    588a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    588e:	f3bf 8f4f 	dsb	sy
        __WFE();
    5892:	bf20      	wfe
    while (true)
    5894:	e7fd      	b.n	5892 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    5896:	4770      	bx	lr

00005898 <pm_state_exit_post_ops>:
    5898:	2300      	movs	r3, #0
    589a:	f383 8811 	msr	BASEPRI, r3
    589e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    58a2:	4770      	bx	lr

000058a4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    58a4:	6903      	ldr	r3, [r0, #16]
    58a6:	b2c9      	uxtb	r1, r1
    58a8:	220c      	movs	r2, #12
    58aa:	fb01 3302 	mla	r3, r1, r2, r3
    58ae:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    58b0:	f000 0007 	and.w	r0, r0, #7
    58b4:	4770      	bx	lr

000058b6 <set_on_state>:
	__asm__ volatile(
    58b6:	f04f 0320 	mov.w	r3, #32
    58ba:	f3ef 8211 	mrs	r2, BASEPRI
    58be:	f383 8812 	msr	BASEPRI_MAX, r3
    58c2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    58c6:	6803      	ldr	r3, [r0, #0]
    58c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    58cc:	f043 0302 	orr.w	r3, r3, #2
    58d0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    58d2:	f382 8811 	msr	BASEPRI, r2
    58d6:	f3bf 8f6f 	isb	sy
}
    58da:	4770      	bx	lr

000058dc <stop>:
{
    58dc:	4603      	mov	r3, r0
    58de:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    58e0:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    58e2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    58e4:	f04f 0420 	mov.w	r4, #32
    58e8:	f3ef 8611 	mrs	r6, BASEPRI
    58ec:	f384 8812 	msr	BASEPRI_MAX, r4
    58f0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    58f4:	250c      	movs	r5, #12
    58f6:	fb05 0401 	mla	r4, r5, r1, r0
    58fa:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    58fc:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    5900:	d001      	beq.n	5906 <stop+0x2a>
    5902:	42a2      	cmp	r2, r4
    5904:	d110      	bne.n	5928 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5906:	fb05 0001 	mla	r0, r5, r1, r0
    590a:	2201      	movs	r2, #1
    590c:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    590e:	2000      	movs	r0, #0
	__asm__ volatile(
    5910:	f386 8811 	msr	BASEPRI, r6
    5914:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    5918:	b928      	cbnz	r0, 5926 <stop+0x4a>
	get_sub_config(dev, type)->stop();
    591a:	685b      	ldr	r3, [r3, #4]
    591c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    5920:	684b      	ldr	r3, [r1, #4]
    5922:	4798      	blx	r3
	return 0;
    5924:	2000      	movs	r0, #0
}
    5926:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    5928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    592c:	e7f0      	b.n	5910 <stop+0x34>

0000592e <api_stop>:
	return stop(dev, subsys, CTX_API);
    592e:	2280      	movs	r2, #128	; 0x80
    5930:	f7ff bfd4 	b.w	58dc <stop>

00005934 <async_start>:
{
    5934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5936:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    5938:	6904      	ldr	r4, [r0, #16]
{
    593a:	4605      	mov	r5, r0
    593c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    593e:	f04f 0020 	mov.w	r0, #32
    5942:	f3ef 8c11 	mrs	ip, BASEPRI
    5946:	f380 8812 	msr	BASEPRI_MAX, r0
    594a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    594e:	260c      	movs	r6, #12
    5950:	fb06 4601 	mla	r6, r6, r1, r4
    5954:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5956:	f000 0e07 	and.w	lr, r0, #7
    595a:	f1be 0f01 	cmp.w	lr, #1
    595e:	d111      	bne.n	5984 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5960:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    5962:	2600      	movs	r6, #0
	__asm__ volatile(
    5964:	f38c 8811 	msr	BASEPRI, ip
    5968:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    596c:	b946      	cbnz	r6, 5980 <async_start+0x4c>
	subdata->cb = cb;
    596e:	200c      	movs	r0, #12
    5970:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    5974:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5978:	686b      	ldr	r3, [r5, #4]
    597a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    597e:	4798      	blx	r3
}
    5980:	4630      	mov	r0, r6
    5982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5984:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    5988:	4287      	cmp	r7, r0
    598a:	bf14      	ite	ne
    598c:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    5990:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    5994:	e7e6      	b.n	5964 <async_start+0x30>

00005996 <api_start>:
{
    5996:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5998:	2480      	movs	r4, #128	; 0x80
    599a:	9400      	str	r4, [sp, #0]
    599c:	f7ff ffca 	bl	5934 <async_start>
}
    59a0:	b002      	add	sp, #8
    59a2:	bd10      	pop	{r4, pc}

000059a4 <onoff_started_callback>:
	return &data->mgr[type];
    59a4:	6900      	ldr	r0, [r0, #16]
{
    59a6:	b410      	push	{r4}
	return &data->mgr[type];
    59a8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    59aa:	241c      	movs	r4, #28
    59ac:	fb03 0004 	mla	r0, r3, r4, r0
    59b0:	2100      	movs	r1, #0
}
    59b2:	bc10      	pop	{r4}
	notify(mgr, 0);
    59b4:	4710      	bx	r2

000059b6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    59b6:	2000      	movs	r0, #0
    59b8:	f000 b9de 	b.w	5d78 <nrfx_clock_start>

000059bc <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    59bc:	2000      	movs	r0, #0
    59be:	f000 ba18 	b.w	5df2 <nrfx_clock_stop>

000059c2 <blocking_start_callback>:
{
    59c2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    59c4:	f7fe bec0 	b.w	4748 <z_impl_k_sem_give>

000059c8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59c8:	6843      	ldr	r3, [r0, #4]
    59ca:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    59cc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    59d0:	600b      	str	r3, [r1, #0]
}
    59d2:	2000      	movs	r0, #0
    59d4:	4770      	bx	lr

000059d6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59d6:	6843      	ldr	r3, [r0, #4]
    59d8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    59da:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    59de:	4042      	eors	r2, r0
    59e0:	400a      	ands	r2, r1
    59e2:	4042      	eors	r2, r0
    p_reg->OUT = value;
    59e4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    59e8:	2000      	movs	r0, #0
    59ea:	4770      	bx	lr

000059ec <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59ec:	6843      	ldr	r3, [r0, #4]
    59ee:	685b      	ldr	r3, [r3, #4]
}
    59f0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    59f2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    59f6:	4770      	bx	lr

000059f8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59f8:	6843      	ldr	r3, [r0, #4]
    59fa:	685b      	ldr	r3, [r3, #4]
}
    59fc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    59fe:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    5a02:	4770      	bx	lr

00005a04 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a04:	6843      	ldr	r3, [r0, #4]
    5a06:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5a08:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    5a0c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    5a0e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    5a12:	2000      	movs	r0, #0
    5a14:	4770      	bx	lr

00005a16 <gpio_nrfx_manage_callback>:
	return port->data;
    5a16:	6903      	ldr	r3, [r0, #16]
	return list->head;
    5a18:	6858      	ldr	r0, [r3, #4]
{
    5a1a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    5a1c:	b158      	cbz	r0, 5a36 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5a1e:	2400      	movs	r4, #0
    5a20:	4281      	cmp	r1, r0
    5a22:	d112      	bne.n	5a4a <gpio_nrfx_manage_callback+0x34>
	return node->next;
    5a24:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    5a26:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    5a28:	b954      	cbnz	r4, 5a40 <gpio_nrfx_manage_callback+0x2a>
    5a2a:	428d      	cmp	r5, r1
	list->head = node;
    5a2c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    5a2e:	d100      	bne.n	5a32 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    5a30:	6098      	str	r0, [r3, #8]
	parent->next = child;
    5a32:	2000      	movs	r0, #0
    5a34:	6008      	str	r0, [r1, #0]
	if (set) {
    5a36:	b96a      	cbnz	r2, 5a54 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    5a38:	2000      	movs	r0, #0
}
    5a3a:	bd30      	pop	{r4, r5, pc}
    5a3c:	4628      	mov	r0, r5
    5a3e:	e7ef      	b.n	5a20 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    5a40:	428d      	cmp	r5, r1
	parent->next = child;
    5a42:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5a44:	bf08      	it	eq
    5a46:	609c      	streq	r4, [r3, #8]
}
    5a48:	e7f3      	b.n	5a32 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    5a4a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5a4c:	4604      	mov	r4, r0
    5a4e:	2d00      	cmp	r5, #0
    5a50:	d1f4      	bne.n	5a3c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    5a52:	b13a      	cbz	r2, 5a64 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    5a54:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    5a56:	685a      	ldr	r2, [r3, #4]
    5a58:	600a      	str	r2, [r1, #0]
	list->head = node;
    5a5a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    5a5c:	2800      	cmp	r0, #0
    5a5e:	d1eb      	bne.n	5a38 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    5a60:	6099      	str	r1, [r3, #8]
}
    5a62:	e7ea      	b.n	5a3a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    5a64:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5a68:	e7e7      	b.n	5a3a <gpio_nrfx_manage_callback+0x24>

00005a6a <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    5a6a:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twi_config *config = dev->config;
    5a6c:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    5a6e:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
    5a70:	d405      	bmi.n	5a7e <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    5a72:	f3c1 0242 	ubfx	r2, r1, #1, #3
    5a76:	2a01      	cmp	r2, #1
    5a78:	d004      	beq.n	5a84 <i2c_nrfx_twi_configure+0x1a>
    5a7a:	2a02      	cmp	r2, #2
    5a7c:	d00a      	beq.n	5a94 <i2c_nrfx_twi_configure+0x2a>
		return -EINVAL;
    5a7e:	f06f 0015 	mvn.w	r0, #21
}
    5a82:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    5a84:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    5a86:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    5a8a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
    5a8e:	6241      	str	r1, [r0, #36]	; 0x24
	return 0;
    5a90:	2000      	movs	r0, #0
    5a92:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    5a94:	681b      	ldr	r3, [r3, #0]
    5a96:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    5a9a:	e7f6      	b.n	5a8a <i2c_nrfx_twi_configure+0x20>

00005a9c <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    5a9c:	6902      	ldr	r2, [r0, #16]
{
    5a9e:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    5aa0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    5aa4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5aa8:	2000      	movs	r0, #0
    5aaa:	4770      	bx	lr

00005aac <uarte_nrfx_err_check>:
	return config->uarte_regs;
    5aac:	6843      	ldr	r3, [r0, #4]
    5aae:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5ab0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5ab4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5ab8:	4770      	bx	lr

00005aba <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    5aba:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    5abc:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    5abe:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ac0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5ac4:	b148      	cbz	r0, 5ada <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    5ac6:	7c52      	ldrb	r2, [r2, #17]
    5ac8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5aca:	2000      	movs	r0, #0
    5acc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5ad0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ad4:	2201      	movs	r2, #1
    5ad6:	601a      	str	r2, [r3, #0]
	return 0;
    5ad8:	4770      	bx	lr
		return -1;
    5ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5ade:	4770      	bx	lr

00005ae0 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    5ae0:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    5ae2:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ae4:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5ae8:	b940      	cbnz	r0, 5afc <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5aea:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5aec:	079b      	lsls	r3, r3, #30
    5aee:	d406      	bmi.n	5afe <is_tx_ready.isra.0+0x1e>
    5af0:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    5af4:	3800      	subs	r0, #0
    5af6:	bf18      	it	ne
    5af8:	2001      	movne	r0, #1
    5afa:	4770      	bx	lr
    5afc:	2001      	movs	r0, #1
}
    5afe:	4770      	bx	lr

00005b00 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    5b00:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    5b02:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    5b04:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5b08:	05c9      	lsls	r1, r1, #23
    5b0a:	d518      	bpl.n	5b3e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b0c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    5b10:	b1a9      	cbz	r1, 5b3e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    5b12:	f04f 0020 	mov.w	r0, #32
    5b16:	f3ef 8111 	mrs	r1, BASEPRI
    5b1a:	f380 8812 	msr	BASEPRI_MAX, r0
    5b1e:	f3bf 8f6f 	isb	sy
    5b22:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5b26:	b130      	cbz	r0, 5b36 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b28:	2000      	movs	r0, #0
    5b2a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    5b2e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b32:	2001      	movs	r0, #1
    5b34:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    5b36:	f381 8811 	msr	BASEPRI, r1
    5b3a:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5b3e:	6852      	ldr	r2, [r2, #4]
    5b40:	06d2      	lsls	r2, r2, #27
    5b42:	d515      	bpl.n	5b70 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    5b44:	f04f 0120 	mov.w	r1, #32
    5b48:	f3ef 8211 	mrs	r2, BASEPRI
    5b4c:	f381 8812 	msr	BASEPRI_MAX, r1
    5b50:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b54:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5b58:	b111      	cbz	r1, 5b60 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5b5a:	2100      	movs	r1, #0
    5b5c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5b60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    5b64:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    5b68:	f382 8811 	msr	BASEPRI, r2
    5b6c:	f3bf 8f6f 	isb	sy
}
    5b70:	4770      	bx	lr

00005b72 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    5b72:	b510      	push	{r4, lr}
    5b74:	2200      	movs	r2, #0
    5b76:	4604      	mov	r4, r0
    5b78:	2101      	movs	r1, #1
    5b7a:	2028      	movs	r0, #40	; 0x28
    5b7c:	f7fb ff30 	bl	19e0 <z_arm_irq_priority_set>
    5b80:	2028      	movs	r0, #40	; 0x28
    5b82:	f7fb ff0f 	bl	19a4 <arch_irq_enable>
    5b86:	4620      	mov	r0, r4
    5b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5b8c:	f7fc bf86 	b.w	2a9c <uarte_instance_init.constprop.0>

00005b90 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    5b90:	b510      	push	{r4, lr}
    5b92:	2200      	movs	r2, #0
    5b94:	4604      	mov	r4, r0
    5b96:	2101      	movs	r1, #1
    5b98:	2002      	movs	r0, #2
    5b9a:	f7fb ff21 	bl	19e0 <z_arm_irq_priority_set>
    5b9e:	2002      	movs	r0, #2
    5ba0:	f7fb ff00 	bl	19a4 <arch_irq_enable>
    5ba4:	4620      	mov	r0, r4
    5ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5baa:	f7fc bf77 	b.w	2a9c <uarte_instance_init.constprop.0>

00005bae <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5bae:	4770      	bx	lr

00005bb0 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5bb0:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    5bb2:	6843      	ldr	r3, [r0, #4]
    5bb4:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5bb6:	7a03      	ldrb	r3, [r0, #8]
    5bb8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    5bbc:	3b01      	subs	r3, #1
    5bbe:	00db      	lsls	r3, r3, #3
    5bc0:	6845      	ldr	r5, [r0, #4]
    5bc2:	6814      	ldr	r4, [r2, #0]
    5bc4:	441d      	add	r5, r3
    5bc6:	42ac      	cmp	r4, r5
    5bc8:	d902      	bls.n	5bd0 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    5bca:	f06f 0001 	mvn.w	r0, #1
}
    5bce:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    5bd0:	7965      	ldrb	r5, [r4, #5]
    5bd2:	428d      	cmp	r5, r1
    5bd4:	d002      	beq.n	5bdc <pinctrl_lookup_state+0x2c>
		(*state)++;
    5bd6:	3408      	adds	r4, #8
    5bd8:	6014      	str	r4, [r2, #0]
    5bda:	e7f1      	b.n	5bc0 <pinctrl_lookup_state+0x10>
			return 0;
    5bdc:	2000      	movs	r0, #0
    5bde:	e7f6      	b.n	5bce <pinctrl_lookup_state+0x1e>

00005be0 <nrf_gpio_pin_write>:
    if (value == 0)
    5be0:	b909      	cbnz	r1, 5be6 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    5be2:	f7fd ba7d 	b.w	30e0 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    5be6:	f7fd baad 	b.w	3144 <nrf_gpio_pin_set>

00005bea <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    5bea:	b570      	push	{r4, r5, r6, lr}
    5bec:	4615      	mov	r5, r2
    5bee:	4604      	mov	r4, r0
    5bf0:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5bf4:	42a6      	cmp	r6, r4
    5bf6:	d101      	bne.n	5bfc <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    5bf8:	2000      	movs	r0, #0
}
    5bfa:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    5bfc:	6823      	ldr	r3, [r4, #0]
    5bfe:	0c1a      	lsrs	r2, r3, #16
    5c00:	2a22      	cmp	r2, #34	; 0x22
    5c02:	f200 808e 	bhi.w	5d22 <pinctrl_configure_pins+0x138>
    5c06:	e8df f002 	tbb	[pc, r2]
    5c0a:	1d12      	.short	0x1d12
    5c0c:	39294324 	.word	0x39294324
    5c10:	8c8c8c43 	.word	0x8c8c8c43
    5c14:	8c4d488c 	.word	0x8c4d488c
    5c18:	8c8c8c8c 	.word	0x8c8c8c8c
    5c1c:	8c8c8c8c 	.word	0x8c8c8c8c
    5c20:	68635e52 	.word	0x68635e52
    5c24:	6d8c8c8c 	.word	0x6d8c8c8c
    5c28:	827d7873 	.word	0x827d7873
    5c2c:	87          	.byte	0x87
    5c2d:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    5c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5c32:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    5c36:	6820      	ldr	r0, [r4, #0]
    5c38:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    5c3c:	f7fd fa82 	bl	3144 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5c40:	2201      	movs	r2, #1
    5c42:	e015      	b.n	5c70 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    5c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5c48:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5c4c:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5c4e:	2100      	movs	r1, #0
    5c50:	e00f      	b.n	5c72 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    5c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5c56:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    5c5a:	e7ec      	b.n	5c36 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    5c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5c60:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    5c64:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    5c66:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    5c6a:	f7fd fa39 	bl	30e0 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5c6e:	2200      	movs	r2, #0
    5c70:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5c72:	6820      	ldr	r0, [r4, #0]
    5c74:	f7fd fa44 	bl	3100 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5c78:	3404      	adds	r4, #4
    5c7a:	e7bb      	b.n	5bf4 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    5c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5c80:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    5c84:	6820      	ldr	r0, [r4, #0]
    5c86:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    5c8a:	f7fd fa29 	bl	30e0 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5c8e:	e7d7      	b.n	5c40 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    5c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5c94:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5c98:	e7d8      	b.n	5c4c <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    5c9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5c9e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5ca2:	e7d3      	b.n	5c4c <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    5ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5ca8:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    5cac:	e7ce      	b.n	5c4c <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    5cae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5cb2:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5cb6:	6820      	ldr	r0, [r4, #0]
    5cb8:	f3c0 3140 	ubfx	r1, r0, #13, #1
    5cbc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    5cc0:	f7ff ff8e 	bl	5be0 <nrf_gpio_pin_write>
    5cc4:	e7bc      	b.n	5c40 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    5cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5cca:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5cce:	e7f2      	b.n	5cb6 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    5cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5cd4:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5cd8:	e7ed      	b.n	5cb6 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    5cda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5cde:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    5ce2:	e7e8      	b.n	5cb6 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    5ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5ce8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5cec:	2201      	movs	r2, #1
    5cee:	e7ae      	b.n	5c4e <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    5cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5cf4:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5cf8:	e7f8      	b.n	5cec <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    5cfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5cfe:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5d02:	e7f3      	b.n	5cec <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    5d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5d08:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5d0c:	e7ee      	b.n	5cec <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    5d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5d12:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5d16:	e7e9      	b.n	5cec <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    5d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5d1c:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    5d20:	e7e4      	b.n	5cec <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    5d22:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5d26:	e768      	b.n	5bfa <pinctrl_configure_pins+0x10>

00005d28 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5d28:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    5d2a:	2000      	movs	r0, #0
    5d2c:	f7fc fa04 	bl	2138 <sys_arch_reboot>

00005d30 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    5d30:	f7ff b9fa 	b.w	5128 <nrf_cc3xx_platform_init_no_rng>

00005d34 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    5d34:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    5d36:	f7fb fd4d 	bl	17d4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    5d3a:	f7fb fdff 	bl	193c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    5d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    5d42:	f7ff b9f1 	b.w	5128 <nrf_cc3xx_platform_init_no_rng>

00005d46 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5d46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5d4a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    5d4e:	f1a0 0308 	sub.w	r3, r0, #8
    5d52:	4258      	negs	r0, r3
    5d54:	4158      	adcs	r0, r3
    5d56:	4770      	bx	lr

00005d58 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    5d58:	4700      	bx	r0

00005d5a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    5d5a:	f000 bad1 	b.w	6300 <z_impl_k_busy_wait>

00005d5e <nrfx_clock_enable>:
{
    5d5e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5d60:	2000      	movs	r0, #0
    5d62:	f7fb fe2f 	bl	19c4 <arch_irq_is_enabled>
    5d66:	b908      	cbnz	r0, 5d6c <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5d68:	f7fb fe1c 	bl	19a4 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d70:	2200      	movs	r2, #0
    5d72:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    5d76:	bd08      	pop	{r3, pc}

00005d78 <nrfx_clock_start>:
{
    5d78:	b508      	push	{r3, lr}
    switch (domain)
    5d7a:	b110      	cbz	r0, 5d82 <nrfx_clock_start+0xa>
    5d7c:	2801      	cmp	r0, #1
    5d7e:	d02d      	beq.n	5ddc <nrfx_clock_start+0x64>
}
    5d80:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5d82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5d86:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5d8a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5d8e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    5d92:	d10b      	bne.n	5dac <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    5d94:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    5d98:	07c9      	lsls	r1, r1, #31
    5d9a:	d510      	bpl.n	5dbe <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5d9c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    5da0:	079b      	lsls	r3, r3, #30
    5da2:	d408      	bmi.n	5db6 <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
    5da4:	2302      	movs	r3, #2
    5da6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    5daa:	e7e9      	b.n	5d80 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5dac:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    5db0:	2b01      	cmp	r3, #1
    5db2:	d004      	beq.n	5dbe <nrfx_clock_start+0x46>
    if (!is_correct_clk)
    5db4:	b11b      	cbz	r3, 5dbe <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5db6:	2000      	movs	r0, #0
    5db8:	f7fd fb20 	bl	33fc <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    5dbc:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    5dbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5dc2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5dc6:	2300      	movs	r3, #0
    5dc8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    5dcc:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    5dd0:	2302      	movs	r3, #2
    5dd2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5dd6:	2301      	movs	r3, #1
    5dd8:	6093      	str	r3, [r2, #8]
}
    5dda:	e7d1      	b.n	5d80 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5de0:	2200      	movs	r2, #0
    5de2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5de6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    5dea:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5dee:	6018      	str	r0, [r3, #0]
}
    5df0:	e7c6      	b.n	5d80 <nrfx_clock_start+0x8>

00005df2 <nrfx_clock_stop>:
    clock_stop(domain);
    5df2:	f7fd bb03 	b.w	33fc <clock_stop>

00005df6 <nrf_gpio_reconfigure>:
{
    5df6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5df8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5dfa:	a801      	add	r0, sp, #4
{
    5dfc:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    5e00:	4617      	mov	r7, r2
    5e02:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5e04:	f7fd fb92 	bl	352c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5e08:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5e0a:	2f00      	cmp	r7, #0
    5e0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5e10:	bf14      	ite	ne
    5e12:	2302      	movne	r3, #2
    5e14:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    5e16:	2900      	cmp	r1, #0
    5e18:	bf18      	it	ne
    5e1a:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5e1e:	2d00      	cmp	r5, #0
    5e20:	bf14      	ite	ne
    5e22:	f04f 0c0c 	movne.w	ip, #12
    5e26:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    5e2a:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5e2c:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    5e30:	bf14      	ite	ne
    5e32:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    5e36:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    5e3a:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5e3c:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5e40:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    5e44:	bf14      	ite	ne
    5e46:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    5e4a:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    5e4e:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    5e52:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5e56:	b101      	cbz	r1, 5e5a <nrf_gpio_reconfigure+0x64>
    5e58:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5e5a:	b10f      	cbz	r7, 5e60 <nrf_gpio_reconfigure+0x6a>
    5e5c:	783f      	ldrb	r7, [r7, #0]
    5e5e:	007f      	lsls	r7, r7, #1
    5e60:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5e62:	b10d      	cbz	r5, 5e68 <nrf_gpio_reconfigure+0x72>
    5e64:	782d      	ldrb	r5, [r5, #0]
    5e66:	00ad      	lsls	r5, r5, #2
    5e68:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    5e6a:	b10c      	cbz	r4, 5e70 <nrf_gpio_reconfigure+0x7a>
    5e6c:	7822      	ldrb	r2, [r4, #0]
    5e6e:	0214      	lsls	r4, r2, #8
    5e70:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    5e72:	b10e      	cbz	r6, 5e78 <nrf_gpio_reconfigure+0x82>
    5e74:	7836      	ldrb	r6, [r6, #0]
    5e76:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5e78:	432c      	orrs	r4, r5
    5e7a:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    5e7c:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    5e80:	b003      	add	sp, #12
    5e82:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005e84 <nrf_gpio_cfg_sense_set>:
{
    5e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    5e86:	f10d 030f 	add.w	r3, sp, #15
    5e8a:	9301      	str	r3, [sp, #4]
    5e8c:	2300      	movs	r3, #0
{
    5e8e:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    5e92:	9300      	str	r3, [sp, #0]
    5e94:	461a      	mov	r2, r3
    5e96:	4619      	mov	r1, r3
    5e98:	f7ff ffad 	bl	5df6 <nrf_gpio_reconfigure>
}
    5e9c:	b005      	add	sp, #20
    5e9e:	f85d fb04 	ldr.w	pc, [sp], #4

00005ea2 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
    5ea2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
    5ea4:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    5ea6:	6b48      	ldr	r0, [r1, #52]	; 0x34
    5ea8:	4298      	cmp	r0, r3
{
    5eaa:	b510      	push	{r4, lr}
    5eac:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
    5eb0:	d205      	bcs.n	5ebe <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    5eb2:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
    5eb4:	5c09      	ldrb	r1, [r1, r0]
    5eb6:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
    5eba:	4618      	mov	r0, r3
}
    5ebc:	e004      	b.n	5ec8 <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
    5ebe:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    5ec2:	b110      	cbz	r0, 5eca <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ec4:	61d3      	str	r3, [r2, #28]
            return false;
    5ec6:	2000      	movs	r0, #0
}
    5ec8:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    5eca:	6a0c      	ldr	r4, [r1, #32]
    5ecc:	0664      	lsls	r4, r4, #25
    5ece:	d503      	bpl.n	5ed8 <twi_send_byte+0x36>
    5ed0:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    5ed2:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    5ed6:	e7f7      	b.n	5ec8 <twi_send_byte+0x26>
    5ed8:	6153      	str	r3, [r2, #20]
    5eda:	e7ee      	b.n	5eba <twi_send_byte+0x18>

00005edc <twi_transfer>:
{
    5edc:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ede:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
    5ee2:	4604      	mov	r4, r0
    5ee4:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    5ee6:	b12e      	cbz	r6, 5ef4 <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ee8:	2300      	movs	r3, #0
    5eea:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    5eee:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    5ef2:	2601      	movs	r6, #1
    if (p_cb->error)
    5ef4:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    5ef8:	b320      	cbz	r0, 5f44 <twi_transfer+0x68>
    5efa:	2300      	movs	r3, #0
    5efc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    5f00:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    5f04:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    5f08:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
    5f0c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    5f10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
    5f14:	2e00      	cmp	r6, #0
    5f16:	d068      	beq.n	5fea <twi_transfer+0x10e>
        if (!p_cb->error)
    5f18:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    5f1c:	2300      	movs	r3, #0
    5f1e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
    5f22:	bb88      	cbnz	r0, 5f88 <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    5f24:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5f26:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    5f28:	429a      	cmp	r2, r3
        return false;
    5f2a:	bf1c      	itt	ne
    5f2c:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    5f2e:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    5f30:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    5f34:	bf1c      	itt	ne
    5f36:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    5f3a:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
    5f3e:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
    5f42:	e022      	b.n	5f8a <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f44:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    5f48:	b142      	cbz	r2, 5f5c <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f4a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    5f4e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f52:	2301      	movs	r3, #1
    5f54:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    5f56:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    5f5a:	e7db      	b.n	5f14 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f5c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    5f60:	b1a3      	cbz	r3, 5f8c <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f62:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    5f66:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    5f6a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    5f6c:	3301      	adds	r3, #1
    5f6e:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    5f74:	b113      	cbz	r3, 5f7c <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f76:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    5f7a:	e7e8      	b.n	5f4e <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
    5f7c:	4629      	mov	r1, r5
    5f7e:	4620      	mov	r0, r4
    5f80:	f7ff ff8f 	bl	5ea2 <twi_send_byte>
    5f84:	2800      	cmp	r0, #0
    5f86:	d1c5      	bne.n	5f14 <twi_transfer+0x38>
                    return false;
    5f88:	2000      	movs	r0, #0
}
    5f8a:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f8c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    5f90:	2a00      	cmp	r2, #0
    5f92:	d0bf      	beq.n	5f14 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f94:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    5f98:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f9c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    5fa0:	b112      	cbz	r2, 5fa8 <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5fa2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    5fa6:	e7d2      	b.n	5f4e <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    5fa8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    5faa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5fac:	4293      	cmp	r3, r2
    5fae:	d2b1      	bcs.n	5f14 <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    5fb0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    5fb2:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
    5fb6:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
    5fb8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5fba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    5fbc:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5fbe:	1e51      	subs	r1, r2, #1
    5fc0:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
    5fc2:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5fc4:	d108      	bne.n	5fd8 <twi_transfer+0xfc>
    5fc6:	6a29      	ldr	r1, [r5, #32]
    5fc8:	0649      	lsls	r1, r1, #25
    5fca:	d410      	bmi.n	5fee <twi_transfer+0x112>
    p_reg->SHORTS = mask;
    5fcc:	2302      	movs	r3, #2
    5fce:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5fd2:	2301      	movs	r3, #1
    5fd4:	6223      	str	r3, [r4, #32]
    5fd6:	e79d      	b.n	5f14 <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5fd8:	4293      	cmp	r3, r2
    5fda:	d1fa      	bne.n	5fd2 <twi_transfer+0xf6>
    5fdc:	6a2b      	ldr	r3, [r5, #32]
    5fde:	065b      	lsls	r3, r3, #25
    5fe0:	d598      	bpl.n	5f14 <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    5fe2:	2302      	movs	r3, #2
    5fe4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
    5fe8:	e7cf      	b.n	5f8a <twi_transfer+0xae>
    return true;
    5fea:	2001      	movs	r0, #1
    5fec:	e7cd      	b.n	5f8a <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    5fee:	4293      	cmp	r3, r2
    5ff0:	d1ef      	bne.n	5fd2 <twi_transfer+0xf6>
    5ff2:	e7f6      	b.n	5fe2 <twi_transfer+0x106>

00005ff4 <nrf_gpio_pin_set>:
{
    5ff4:	b507      	push	{r0, r1, r2, lr}
    5ff6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5ff8:	a801      	add	r0, sp, #4
    5ffa:	f7fe f835 	bl	4068 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5ffe:	9a01      	ldr	r2, [sp, #4]
    6000:	2301      	movs	r3, #1
    6002:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    6004:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    6008:	b003      	add	sp, #12
    600a:	f85d fb04 	ldr.w	pc, [sp], #4

0000600e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    600e:	f7fe b89d 	b.w	414c <_DoInit>

00006012 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    6012:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    6014:	f7ff fffb 	bl	600e <SEGGER_RTT_Init>

	return 0;
}
    6018:	2000      	movs	r0, #0
    601a:	bd08      	pop	{r3, pc}

0000601c <z_device_state_init>:
}
    601c:	4770      	bx	lr

0000601e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    601e:	b138      	cbz	r0, 6030 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6020:	68c3      	ldr	r3, [r0, #12]
    6022:	8818      	ldrh	r0, [r3, #0]
    6024:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6028:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    602c:	4258      	negs	r0, r3
    602e:	4158      	adcs	r0, r3
}
    6030:	4770      	bx	lr

00006032 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6034:	4605      	mov	r5, r0
    6036:	460e      	mov	r6, r1
	__asm__ volatile(
    6038:	f04f 0320 	mov.w	r3, #32
    603c:	f3ef 8711 	mrs	r7, BASEPRI
    6040:	f383 8812 	msr	BASEPRI_MAX, r3
    6044:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6048:	f7fe feb8 	bl	4dbc <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    604c:	4631      	mov	r1, r6
    604e:	4604      	mov	r4, r0
    6050:	4628      	mov	r0, r5
    6052:	f7ff fe69 	bl	5d28 <k_sys_fatal_error_handler>
	__asm__ volatile(
    6056:	f387 8811 	msr	BASEPRI, r7
    605a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    605e:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6060:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6064:	f7fb bf38 	b.w	1ed8 <z_impl_k_thread_abort>

00006068 <z_early_memset>:
	(void) memset(dst, c, n);
    6068:	f7ff bbfe 	b.w	5868 <memset>

0000606c <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    606c:	f7ff bbf1 	b.w	5852 <memcpy>

00006070 <k_mem_slab_init>:
{
    6070:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    6072:	2400      	movs	r4, #0
    6074:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6076:	ea41 0402 	orr.w	r4, r1, r2
    607a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    607e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    6082:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6084:	d10c      	bne.n	60a0 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    6086:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6088:	42a3      	cmp	r3, r4
    608a:	d103      	bne.n	6094 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    608c:	e9c0 0000 	strd	r0, r0, [r0]
}
    6090:	2000      	movs	r0, #0
}
    6092:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    6094:	6945      	ldr	r5, [r0, #20]
    6096:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    6098:	3401      	adds	r4, #1
		slab->free_list = p;
    609a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    609c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    609e:	e7f3      	b.n	6088 <k_mem_slab_init+0x18>
		return -EINVAL;
    60a0:	f06f 0015 	mvn.w	r0, #21
	return rc;
    60a4:	e7f5      	b.n	6092 <k_mem_slab_init+0x22>

000060a6 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    60a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60a8:	4604      	mov	r4, r0
    60aa:	460d      	mov	r5, r1
	__asm__ volatile(
    60ac:	f04f 0320 	mov.w	r3, #32
    60b0:	f3ef 8611 	mrs	r6, BASEPRI
    60b4:	f383 8812 	msr	BASEPRI_MAX, r3
    60b8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    60bc:	6947      	ldr	r7, [r0, #20]
    60be:	b977      	cbnz	r7, 60de <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    60c0:	f000 f8c0 	bl	6244 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    60c4:	b158      	cbz	r0, 60de <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    60c6:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    60c8:	6142      	str	r2, [r0, #20]
    60ca:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    60cc:	f000 f85e 	bl	618c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    60d0:	4631      	mov	r1, r6
    60d2:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    60d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    60da:	f7fe bbc3 	b.w	4864 <z_reschedule>
	**(char ***) mem = slab->free_list;
    60de:	682b      	ldr	r3, [r5, #0]
    60e0:	6962      	ldr	r2, [r4, #20]
    60e2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    60e4:	682b      	ldr	r3, [r5, #0]
    60e6:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    60e8:	69a3      	ldr	r3, [r4, #24]
    60ea:	3b01      	subs	r3, #1
    60ec:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    60ee:	f386 8811 	msr	BASEPRI, r6
    60f2:	f3bf 8f6f 	isb	sy
}
    60f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000060f8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    60f8:	f3ef 8005 	mrs	r0, IPSR
}
    60fc:	3800      	subs	r0, #0
    60fe:	bf18      	it	ne
    6100:	2001      	movne	r0, #1
    6102:	4770      	bx	lr

00006104 <z_pm_save_idle_exit>:
{
    6104:	b508      	push	{r3, lr}
	pm_system_resume();
    6106:	f7fb fa4d 	bl	15a4 <pm_system_resume>
}
    610a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    610e:	f7ff bd4e 	b.w	5bae <sys_clock_idle_exit>

00006112 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    6112:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6116:	428b      	cmp	r3, r1
    6118:	d001      	beq.n	611e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    611a:	f7fe bd0b 	b.w	4b34 <z_set_prio>
}
    611e:	2000      	movs	r0, #0
    6120:	4770      	bx	lr

00006122 <z_impl_k_mutex_init>:
{
    6122:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6124:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    6126:	e9c3 0002 	strd	r0, r0, [r3, #8]
    612a:	e9c3 3300 	strd	r3, r3, [r3]
}
    612e:	4770      	bx	lr

00006130 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    6130:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6134:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6136:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6138:	2300      	movs	r3, #0
	node->prev = NULL;
    613a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    613e:	4770      	bx	lr

00006140 <unpend_thread_no_timeout>:
{
    6140:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    6142:	f7ff fff5 	bl	6130 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6146:	7b43      	ldrb	r3, [r0, #13]
    6148:	f023 0302 	bic.w	r3, r3, #2
    614c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    614e:	2300      	movs	r3, #0
    6150:	6083      	str	r3, [r0, #8]
}
    6152:	bd08      	pop	{r3, pc}

00006154 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6154:	4603      	mov	r3, r0
    6156:	b920      	cbnz	r0, 6162 <z_reschedule_irqlock+0xe>
    6158:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    615c:	b90a      	cbnz	r2, 6162 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    615e:	f7fb bc77 	b.w	1a50 <arch_swap>
    6162:	f383 8811 	msr	BASEPRI, r3
    6166:	f3bf 8f6f 	isb	sy
}
    616a:	4770      	bx	lr

0000616c <z_reschedule_unlocked>:
	__asm__ volatile(
    616c:	f04f 0320 	mov.w	r3, #32
    6170:	f3ef 8011 	mrs	r0, BASEPRI
    6174:	f383 8812 	msr	BASEPRI_MAX, r3
    6178:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    617c:	f7ff bfea 	b.w	6154 <z_reschedule_irqlock>

00006180 <z_priq_dumb_best>:
{
    6180:	4603      	mov	r3, r0
	return list->head == list;
    6182:	6800      	ldr	r0, [r0, #0]
}
    6184:	4283      	cmp	r3, r0
    6186:	bf08      	it	eq
    6188:	2000      	moveq	r0, #0
    618a:	4770      	bx	lr

0000618c <z_ready_thread>:
{
    618c:	b510      	push	{r4, lr}
    618e:	f04f 0320 	mov.w	r3, #32
    6192:	f3ef 8411 	mrs	r4, BASEPRI
    6196:	f383 8812 	msr	BASEPRI_MAX, r3
    619a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    619e:	f7fe fc23 	bl	49e8 <ready_thread>
	__asm__ volatile(
    61a2:	f384 8811 	msr	BASEPRI, r4
    61a6:	f3bf 8f6f 	isb	sy
}
    61aa:	bd10      	pop	{r4, pc}

000061ac <z_thread_timeout>:
{
    61ac:	b510      	push	{r4, lr}
    61ae:	4601      	mov	r1, r0
	__asm__ volatile(
    61b0:	f04f 0320 	mov.w	r3, #32
    61b4:	f3ef 8411 	mrs	r4, BASEPRI
    61b8:	f383 8812 	msr	BASEPRI_MAX, r3
    61bc:	f3bf 8f6f 	isb	sy
		if (!killed) {
    61c0:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    61c4:	f013 0f28 	tst.w	r3, #40	; 0x28
    61c8:	d10d      	bne.n	61e6 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    61ca:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    61ce:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    61d0:	b10b      	cbz	r3, 61d6 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    61d2:	f7ff ffb5 	bl	6140 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    61d6:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    61da:	f023 0314 	bic.w	r3, r3, #20
    61de:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    61e2:	f7fe fc01 	bl	49e8 <ready_thread>
	__asm__ volatile(
    61e6:	f384 8811 	msr	BASEPRI, r4
    61ea:	f3bf 8f6f 	isb	sy
}
    61ee:	bd10      	pop	{r4, pc}

000061f0 <add_to_waitq_locked>:
{
    61f0:	b538      	push	{r3, r4, r5, lr}
    61f2:	4604      	mov	r4, r0
    61f4:	460d      	mov	r5, r1
	unready_thread(thread);
    61f6:	f7fe fc4b 	bl	4a90 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    61fa:	7b63      	ldrb	r3, [r4, #13]
    61fc:	f043 0302 	orr.w	r3, r3, #2
    6200:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6202:	b195      	cbz	r5, 622a <add_to_waitq_locked+0x3a>
    6204:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    6206:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6208:	429d      	cmp	r5, r3
    620a:	d015      	beq.n	6238 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    620c:	b1a3      	cbz	r3, 6238 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    620e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6212:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6216:	4291      	cmp	r1, r2
    6218:	d008      	beq.n	622c <add_to_waitq_locked+0x3c>
		return b2 - b1;
    621a:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    621c:	2a00      	cmp	r2, #0
    621e:	dd05      	ble.n	622c <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    6220:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6222:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6226:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6228:	605c      	str	r4, [r3, #4]
}
    622a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    622c:	686a      	ldr	r2, [r5, #4]
    622e:	4293      	cmp	r3, r2
    6230:	d002      	beq.n	6238 <add_to_waitq_locked+0x48>
    6232:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6234:	2b00      	cmp	r3, #0
    6236:	d1ec      	bne.n	6212 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    6238:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    623a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    623e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6240:	606c      	str	r4, [r5, #4]
}
    6242:	e7f2      	b.n	622a <add_to_waitq_locked+0x3a>

00006244 <z_unpend_first_thread>:
{
    6244:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6246:	f04f 0320 	mov.w	r3, #32
    624a:	f3ef 8511 	mrs	r5, BASEPRI
    624e:	f383 8812 	msr	BASEPRI_MAX, r3
    6252:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    6256:	f7ff ff93 	bl	6180 <z_priq_dumb_best>
		if (thread != NULL) {
    625a:	4604      	mov	r4, r0
    625c:	b120      	cbz	r0, 6268 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    625e:	f7ff ff6f 	bl	6140 <unpend_thread_no_timeout>
    6262:	3018      	adds	r0, #24
    6264:	f000 f806 	bl	6274 <z_abort_timeout>
	__asm__ volatile(
    6268:	f385 8811 	msr	BASEPRI, r5
    626c:	f3bf 8f6f 	isb	sy
}
    6270:	4620      	mov	r0, r4
    6272:	bd38      	pop	{r3, r4, r5, pc}

00006274 <z_abort_timeout>:
{
    6274:	b510      	push	{r4, lr}
	__asm__ volatile(
    6276:	f04f 0220 	mov.w	r2, #32
    627a:	f3ef 8411 	mrs	r4, BASEPRI
    627e:	f382 8812 	msr	BASEPRI_MAX, r2
    6282:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    6286:	6803      	ldr	r3, [r0, #0]
    6288:	b13b      	cbz	r3, 629a <z_abort_timeout+0x26>
			remove_timeout(to);
    628a:	f7fe fe39 	bl	4f00 <remove_timeout>
			ret = 0;
    628e:	2000      	movs	r0, #0
	__asm__ volatile(
    6290:	f384 8811 	msr	BASEPRI, r4
    6294:	f3bf 8f6f 	isb	sy
}
    6298:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    629a:	f06f 0015 	mvn.w	r0, #21
    629e:	e7f7      	b.n	6290 <z_abort_timeout+0x1c>

000062a0 <z_get_next_timeout_expiry>:
{
    62a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    62a2:	f04f 0320 	mov.w	r3, #32
    62a6:	f3ef 8411 	mrs	r4, BASEPRI
    62aa:	f383 8812 	msr	BASEPRI_MAX, r3
    62ae:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    62b2:	f7fe fdff 	bl	4eb4 <next_timeout>
	__asm__ volatile(
    62b6:	f384 8811 	msr	BASEPRI, r4
    62ba:	f3bf 8f6f 	isb	sy
}
    62be:	bd10      	pop	{r4, pc}

000062c0 <z_set_timeout_expiry>:
{
    62c0:	b570      	push	{r4, r5, r6, lr}
    62c2:	4604      	mov	r4, r0
    62c4:	460d      	mov	r5, r1
	__asm__ volatile(
    62c6:	f04f 0320 	mov.w	r3, #32
    62ca:	f3ef 8611 	mrs	r6, BASEPRI
    62ce:	f383 8812 	msr	BASEPRI_MAX, r3
    62d2:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    62d6:	f7fe fded 	bl	4eb4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    62da:	2801      	cmp	r0, #1
    62dc:	dd05      	ble.n	62ea <z_set_timeout_expiry+0x2a>
    62de:	42a0      	cmp	r0, r4
    62e0:	db03      	blt.n	62ea <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    62e2:	4629      	mov	r1, r5
    62e4:	4620      	mov	r0, r4
    62e6:	f7fc febf 	bl	3068 <sys_clock_set_timeout>
	__asm__ volatile(
    62ea:	f386 8811 	msr	BASEPRI, r6
    62ee:	f3bf 8f6f 	isb	sy
}
    62f2:	bd70      	pop	{r4, r5, r6, pc}

000062f4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    62f4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    62f6:	f7fe fef3 	bl	50e0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    62fa:	bd08      	pop	{r3, pc}

000062fc <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    62fc:	f7fe bef0 	b.w	50e0 <sys_clock_tick_get>

00006300 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6300:	b108      	cbz	r0, 6306 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6302:	f7fb bf2f 	b.w	2164 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6306:	4770      	bx	lr

00006308 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    6308:	f7fc bf46 	b.w	3198 <SystemInit>
